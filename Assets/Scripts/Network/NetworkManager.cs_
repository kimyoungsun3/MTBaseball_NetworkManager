//@@@@ 0022 start 
//@@@@ 0022 end

#if UNITY_EDITOR
//#define NET_DEBUG_MODE_BASE
#define NET_DEBUG_MODEx
#define NET_DEBUG_MODE2x
#define NET_DEBUG_MODE3x
#endif

using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;

//public struct tagQueue
//{
//	public string 		data;
//	public DELEGATE_INT	fun;
//	public bool			popup;
//}

public class NetworkManager : MonoBehaviour {
	////////////////////
	
	public int failForce = 0;
	
	#region 네트워크 기본 멤버 변수.
	private static NetworkManager ins_ = null;
	private int nConnectState;
	private SSParser parser = new SSParser();
	private string url, urlbase;
	private WWW www;

	//2. 받은 데이타를 퀴에 쌓기.
	//private const int QUEUE_MAX 		= 9;
	//private tagQueue[] queue			= new tagQueue[QUEUE_MAX];
	//private int front, rear, curIdx = 0;
	private int debugSerial = 0;
	#endregion
	
	////////////////////
	#region 일반 멤버 변수.
	[HideInInspector]
	public string strCreateID,	strCreatePW,
	//@@@@ start 0091
	strWaitTime = "",
	//@@@@ end
	strGuestPWOriginal = "-1",
	strPhoneNumber 	= null,
	strPhoneNumberC = null,
	strPushID 		= null;
	private int pushKind = Protocol.PUSH_MODE_MSG;
	private string pushMsgTitle = "";
	private string pushMsgMsg = "";
	private string strDebug2 = "";
	#endregion
	
	#region 디버그용.
	private string strDebugMsg = "";
	#endregion
	
	#region 생성자, 싱글톤.
	private NetworkManager(){
		ins_ = this;
	}
	
	public static NetworkManager Ins{
		get{
			if(ins_ == null){
				GameObject _go = new GameObject ( "+NetworkManager" );
				ins_ = _go.AddComponent < NetworkManager > ();
				//_go.AddComponent < CashBuy > ();
				
				DontDestroyOnLoad ( _go );
			}
			return ins_;	
		}
	}
	#endregion
	
	void Awake(){
		#if NET_DEBUG_MODE
		//Debug.Log("MARKET:" + Protocol.MARKET + " BUYTYPE:" + Protocol.BUYTYPE + " VERSION:" + Protocol.VERSION + " PLATFORM:" + Protocol.PLATFORM);
		//Debug.Log("개발버젼에서는 세이브데이타 삭제함.");
		//Debug.Log("SERVER:" + Protocol.SERVER);
		#endif
		
		////////////////////////////////////////
		//initQueue();
		urlbase = Protocol.SERVER;//public const string SERVER 			=  "http://175.117.144.244:8882/Game4FarmVill5/" + MARKET_BRANCH + "/";	//public const string MARKET_BRANCH	= "goo";	
		nConnectState = Protocol.CONNECT_STATE_NON;
		
		//strCreateID = PlayerPrefs.GetString("DBB_ID","-1");		
		//strCreatePW = PlayerPrefs.GetString("DBB_PW","-1");
		
		strCreateID = SaveDataOnMobile.GetID ();
		strCreatePW = SaveDataOnMobile.GetPW ();
	}
	
	private void Start ()
	{
		DontDestroyOnLoad ( gameObject );
	}
	
	public static bool IsInsNull ()
	{		
		if ( ins_ == null )
			return true;
		else 
			return false;
	}
	 
	public static bool IsSuccess ( int _netCode )
	{
		if ( _netCode == Protocol.RESULT_SUCCESS )
			return true;
		else 
			return false;
	}
	
	public static bool IsConnectionFail ( int _netCode )
	{
		if ( _netCode == Protocol.CONNECT_STATE_FAIL )
			return true;
		else
			return false;
	}
	
	void readAndroidInfo()
	{
		if(strPhoneNumber == null || strPhoneNumber.Equals("")){
			//안드로이드 라이브러리 읽기.
			//CashBuy _cy = gameObject.GetComponent<CashBuy>();
			//strPhoneNumber 	= SSUtil.getCheckPhoneNum(_cy.getPhoneNumber());
			//strPhoneNumberC	= SSUtil.setEncode4(strPhoneNumber);
			strPhoneNumber 	= SSUtil.getCheckPhoneNum(CashBuy.Ins.getPhoneNumber());
			strPhoneNumberC	= SSUtil.setEncode4(strPhoneNumber);
			strPushID 		= CashBuy.Ins.getPushID();
		}		
	}
	
	//--------------------------------------------
	//[C -> S]
	// 1. Client -> Server 데이타 요청
	// 호출방법 : NetworkManager.Ins.sendCode
	// 멀티 호출이 가능함.
	//
	// _code		: 코드.
	// DELEGATE_INT	: 응답후 함수(delegate).
	// _bPopup		: 팝업을 띄울것인가?
	//--------------------------------------------
	public bool sendCode(int _code, VOID_FUN_INTINT _onResult )
	{
		
		//Ui_Debug.SetText ( "sendCode callBack ( "+ _callbackFun +" ) " );
		//#if NET_DEBUG_MODE
		//	Debug.Log("sendCode _code:" + _code);
		//#endif
		
		WWWForm _form = new WWWForm();
		nConnectState = Protocol.CONNECT_STATE_TRY;
		if(_bPopup)
		{
			//Debug.Log("Popup on");
			Ui_NetLoading.Ins.BringIn();
		}
		
		switch(_code)
		{	
		case Protocol.PTC_FRETURN:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_FRETURN");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_FRETURN;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("friendid", ServerData.sendCode_friendId );					//삭제할 친구아이디.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_YABAUCHANGE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_YABAUCHANGE");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_YABAUCHANGE;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("randserial", "" + GameData.serial_diceRefresh );				// 랜덤 씨리얼 여기서 호출하지 마세요. 콜하는 쪽에서 호출하세요.
			// SSUtil.getRandSerial()
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_YABAUREWARD:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_YABAUREWARD");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_YABAUREWARD;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_YABAU:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_YABAU");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_YABAU;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("mode", "" + ServerData.sendCode_yabauMode );	//일반돌리기		Protocol.MODE_YABAU_NORMAL
			//프리미엄		Protocol.MODE_YABAU_PREMINUM
			_form.AddField("randserial", "" + GameData.serial_dicePlay );				// 랜덤 씨리얼 여기서 호출하지 마세요. 콜하는 쪽에서 호출하세요.
			// SSUtil.getRandSerial()
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_TRADECHANGE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_TRADECHANGE");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_TRADECHANGE;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("tradeinfo", ServerData.sendCode_dealerChangeInfo );//기본세팅 : 0:0;1:1;2:2;3:3;4:4;5:5;6:6;
			//변경세팅 : 0:7;1:8;2:9;3:10;4:11;5:12;6:13;
			//번호:상인인덱스;
			//번호:상인인덱스;
			//....
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;

		case Protocol.PTC_RANKLIST:
			{
				#if NET_DEBUG_MODE
				Debug.Log("[C -> S] PTC_RANKLIST");
				#endif
				//1. make URL
				url = urlbase + Protocol.PTG_RANKLIST;

				//2. setting form
				_form.AddField("gameid", strCreateID);
				_form.AddField("password", strCreatePW);

				//3. sending
				#if NET_DEBUG_MODE
				Debug.Log(" _form:" + SSUtil.getString(_form.data));
				#endif
				StartCoroutine(Handle(new WWW(url, _form ), _onResult));
			}
			break;

		case Protocol.PTC_PETEXP:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_PETEXP");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_PETEXP;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_ANICOMPOSEINIT:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ANICOMPOSEINIT");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ANICOMPOSEINIT;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			//시간과 비용은 서버에서 계산한다.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_ANICOMPOSE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ANICOMPOSE");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ANICOMPOSE;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			
			_form.AddField("mode", "" + ServerData.sendCode_mode );
			//준비만족 > 무료 돌리기.	Protocol.MODE_ANI_COMPOSE_FULL
			//준비부족 > 확률 돌리기.	Protocol.MODE_ANI_COMPOSE_LACK_HAKROUL
			//준비부족 > 수정 돌리기.	Protocol.MODE_ANI_COMPOSE_LACK_CASHCOST
			_form.AddField("itemcode", ServerData.sendCode_itemCode );					//합성아이템코드.
			_form.AddField("listidxbase", ServerData.sendCode_listIdxBase );			// 1번째 (필수)합성베이스  listidx.
			_form.AddField("listidxs1", ServerData.sendCode_listIdxs1 );				// 2번째 (필수)합성 베이스와 같은 동물 listidx.
			_form.AddField("listidxs2", ServerData.sendCode_listIdxs2 );				// 3번째 (옵션) 없으면 -1.
			_form.AddField("listidxs3", ServerData.sendCode_listIdxs3 );				// 4번쨰 (옵션) .
			_form.AddField("listidxs4", ServerData.sendCode_listIdxs4 );				// 5번째 (옵션) .
			_form.AddField("randserial", ServerData.sendCode_randSerial );				//(중복구매 방지를 위해서)랜덤 씨리얼 여기서 호출하지 마세요. 콜하는 쪽에서 호출하세요.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		//@@@@ start 0095
		case Protocol.PTC_ANIPROMOTE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ANIPROMOTE");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ANIPROMOTE;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("itemcode", ServerData.PromoteItemCode );		//승급아이템코드.

			for(int i = 0; i < ServerData.PrmoteSlotAnimalslistidx.Length; ++i)
			{
				_form.AddField(string.Format("listidxs{0}", i+1), ServerData.PrmoteSlotAnimalslistidx[i].ToString());
			}
//			_form.AddField("listidxs1", "21" );			// 1번째 (필수) 동물 listidx.
//			_form.AddField("listidxs2", "22" );			// 동일등급 동물, 풀강,  없으면 -1.
//			_form.AddField("listidxs3", "-1" );			//
//			_form.AddField("listidxs4", "-1" );			//
//			_form.AddField("listidxs5", "-1" );			//
			_form.AddField("randserial", ServerData.sendCode_randSerial );	//(중복구매 방지를 위해서)랜덤 씨리얼 여기서 호출하지 마세요. 콜하는 쪽에서 호출하세요.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
		break;
		//@@@@ end
		case Protocol.PTC_ANIHOSLIST:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ANIHOSLIST");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ANIHOSLIST;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
			
		}
			break;
			
		case Protocol.PTC_ANIUPGRADE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ANIUPGRADE");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ANIUPGRADE;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("listidxani", ServerData.sendCode_listidxani.ToString());			//동물리스트스 번호(listidxani) 아이템 코드 아님.
			_form.AddField("listset", ServerData.sendCode_StemCelllistset);				//줄기세포군 (순번:줄기세포listidx;)반복		1:31;2:32;3:33;4:34;5:35;6:36;
			_form.AddField("randserial", GameData.serial_aniUpgrade );		//여기서 호출하면 안되고 외부에서 만들어서 보내야함.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
			
			//@@@@ start 0080
		case Protocol.PTC_APARTITEMCODE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_APARTITEMCODE");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_APARTITEMCODE;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("mode", "" + ServerData.Decompound_Mode);	//동물분해모드 		Protocol.MODE_APART_ANIMAL
																		//보물분해모드 		Protocol.MODE_APART_TREASURE
			_form.AddField("listset", ServerData.Decompound_listset);							//(순번:동물 or 보물 listidx;)
																		//1개 분해	: 1:25;
																		//10개 분해 : 1:34;2:26;3:27;4:28;5:29;6:30;7:31;8:32;9:33;10:34;
			_form.AddField("randserial", GameData.serial_Decompound );						//여기서 호출하면 안되고 외부에서 만들어서 보내야함.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
			//@@@@ end

		case Protocol.PTC_UBBOXOPENOPEN:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_UBBOXOPENOPEN");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_UBBOXOPENOPEN;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("boxslotidx", ServerData.send_boxslotidx);		//박스 슬롯 번호. 1 ~ 4번까지만 존재함.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;

		case Protocol.PTC_UBBOXOPENCASH:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_UBBOXOPENCASH");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_UBBOXOPENCASH;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("boxslotidx", ServerData.send_boxslotidx);		//현재 작동중인 박스 슬롯 번호. 1 ~ 4번까지만 존재함.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;

		case Protocol.PTC_UBBOXOPENCASH2:
			{
				#if NET_DEBUG_MODE
				Debug.Log("[C -> S] PTC_UBBOXOPENCASH2");
				#endif
				//1. make URL
				url = urlbase + Protocol.PTG_UBBOXOPENCASH2;

				//2. setting form
				_form.AddField("gameid", strCreateID);
				_form.AddField("password", strCreatePW);
				_form.AddField("boxslotidx", ServerData.send_boxslotidx);		//현재 미작동중인 박스 슬롯 번호. 1 ~ 4번까지만 존재함.

				//3. sending
				#if NET_DEBUG_MODE
				Debug.Log(" _form:" + SSUtil.getString(_form.data));
				#endif
				StartCoroutine(Handle(new WWW(url, _form ), _onResult));
			}
			break;

		case Protocol.PTC_UBBOXOPENGETITEM:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_UBBOXOPENGETITEM");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_UBBOXOPENGETITEM;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("boxslotidx", ServerData.send_boxslotidx);		//현재 작동중인 박스 슬롯 번호. 1 ~ 4번까지만 존재함.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;

		case Protocol.PTC_UBSEARCH:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_UBSEARCH");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_UBSEARCH;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("listset", ServerData.sendCode_UserbattleAnimallistset);	//목장배틀의 동물처럼 리스트정보.
			//선택한 동물(순번:동물listidx;)반복.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;

		case Protocol.PTC_UBRESULT:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_UBRESULT");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_UBRESULT;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("userbattleidx2", ServerData.send_userbattleidx2);				//시작할때 보내준 userbattleidx2를 그대로 보내주세요. (반드시 시작후에 완료가 와야지 템을 지급함)
			_form.AddField("result", ServerData.sendCode_userbattleResult);	//결과.
			//승 		BATTLE_RESULT_WIN
			//패		BATTLE_RESULT_LOSE
			//무승부	BATTLE_RESULT_DRAW
			_form.AddField("playtime", ServerData.sendCode_userbattleplaytime);						//플레이 타임.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;

		case Protocol.PTC_WHEEL:
			{
				#if NET_DEBUG_MODE
				Debug.Log("[C -> S] PTC_WHEEL");
				#endif
				//1. make URL
				url = urlbase + Protocol.PTG_WHEEL;

				//2. setting form
				_form.AddField("gameid", strCreateID);
				_form.AddField("password", strCreatePW);
				_form.AddField("mode", "" + ServerData.MODE_WHEEL);
				//															MODE_WHEEL_NORMAL		//일일룰렛(20).
				//															MODE_WHEEL_PREMINUM		//황금룰렛(21).
				//															MODE_WHEEL_PREMINUMFREE	//황금무료(22).
				_form.AddField("usedcashcost", ServerData.usedCashCost);
				//															//일일룰렛(20)	-> 0캐쉬.
				//															//황금룰렛(21)	-> 처음에는 300, 연속열고 있으면 270.
				//																			   다시 창을 열면 300부터 다시 시작함.
				//															//황금무료(22)	-> 0캐쉬.
				//_form.AddField("randserial", "9999" );// 랜덤 씨리얼 여기서 호출하지 마세요. 콜하는 쪽에서 호출하세요.
				_form.AddField("randserial", GameData.serial_wheel );// 랜덤 씨리얼 여기서 호출하지 마세요. 콜하는 쪽에서 호출하세요.

				//3. sending
				#if NET_DEBUG_MODE
				Debug.Log(" _form:" + SSUtil.getString(_form.data));
				#endif
				StartCoroutine(Handle(new WWW(url, _form ), _onResult));
			}
			break;

		case Protocol.PTC_ZCPCHANCE:
			{
				#if NET_DEBUG_MODE
				Debug.Log("[C -> S] PTC_ZCPCHANCE");
				#endif
				//1. make URL
				url = urlbase + Protocol.PTG_ZCPCHANCE;

				//2. setting form
				_form.AddField("gameid", strCreateID);
				_form.AddField("password", strCreatePW);
				_form.AddField("mode", "" + ServerData.MODE_WHEEL);
				//															MODE_ZCPCHANCE_FREE		//무료모드(1).
				//															MODE_ZCPCHANCE_CASH		//유료모드(2).
				_form.AddField("usedcashcost", ServerData.usedCashCost);
				//															//무료모드(1)	-> 0캐쉬.
				//															//유료모드(2).	-> 처음에는 200, 연속열고 있으면 170.
				//																			   다시 창을 열면 200부터 다시 시작함.
				_form.AddField("randserial", GameData.serial_zcpchance );// 랜덤 씨리얼 여기서 호출하지 마세요. 콜하는 쪽에서 호출하세요.

				//3. sending
				#if NET_DEBUG_MODE
				Debug.Log(" _form:" + SSUtil.getString(_form.data));
				#endif
				StartCoroutine(Handle(new WWW(url, _form ), _onResult));
			}
			break;

		case Protocol.PTC_ZCPBUY:
			{
				#if NET_DEBUG_MODE
				Debug.Log("[C -> S] PTC_ZCPBUY");
				#endif
				//1. make URL
				url = urlbase + Protocol.PTG_ZCPBUY;

				//2. setting form
				_form.AddField("gameid", strCreateID);
				_form.AddField("password", strCreatePW);
				_form.AddField("idx", ServerData.zzayoMarketItemIndex.ToString());								//로그인할때 짜요장터 고유 idx번호.
				_form.AddField("randserial", GameData.serial_zcpbuy );	// 랜덤 씨리얼 여기서 호출하지 마세요. 콜하는 쪽에서 호출하세요.

				//3. sending
				#if NET_DEBUG_MODE
				Debug.Log(" _form:" + SSUtil.getString(_form.data));
				#endif
				StartCoroutine(Handle(new WWW(url, _form ), _onResult));
			}
			break;

		case Protocol.PTC_RKRANK:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_RKRANK");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_RKRANK;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;

		case Protocol.PTC_ANIBATTLESTART:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ANIBATTLESTART");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ANIBATTLESTART;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("farmidx", ServerData.sendCode_farmidx.ToString());				//목장번호 (목장아이템코드)
			_form.AddField("listset", ServerData.sendCode_animallistset);				//선택한 동물(순번:동물listidx;)반복		1:2;2:39;3:38;

			//Debug.Log (ServerData.sendCode_animallistset);

			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;

		case Protocol.PTC_ANIBATTLEPLAYCNTBUY:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ANIBATTLEPLAYCNTBUY");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ANIBATTLEPLAYCNTBUY;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("farmidx", ServerData.sendCode_farmidx.ToString());			//목장번호 (목장아이템코드)
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;

		case Protocol.PTC_ANIBATTLERESULT:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ANIBATTLERESULT");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ANIBATTLERESULT;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("battleidx2", ServerData.sendCode_battleidx2);//시작할때 보내준 battleidx2를 그대로 보내주세요. (반드시 시작후에 완료가 와야지 템을 지급함)
			_form.AddField("result", ServerData.sendCode_battleResult);	//결과.
			//승 		BATTLE_RESULT_WIN
			//패		BATTLE_RESULT_LOSE
			//무승부	BATTLE_RESULT_DRAW
			_form.AddField("playtime", ServerData.sendCode_BattlePlayerTime.ToString());					//플레이 타임.
			_form.AddField("star", ServerData.sendCode_BattleStar.ToString());							//별의 수량(iteminfo에 일정 시간안에 깨면 별의 수량이 지급 기준이 있음)
			//start3	안이면 별3개
			//start2	안이면 별2개
			//그외는 		   별1개
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;

		case Protocol.PTC_KFHELPLIST:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_KFHELPLIST");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_KFHELPLIST;
			
			//2. setting form
			// xxxx, xxxx3 <- xxxx2가 요청했을때.
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_KFRESET:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_KFRESET");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_KFRESET;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("kakaofriendlist", KakaoManager.Instance.stListKakaoFriends.checkAllKakaoFriend () );
			
			Debug.Log ( KakaoManager.Instance.stListKakaoFriends.checkAllKakaoFriend () );
			
			//카톡친구 전체친구 다시 갱신하기 ~~~ 게임친구 비교(talkId)
			//카톡친구 	: a, b, c, d(전체)
			//string _str = KakaoManager.Instance.stListKakaoFriends.checkAllKakaoFriend();
			//if(!_str.equals("")){
			//	NetworkManager.Ins.sendCode(PTC_KFRESET);
			//}
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_ROULACC:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ROULACC");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ROULACC;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("randserial", GameData.serial_acc_bbopgi );
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_ANIRESTORE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ANIRESTORE");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ANIRESTORE;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_KFHELP:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_KFHELP");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_KFHELP;
			
			//2. setting form
			// 동물을 어떤 listidx(fieldidx:아님을 유의) 떻방식으로 죽었는지
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("listidx", "" + ServerData.sendCode_listIdx);	//유저 동물번호.(listidx).
			_form.AddField("friendid", ServerData.sendCode_friendId );		//친구 아이디.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_KFINVITE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_KFINVITE");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_KFINVITE;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("kakaouuid", ServerData.sendCode_kakaouuId );
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_KFADD:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_KFADD");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_KFADD;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);	
			_form.AddField("password", strCreatePW);
			_form.AddField("kakaofriendlist", ServerData.sendCode_refreshFriendsA );
			//Debug.Log(" fw:" + ServerData.sendCode_refreshFriendsA);
			
			ServerData.sendCode_refreshFriendsA = null;
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_KCHECKNN:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_KCHECKNN");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_KCHECKNN;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);								//유저 아이디.
			_form.AddField("password", strCreatePW);							//유저 패스워드.
			_form.AddField("mode", ServerData.nickNameMode);	
			_form.AddField("kakaonickname", ServerData.sendCode_kakaonickname );//유저가 입력한 닉네임 검사.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
			
		}
			break;
		case Protocol.PTC_NEWSTART:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_NEWSTART");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_NEWSTART;
			
			//2. setting form
			_form.AddField("gameid", strCreateID);			//유저 아이디.
			_form.AddField("password", strCreatePW);		//유저 패스워드.
			tagKakaoLocalUser _my = KakaoManager.Instance.stKakaoLocalUser;	
			_form.AddField("kakaouserid", 	_my.userId);	//userid				"91386767984635713"
			
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
			
		}
			break;
		case Protocol.PTC_SYSINQUIRE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_SYSINQUIRE");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_SYSINQUIRE;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("message", ServerData.sendCode_asMsg );					
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_TUTOSTEP:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_TUTOSTEP");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_TUTOSTEP;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("tutostep", "" + ServerData.sendCode_tutoStep );				//튜토리얼 번호.(아이템 테이블 : 아이템코드 이름참조..)
			_form.AddField("ispass", "" +  Protocol.TUTOSTEP_ISPASS_MARK );
			// Protocol.TUTOSTEP_ISPASS_MARK );
			//상태값.
			// 	패스					Protocol.TUTOSTEP_ISPASS_PASS
			//	사전보상 or 완료보상	Protocol.TUTOSTEP_ISPASS_MARK
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_CERTNO:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_CERTNO");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_CERTNO;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("certno", ServerData.sendCode_coupon );			//쿠폰번호
			//2502 6F89 6F27 4D9A, 	CF6EF2981B0D4644, 	ED2557542CEF41E7, 	E0BE2606AC9D455E, 	E264F9A3B68740C2
			//21D9BC9C84E84161, 	90FFDC98B2DB47A8, 	A54F4790942243AB, 	6C24FDE623964BBF, 	6CEC84E8CE134081
			//05AD265082E2428D, 	5EC796620DCE4E2B, 	2DE567B498E849B1, 	433CF7722BFC4DDF, 	54A77AB8DD3D4F47
			//893EFE31693D4309, 	CE1953746AFB43D5, 	F254629BD53744D2, 	8950744B208E41A3
			//1A13 0B99 B6DB 41D8
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_AGREEMENT:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_AGREEMENT");
			#endif
			
			//1. make URL
			url = urlbase + Protocol.PTG_AGREEMENT;
			
			//2. setting form
			_form.AddField("lang", "" + Protocol.AGREEMENT_KO);		//Protocol.AGREEMENT_KO		한글 약관동의.
			//Protocol.AGREEMENT_EN		영문 약관동의.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form), _onResult));
		}
			break;
		case Protocol.PTC_PETROLL:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_PETROLL");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_PETROLL;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("paramint", "" + -1);					//-1만 전송해준면된다.
			_form.AddField("randserial", GameData.serial_pet_bbopgi );
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;	
		case Protocol.PTC_PETUPGRADE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_PETUPGRADE");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_PETUPGRADE;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("paramint", "" + ServerData.sendCode_petValue );					//listidx를 보내준다.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_PETWEAR:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_PETWEAR");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_PETWEAR;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("paramint", "" + ServerData.sendCode_petValue );					//장착할 listidx를 보내준다.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_PETTODAY:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_PETTODAY");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_PETTODAY;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("paramint", "" + ServerData.sendCode_petValue );// DownLoadData.MyPetHolder.todaySellPetCode );				//오늘만 구매할 펫코드값.
			_form.AddField("randserial", GameData.serial_pet_today );
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;		
		case Protocol.PTC_SCHOOLUSERTOP:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_SCHOOLUSERTOP");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_SCHOOLUSERTOP;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			Ui_Debug.SetText ( "send ok" );
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_SCHOOLTOP:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_SCHOOLTOP");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_SCHOOLTOP;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_SCHOOLJOIN:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_SCHOOLJOIN");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_SCHOOLJOIN;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("schoolidx", "" + ServerData.sendCode_schoolIdx );					//학교번호.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_SCHOOLSEARCH:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_SCHOOLSEARCH");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_SCHOOLSEARCH;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("schoolkind", "" + ServerData.sendCode_schoolKind );
			//종류(초등, 중학, 고등, 대학).				
			//Protocol.SCHOOLKIND_ELEMENTARY_SCHOOL 	초등(1).
			//Protocol.SCHOOLKIND_JUNIOR_SCHOOL 		중등(2).
			//Protocol.SCHOOLKIND_HIGH_SCHOOL 			고등(3).
			//Protocol.SCHOOLKIND_COLLEGE_SCHOOL 		대학(4).
			_form.AddField("schoolname", ServerData.sendCode_schoolName );					//검색할 학교이름.
			//서울 	> '서울'로 시작된 서울1, 서울2, 서울3... 10검색.
			//공백 	> 임의의 10개를 검색.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_TRADECONTINUE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_TRADECONTINUE");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_TRADECONTINUE;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_TRADECASH:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_TRADECASH");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_TRADECASH;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_FBWRITE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_FBWRITE");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_FBWRITE;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("kind", "" + ServerData.sendCode_UserBoard_Kind );//게시판종류.
			//일반게시판 		Protocol.USERBOARD_KIND_NORMAL
			//친추게시판 		Protocol.USERBOARD_KIND_FRIEND
			//대항게시판 		Protocol.USERBOARD_KIND_GROUP
			_form.AddField("message", ServerData.sendCode_UserBoard_Msg );	
			
			/////////////////////////////
			//	[샘플]
			/////////////////////////////
			//일반게시판.
			//_form.AddField("gameid", "xxxx2");						
			//_form.AddField("password", "049000s1i0n7t8445289");		
			//_form.AddField("kind", "" + Protocol.USERBOARD_KIND_NORMAL);
			//_form.AddField("message", "낙서장입니다..");	
			//
			//친추게시판.
			//_form.AddField("gameid", "xxxx2");						
			//_form.AddField("password", "049000s1i0n7t8445289");		
			//_form.AddField("kind", "" + Protocol.USERBOARD_KIND_FRIEND);
			//_form.AddField("message", "친추해요.");	
			//
			//대항게시판.
			//_form.AddField("gameid", "xxxx2");						
			//_form.AddField("password", "049000s1i0n7t8445289");		
			//_form.AddField("kind", "" + Protocol.USERBOARD_KIND_GROUP);
			//_form.AddField("message", "서울대생 모이세요.");	
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;	
		case Protocol.PTC_FBREAD:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_FBREAD");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_FBREAD;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("kind", "" + ServerData.sendCode_UserBoard_Kind );//게시판종류.
			//일반게시판 		Protocol.USERBOARD_KIND_NORMAL
			//친추게시판 		Protocol.USERBOARD_KIND_FRIEND
			//대항게시판 		Protocol.USERBOARD_KIND_GROUP
			_form.AddField("page", "" + ServerData.sendCode_UserBoard_page );	
			
			/////////////////////////////
			//	[샘플]
			/////////////////////////////
			//일반게시판.
			//_form.AddField("gameid", "xxxx2");						
			//_form.AddField("password", "049000s1i0n7t8445289");		
			//_form.AddField("kind", "" + Protocol.USERBOARD_KIND_NORMAL);
			//_form.AddField("page", "" + 1);	
			//
			//친추게시판.
			//_form.AddField("gameid", "xxxx2");						
			//_form.AddField("password", "049000s1i0n7t8445289");		
			//_form.AddField("kind", "" + Protocol.USERBOARD_KIND_FRIEND);
			//_form.AddField("page", "" + 1);	
			//
			//대항게시판.
			//_form.AddField("gameid", "xxxx2");						
			//_form.AddField("password", "049000s1i0n7t8445289");		
			//_form.AddField("kind", "" + Protocol.USERBOARD_KIND_GROUP);
			//_form.AddField("page", "" + 1);	
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;	
		case Protocol.PTC_FVISIT:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_FVISIT");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_FVISIT;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("friendid", ServerData.sendCode_friendId );					//방문할 친구아이디.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_CHANGEINFO:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_CHANGEINFO");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_CHANGEINFO;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("mode", "" + ServerData.sendCode_mode ); // Protocol.USERMASTER_CHANGEINOF_MODE_BOARDWRITE);		//모드.
			//게시판글		Protocol.USERMASTER_CHANGEINOF_MODE_BOARDWRITE
			//사진변경		Protocol.USERMASTER_CHANGEINOF_MODE_PICTURE
			//닉네임변경	Protocol.USERMASTER_CHANGEINOF_MODE_NICKNAME
			//USERMASTER_CHANGEINOF_MODE_KKOMSGBLOCKED
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_USERPARAM:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_USERPARAM");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_USERPARAM;
			
			//2. setting form
			// 클라이언트에 필요한 정보를 저장.
			// 필드 0번 자리에 1번를 세팅.
			// 필드 1          2             세팅.
			// ....
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("mode", "" + Protocol.MODE_SAVE);		//모드.
			//저장모드		Protocol.MODE_SAVE
			//읽기모드		Protocol.MODE_READ.
			//_form.AddField("listset", RivalQuestManager.Ins.GetProgressInfo () );	//
			_form.AddField("listset", ServerData.sendCode_UserParam );	//
			// (번호:값;....)
			// 구분자1[:]	어떤 번호에 어떤 값을 매칭 되었는지 콜론(:)으로 구분.
			//				번호:값
			// 구분자2[;]	구분 세미콜론(;).
			//				파람0;파람2;
			
			//Debug.Log ( ServerData.sendCode_UserParam );
			
			//읽기예제.
			//_form.AddField("gameid", "xxxx2");						//유저 아이디.
			//_form.AddField("password", "049000s1i0n7t8445289");		//유저 패스워드.
			//_form.AddField("mode", "" + Protocol.MODE_READ);			//모드.
			//_form.AddField("listset", "");							//
			
			
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_COMPETITION:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_COMPETITION");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_COMPETITION;
			
			//2. setting form
			// 튜토리얼 번호를 주면 해당 번호에 해당하는 아이템을 지금해주서 보내줌(계정당 1회만 사용 됨).
			// 코인, 캐쉬, 건초, 하트만 지급함. 아이템은 지금 안함.
			// 예)아이템 테이블에 901000
			//	  > 1. 우유탱크를 업그레이드 해보세요.
			//    >     90100 > 확인 > 50코인지급.
			//	  >     유저가 우유탱크 업그레이드 진행....
			//    > 2. 완료했으면 클라이언트에서 보상지급.
			//    >     90101 > 확인 > 50코인지급.
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("comreward", "" + ServerData.sendCode_questCode );					//튜토리얼 번호.(아이템 테이블 : 아이템코드.)		
			_form.AddField("paraminfo", ServerData.sendCode_UserParam );// RivalQuestManager.Ins.GetProgressInfo () );	//0을 클리어라고 할때 0, 1번을 클리어하라.
			_form.AddField("ispass", ServerData.sendCode_questIsPass );	// 1:패스, -1:보상.
			
			//_form.AddField("part1", "" + Protocol.BKT_WOLF_KILL_CNT);							//예)누적늑대잡이, 누적판매금액 초기화.
			//_form.AddField("part2", "" + Protocol.BKT_SALE_COIN);								
			//_form.AddField("part3", "-1");					
			//_form.AddField("part4", "-1");	
			
			//Protocol.BKT_WOLF_KILL_CNT					= 1,	-- 누적늑대잡이(1).     
			//Protocol.BKT_SALE_COIN						= 11,	-- 누적판매금액(11).    
			//Protocol.BKT_HEART 							= 12,	-- 누적하트획득(12).    
			//Protocol.BKT_FEED 							= 13,	-- 누적건초획득(13).    
			//Protocol.BKT_SUCCESS_CNT 						= 14,	-- 최고거래성공횟수(14).
			//Protocol.BKT_BEST_FRESH 						= 15,	-- 최고신선도(15).      
			//Protocol.BKT_BEST_BARREL 						= 16,	-- 최고배럴(16).        
			//Protocol.BKT_BEST 							= 17,	-- 최고판매금액(17).    
			//Protocol.BKT_BARREL							= 18,	-- 누적배럴(18).
			//Protocol.BKT_CROSS_NORMAL 					= 21,	-- 누적일반교배(21).    
			//Protocol.BKT_CROSS_PREMIUM 					= 22,	-- 누적프리미엄교배(22).
			//				
			//예) 단순초기화(아이템 코드 테이블에 코인 지급 코드임).
			//_form.AddField("comreward", "" + -1);
			//_form.AddField("part1", "" + Protocol.BKT_WOLF_KILL_CNT);
			//_form.AddField("part2", "" + Protocol.BKT_SALE_COIN);					
			//_form.AddField("part3", "-1");					
			//_form.AddField("part4", "-1");	
			//
			//예) 코인(아이템 코드 테이블에 코인 지급 코드임).
			//_form.AddField("comreward", "" + 90100);
			//_form.AddField("part1", "" + Protocol.BKT_WOLF_KILL_CNT);
			//_form.AddField("part2", "" + Protocol.BKT_SALE_COIN);					
			//_form.AddField("part3", "-1");					
			//_form.AddField("part4", "-1");	
			//
			//예) 캐쉬(아이템 코드 테이블에 코인 지급 코드임).
			//_form.AddField("comreward", "" + 90101);
			//_form.AddField("part1", "" + Protocol.BKT_WOLF_KILL_CNT);
			//_form.AddField("part2", "" + Protocol.BKT_SALE_COIN);					
			//_form.AddField("part3", "-1");					
			//_form.AddField("part4", "-1");	
			//
			//예) 하트(아이템 코드 테이블에 코인 지급 코드임).
			//_form.AddField("comreward", "" + 90102);
			//_form.AddField("part1", "" + Protocol.BKT_WOLF_KILL_CNT);
			//_form.AddField("part2", "" + Protocol.BKT_SALE_COIN);					
			//_form.AddField("part3", "-1");					
			//_form.AddField("part4", "-1");	
			//
			//예) 건초(아이템 코드 테이블에 코인 지급 코드임).
			//_form.AddField("comreward", "" + 90103);
			//_form.AddField("part1", "" + Protocol.BKT_WOLF_KILL_CNT);
			//_form.AddField("part2", "" + Protocol.BKT_SALE_COIN);					
			//_form.AddField("part3", "-1");					
			//_form.AddField("part4", "-1");	
			//
			//예) 우정포인트(아이템 코드 테이블에 코인 지급 코드임).
			//_form.AddField("comreward", "" + 90104);
			//_form.AddField("part1", "" + Protocol.BKT_WOLF_KILL_CNT);
			//_form.AddField("part2", "" + Protocol.BKT_SALE_COIN);					
			//_form.AddField("part3", "-1");					
			//_form.AddField("part4", "-1");		
			//
			//예) 아이템코드(아이템 코드 테이블에 코인 지급 코드임).
			//_form.AddField("comreward", "" + 90105);
			//_form.AddField("part1", "" + Protocol.BKT_WOLF_KILL_CNT);
			//_form.AddField("part2", "" + Protocol.BKT_SALE_COIN);					
			//_form.AddField("part3", "-1");					
			//_form.AddField("part4", "-1");	
			
			
			
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_FWSELL:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_FWSELL");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_FWSELL;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("itemcode", "" + ServerData.sendCode_itemCode );					//목장아이템코드.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_FWINCOME:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_FWINCOME");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_FWINCOME;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("itemcode", "" + ServerData.sendCode_itemCode );					//목장아이템코드.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_FWBUY:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_FWBUY");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_FWBUY;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("itemcode", "" + ServerData.sendCode_itemCode );					//목장아이템코드.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_FMYFRIEND:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_FMYFRIEND");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_FMYFRIEND;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;	
		case Protocol.PTC_FAPPROVE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_FAPPROVE");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_FAPPROVE;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("friendid", ServerData.sendCode_friendId );
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_FHEART:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_FHEART");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_FHEART;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("friendid", ServerData.sendCode_friendId );					//삭제할 친구아이디.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;

		case Protocol.PTC_FPROUD:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_FPROUD");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_FPROUD;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("friendid", ServerData.sendCode_friendId );					//삭제할 친구아이디.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;

		case Protocol.PTC_FPOINT:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_FPOINT");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_FPOINT;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_TUTORIAL:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_TUTORIAL");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_TUTORIAL;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );		
			_form.AddField("mode", "" + ServerData.sendCode_tutoMode);	//모드.
			//Protocol.MODE_TUTORIAL_OK
			//Protocol.MODE_TUTORIAL_RETRY
			//Protocol.MODE_TUTORIAL_SKIP
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_CASHBUY:
		{			
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_CASHBUY 통신사 과금후");
			#endif
			
			//1. make URL
			url = urlbase + Protocol.PTG_CASHBUY;
			
			//2. setting form
			//암호화를 2중.3중으로 한다.
			int _mode 			= ServerData.sendCode_cashBuyMode;
			string _gameid 		= strCreateID;
			string _password 	= strCreatePW;
			string _giftid 		= ServerData.sendCode_cashBuyGiftId;
			int _itemcode		= ServerData.sendCode_cashBuyItemCode;		//5000코드, 20캐쉬,	2000원.				
			int _cashcost 		= ServerData.sendCode_cashBuyBuyAmount;
			int _cash 			= ServerData.sendCode_cashBuyCashCost;
			
			if(_mode == Protocol.CASH_MODE_BUYMODE){
				_form.AddField("mode", "" + Protocol.CASH_MODE_BUYMODE);
				_form.AddField("giftid", "");
			}else{			
				_form.AddField("mode", "" + Protocol.CASH_MODE_GIFTMODE);
				_form.AddField("giftid", _giftid);
			}			
			
			if ( GameData.guestPlay ) {
				_form.AddField("kakaogameid",  	"");
			}
			else {
				tagKakaoLocalUser _my = KakaoManager.Instance.stKakaoLocalUser;				
				_form.AddField("kakaogameid",  	_my.id);
			}
			
			_form.AddField("gameid", _gameid);
			_form.AddField("password", _password);
			
			//CashBuy _cy = gameObject.GetComponent<CashBuy>();
			CashBuy.Ins.getItemBuyMessage();
			
			if(Protocol.MARKET == Protocol.IPHONE){
				_form.AddField("ikind", CashBuy.strIPhoneItemBuyEnvironment);
				_form.AddField("acode", "");
				_form.AddField("idata", CashBuy.strIPhoneItemBuyReceipt);
				_form.AddField("idata2", "");
			}else if(Protocol.MARKET == Protocol.GOOGLE){
				_form.AddField("ikind", "googlekw");
				_form.AddField("acode", CashBuy.strBuyOrderId);
				_form.AddField("idata", "");
				_form.AddField("idata2", CashBuy.strBuyMessage);
			}else if(Protocol.MARKET == Protocol.SKT){
				//SKT
				_form.AddField("ikind", "skt");		
				_form.AddField("acode", CashBuy.strBuyOrderId);
				_form.AddField("idata", CashBuy.strBuyMessage);
				_form.AddField("idata2", "");
			}else if(Protocol.MARKET == Protocol.NHN){
				_form.AddField("ikind", CashBuy.striKind);
				_form.AddField("acode", CashBuy.strBuyOrderId);
				_form.AddField("idata", CashBuy.strBuyMessageEnc);
				_form.AddField("idata2", CashBuy.strBuyMessage);
			}else{
				_form.AddField("acode", "xxxx");	
			}
			
			_form.AddField("ucode", SSUtil.setCashEncode(_gameid, _cash, _cashcost));	//암호화.			
			_form.AddField("market", "" + Protocol.MARKET);								//판매회사.
			_form.AddField("itemcode", "" + _itemcode);			
			_form.AddField("cash", SSUtil.setEncode4("" + _cash));						//캐쉬와 결재액을 암호화 함다.
			_form.AddField("cashcost", SSUtil.setEncode4("" + _cashcost));				
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));	
		}
			break;
		case Protocol.PTC_ROULBUY:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ROULBUY");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ROULBUY;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );	
			_form.AddField("friendid", ServerData.sendCode_roul_friendId );	
			_form.AddField("randserial", "" + ServerData.sendCode_roul_randSerialA );				//(중복구매 방지를 위해서)랜덤 씨리얼 여기서 호출하지 마세요. 콜하는 쪽에서 호출하세요.
			_form.AddField("mode", "" + ServerData.sendCode_roulBuyMode );
																									//1번 버튼  	MODE_ROULETTE_GRADE1				= 1,	// 일반뽑기.
																									//2번 버튼 	MODE_ROULETTE_GRADE2				= 2,	// 루비뽑기.
																									//3번 버튼 	MODE_ROULETTE_GRADE4				= 4,	// 루비뽑기 10 + 1.
																									
			
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;

		case Protocol.PTC_TREASUREBUY:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_TREASUREBUY");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_TREASUREBUY;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("randserial", ServerData.sendCode_Tsroul_randSerialA );	//(중복구매 방지를 위해서)랜덤 씨리얼 여기서 호출하지 마세요. 콜하는 쪽에서 호출하세요.
			_form.AddField("mode", ServerData.sendCode_TsroulBuyMode );
			//1번 버튼  MODE_TREASURE_GRADE1				= 1,	// 일반뽑기.
			//2번 버튼 	MODE_TREASURE_GRADE2				= 2,	// 루비뽑기.
			//3번 버튼 	MODE_TREASURE_GRADE4				= 4,	// 루비뽑기 10 + 1.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;

		case Protocol.PTC_TREASUREWEAR:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_TREASUREWEAR");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_TREASUREWEAR;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("listset", ServerData.TreasureSlotlist );
			/////////////////////////////////////////////////////////////////
			// listset
			// - 1번부터 5번까지만 순서대로 들어간다. 나머지 번호는 무시합니다.
			// - 순번:보물리스트번호;....
			//
			//예) 1:72;2:73;3:74;4:-1;5:-1;
			//1번 72번 리스트 인덱스의 보물.
			//2번 73번 리스트 인덱스의 보물.
			//3번 74번 리스트 인덱스의 보물.
			//4번 -1 빈곳.
			//5번 -1 빈곳.
			/////////////////////////////////////////////////////////////////
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;

		case Protocol.PTC_TREASUREUPGRADE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_TREASUREUPGRADE");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_TREASUREUPGRADE;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("mode", ServerData.sendCode_TsReinforceMode );	//MODE_TSUPGRADE_NORMAL			    -> 일반강화.
																			//MODE_TSUPGRADE_PREMINUM			-> 캐쉬강화.
			_form.AddField("listidx", ServerData.TreasureUpgradeSelectedItem );
			_form.AddField("randserial", ServerData.sendCode_TsReinforce_randSerialA );	//(중복구매 방지를 위해서)랜덤 씨리얼 여기서 호출하지 마세요. 콜하는 쪽에서 호출하세요.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;

		case Protocol.PTC_ANIURGENCY:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ANIURGENCY");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ANIURGENCY;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );			
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_PACKBUY:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_PACKBUY");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_PACKBUY;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );							//유저 패스.
			_form.AddField("idx", "" + ServerData.sendCode_packIdx );							//패키지 인덱스(listidx가 아님).
			_form.AddField("randserial", "" + ServerData.sendCode_randSerial );				//(중복구매 방지를 위해서)랜덤 씨리얼 여기서 호출하지 마세요. 콜하는 쪽에서 호출하세요.
			// SSUtil.getRandSerial()
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;	
		case Protocol.PTC_SAVE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_SAVE");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_SAVE;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );							//유저 패스.
			_form.AddField("crypt", "2");
			_form.AddField("userinfo", SSUtil.setEncode32( ServerData.parser_userInfoA ));			//유저정보.
			_form.AddField("aniitem", ServerData.parser_aniitem );				//동물정보(창고, 필드) 병원(제외).
			_form.AddField("cusitem", SSUtil.setEncode32( ServerData.parser_cusItemA ));				//소모템 사용정보.			
			_form.AddField("paraminfo", SSUtil.setEncode32( RivalQuestManager.Ins.GetProgressInfoA () ));	//0을 클리어라고 할때 0, 1번을 클리어하라.
			
			/*
			Debug.Log("strCreateID:" + strCreateID);
			Debug.Log("strCreatePW:" + strCreatePW);
			Debug.Log("parser_userInfo:" + ServerData.parser_userInfo);
			Debug.Log("parser_aniitem:" + ServerData.parser_aniitem);
			Debug.Log("parser_cusItem:" + ServerData.parser_cusItem);
			*/
			
			
			//userinfo=gameyear;gamemonth;frametime;fevergauge;bottlelittle;bottlefresh;tanklittle;tankfresh;feeduse;
			//         0:2013;  1:3;      2:12;     4:4;       10:11;       11:101;     12:21;     13:201;   30:16;
			//
			//			0 			Protocol.SAVE_USERINFO_GAMEYEAR				
			//			1 			Protocol.SAVE_USERINFO_MONTH			//2013.3 -> 2013.4	
			//			2 			Protocol.SAVE_USERINFO_FRAMETIME		//0 -> 70(Server), 70 -> 0(Client).
			//			4 			Protocol.SAVE_USERINFO_FEVERGAUGE			
			//			10			Protocol.SAVE_USERINFO_BOTTLELITTLE			
			//			11			Protocol.SAVE_USERINFO_BOTTLEFRESH			
			//			12			Protocol.SAVE_USERINFO_TANKLITTLE			
			//			13			Protocol.SAVE_USERINFO_TANKFRESH			
			//			30			Protocol.SAVE_USERINFO_USEFEED				
			//         
			//aniitem=listidx:anistep,manger,diseasestate; (인벤[O], 필드[O], 병원[X]).
			//		...
			//		1:5,24,1;		--> 자체분리 	> 4 : 5, 25, 0
			//		3:5,23,0;
			//		4:5,25,0;		--> 동물병원 	> 자체필터.
			//
			//cusitem=listidx:usecnt;
			//		...
			//		14:1;
			//		15:1;
			//		16:1;			--> 악세사리(자동필터)
			//
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_TRADE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_TRADE");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_TRADE;
			
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );							//유저 패스워드.	
			_form.AddField("crypt", "2");
			_form.AddField("userinfo", SSUtil.setEncode32( ServerData.parser_userInfoA ) );			//유저정보.				
			_form.AddField("aniitem", ServerData.parser_aniitem );				//동물정보(창고, 필드) 병원(제외).
			_form.AddField("cusitem", SSUtil.setEncode32( ServerData.parser_cusItemA ) );				//소모템 사용정보.
			_form.AddField("tradeinfo", SSUtil.setEncode32( ServerData.parser_tradeInfo ) );			//거래정보.	
			_form.AddField("paraminfo", SSUtil.setEncode32( RivalQuestManager.Ins.GetProgressInfoA () ) );	//0을 클리어라고 할때 0, 1번을 클리어하라.
			
			
			//_form.AddField("userinfo", "0:2013;1:8;2:0;4:2;10:10;11:100;12:20;13:200;30:3;");	//유저정보.
			//_form.AddField("aniitem", "1:5,1,1;3:5,23,0;4:5,25,-1;");							//동물정보(창고, 필드) 병원(제외).
			//_form.AddField("cusitem", "14:1;15:1;16:1;");										//소모템 사용정보.
			//_form.AddField("tradeinfo", "0:5;1:2;10:1;11:1;12:75;20:1;30:1;31:10;32:1;33:10;34:20;35:110;40:702;");//거래정보.
			
			//userinfo=gameyear;gamemonth;frametime;fevergauge;bottlelittle;bottlefresh;tanklittle;tankfresh;feeduse;
			//         0:2013;  1:4;      2:0;      4:2;       10:10;       11:100;     12:20;     13:200;   30:3;
			//
			//			0 			Protocol.SAVE_USERINFO_GAMEYEAR				
			//			1 			Protocol.SAVE_USERINFO_MONTH			//2013.3 -> 2013.4	
			//			2 			Protocol.SAVE_USERINFO_FRAMETIME		//0 -> 70(Server), 70 -> 0(Client).
			//			4 			Protocol.SAVE_USERINFO_FEVERGAUGE			
			//			10			Protocol.SAVE_USERINFO_BOTTLELITTLE			
			//			11			Protocol.SAVE_USERINFO_BOTTLEFRESH			
			//			12			Protocol.SAVE_USERINFO_TANKLITTLE			
			//			13			Protocol.SAVE_USERINFO_TANKFRESH			
			//			30			Protocol.SAVE_USERINFO_USEFEED				
			//         
			//aniitem=listidx:anistep,manger,diseasestate; (인벤[O], 필드[O], 병원[X]).
			//		...
			//		1:5,24,1;		--> 자체분리 	> 4 : 5, 25, 0
			//		3:5,23,0;
			//		4:5,25,0;		--> 동물병원 	> 자체필터.
			//
			//cusitem=listidx:usecnt;
			//		...
			//		14:1;
			//		15:1;
			//		16:1;			--> 악세사리(자동필터)
			//
			//거래후에 정보를 보내주시면됩니다.
			//tradeinfo=fame:famelv:tradecnt:prizecnt:prizecoin:playcoin:saletrader:saledanga:saleplusdanga:salebarrel:salefresh:salecoin:saleitemcode
			//		    0:5; 1:2;   10:1;    11:1;    12:75;    20:1;    30:1;      31:10;    32:1;         33:10;     34:20;    35:990;  40:-1;	--노선물.
			//		    0:5; 1:2;   10:1;    11:1;    12:75;    20:1;    30:1;      31:10;    32:1;         33:10;     34:20;    35:990;  40:700;	--선물.
			//			
			//			0			Protocol.SAVE_TRADEINFO_FAME					
			//			1			Protocol.SAVE_TRADEINFO_FAMELV				
			//			10			Protocol.SAVE_TRADEINFO_TRADECNT				
			//			11			Protocol.SAVE_TRADEINFO_PRIZECNT				
			//			12			Protocol.SAVE_TRADEINFO_PRIZECOIN			
			//			20			Protocol.SAVE_TRADEINFO_PLAYCOIN				
			//			30			Protocol.SAVE_TRADEINFO_SALETRADER			
			//			31			Protocol.SAVE_TRADEINFO_SALEDANGA			
			//			32			Protocol.SAVE_TRADEINFO_SALEPLUSDANGA		
			//			33			Protocol.SAVE_TRADEINFO_SALEBARREL			
			//			34			Protocol.SAVE_TRADEINFO_SALEFRESH			
			//			35			Protocol.SAVE_TRADEINFO_SALECOST				
			//			40			Protocol.SAVE_TRADEINFO_SALEITEMCODE			-- 선물이 있으면 해당번호, 없으면 (-1).
			//insert into dbo.tUserSaleRewardItemCode(itemcode) values(-1)		-- 빈것.
			//insert into dbo.tUserSaleRewardItemCode(itemcode) values(700)		-- 총알.
			//insert into dbo.tUserSaleRewardItemCode(itemcode) values(701)
			//insert into dbo.tUserSaleRewardItemCode(itemcode) values(800)		-- 치료제.
			//insert into dbo.tUserSaleRewardItemCode(itemcode) values(801)
			//insert into dbo.tUserSaleRewardItemCode(itemcode) values(900)		-- 건초.
			//insert into dbo.tUserSaleRewardItemCode(itemcode) values(901)
			//insert into dbo.tUserSaleRewardItemCode(itemcode) values(1000)	-- 일꾼.
			//insert into dbo.tUserSaleRewardItemCode(itemcode) values(1001)
			//insert into dbo.tUserSaleRewardItemCode(itemcode) values(1100)	-- 촉진제
			//insert into dbo.tUserSaleRewardItemCode(itemcode) values(1101)
			//insert into dbo.tUserSaleRewardItemCode(itemcode) values(2000)	-- 하트.
			//insert into dbo.tUserSaleRewardItemCode(itemcode) values(2001)
			
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_SEEDHARVEST:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_SEEDHARVEST");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_SEEDHARVEST;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("feeduse", "" + ServerData.sendCode_feedUse );					//건초 사용한것 > 결과 받고 클리어 해주면됨(성공일경우)
			_form.AddField("seedidx", "" + ServerData.sendCode_seedIdx );					//경작지 번호.
			_form.AddField("mode", "" + ServerData.sendCode_mode );							//모드.
			//일반수확(1)		Protocol.USERSEED_HARVEST_MODE_NORMAL
			//즉시/캐쉬수확(2)	Protocol.USERSEED_HARVEST_MODE_RIGHTNOW
			// 작물 제거. Protocol.USERSEED_HARVEST_MODE_GIVEUP
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_SEEDPLANT:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_SEEDPLANT");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_SEEDPLANT;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("feeduse", "" + ServerData.sendCode_feedUse );						//건초 사용한것 > 결과 받고 클리어 해주면됨(성공일경우)
			_form.AddField("seedidx", "" + ServerData.sendCode_seedIdx );						//경작지 번호.
			_form.AddField("seeditemcode", "" + ServerData.sendCode_seedItemCode );				//씨앗 번호.
			//건초 > 직접.
			//하트 > 직접.
			//회복 > 소모(선물함).
			//촉진 > 소모(선물함).
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_SEEDBUY:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_SEEDBUY");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_SEEDBUY;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("seedidx", "" + ServerData.sendCode_seedIdx );						//경작지 번호.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_DELETEID:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_DELETEID");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_DELETEID;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
			
		}
			break;
		case Protocol.PTC_FACUPGRADE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_FACUPGRADE");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_FACUPGRADE;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("subcategory", "" + ServerData.sendCode_subcategory );					
			_form.AddField("kind", "" + ServerData.sendCode_kind );							
			
			//집(60), 탱크(61), 저온보관(62), 정화시설(63), 양동이(64), 착유기(65), 주입기(66).	
			//업그레이드 시작(1)			Protocol.USERMASTER_UPGRADE_KIND_NEXT
			//업그레이드 즉시완료(2)		Protocol.USERMASTER_UPGRADE_KIND_RIGHTNOW	
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_ITEMACC:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ITEMACC");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ITEMACC;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("anilistidx", "" + ServerData.sendCode_listIdx );					//동물.
			_form.AddField("acclistidx", "" + ServerData.sendCode_listIdxs1 );					//악세(머리).
			_form.AddField("acc2listidx", "" + ServerData.sendCode_listIdxs2 );					//악세(등, 옆구리).
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_ITEMACCNEW:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ITEMACCNEW");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ITEMACCNEW;
			
			//2. setting form
			//악세 두부분 착용하기.
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("anilistidx", "" + ServerData.sendCode_listIdx );					//동물.
			_form.AddField("acclistidx", "" + ServerData.sendCode_listIdxs1 );					//악세(머리).
			// >= 0 						listidx번호를 전달.
			//Protocol.ACC_STATE_STRIP		악세해제.
			//Protocol.ACC_STATE_KEEP		악세유지.
			_form.AddField("acc2listidx", "" + ServerData.sendCode_listIdxs2 );					//악세(등, 옆구리).
			// >= 0 						listidx번호를 전달.
			//Protocol.ACC_STATE_STRIP		악세해제.
			//Protocol.ACC_STATE_KEEP		악세유지.
			_form.AddField("randserial", "" + GameData.serial_accChange );// 7772);				// 랜덤 씨리얼 여기서 호출하지 마세요. 콜하는 쪽에서 호출하세요.
			// SSUtil.getRandSerial()
			
			//악세 한쪽해제 한쪽유지
			//_form.AddField("gameid", "xxxx2");
			//_form.AddField("password", "049000s1i0n7t8445289");
			//_form.AddField("anilistidx", "" + 19);
			//_form.AddField("acclistidx", "" + Protocol.ACC_STATE_STRIP);//악세해제.
			//_form.AddField("acc2listidx", "" + Protocol.ACC_STATE_KEEP);//악세유지.
			//_form.AddField("randserial", "" + 7772);
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_ITEMINVENEXP:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ITEMINVENEXP");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ITEMINVENEXP;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("invenkind", "" + ServerData.sendCode_invenKind );						
			//인벤의 종류.
			//동물(1)		Protocol.USERITEM_INVENKIND_ANI
			//소모(3)		Protocol.USERITEM_INVENKIND_CONSUME
			//악세(4)		Protocol.USERITEM_INVENKIND_ACC
			//세포(1040)		Protocol.USERITEM_INVENKIND_ACC
			//줄기세포(1040)	Protocol.USERITEM_INVENKIND_STEMCELL
			//보물(1200)		Protocol.USERITEM_INVENKIND_TREASURE

			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_ITEMQUICK:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ITEMQUICK");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ITEMQUICK;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("listidx", "" + ServerData.sendCode_listIdx );						//인벤(총알, 치료제, 일꾼, 촉진제)
			_form.AddField("quickkind", "" + ServerData.sendCode_quickKind );					//장착, 해제
			//해제(-1)		Protocol.USERMASTER_QUICKKIND_NON
			//장착(1)		Protocol.USERMASTER_QUICKKIND_SETTING
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_ANIREPREG:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ANIREPREG");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ANIREPREG;
			
			//2. setting form				
			//대표 동물 등록(listidx를 번호를 전송해서 등록함.)
			//병원 > 등록(X).
			//창고 > 등록(O).
			//필드 > 등록(O). <= 전에는 안되다가 지금음 됨.
			//       자신의 분신을 등록 > 최고를 자랑하기 위해서.
			//                       > 동물이 죽으면 기본 동물로 서버에서 자동 처리해줌.
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("listidx", "" + ServerData.sendCode_listIdx );						//아이템의 listidx 번호(서버에서 생성해서 보내준 고유번호).
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
			
		}
			break;
		case Protocol.PTC_ANIUSEITEM:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ANIUSEITEM");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ANIUSEITEM;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("crypt", "1");
			_form.AddField("listset", SSUtil.setEncode32( ServerData.sendCode_useItems ));					//소모템 사용정보.				
			// 구분자1[:]	소모템이 몇개 소모 되었는지 콜론(:)으로 구분.
			//				소모템리스트번호:사용개수
			// 구분자2[;]	묶음1과 묶음2의 구분 세미콜론(;).
			//				묶음1;묶음2;																		
			// 소모템 12번(listidx)에 1개 소모
			// 소모템 13              3개 소모
			// ....
			// 12:1;13:3
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_ANIREVIVAL:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ANIREVIVAL");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ANIREVIVAL;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("mode", "" + ServerData.sendCode_mode );							
			//부활모드.
			//필드부활(1)		Protocol.USERITEM_MODE_REVIVAL_FIELD
			//병원부활(2)		Protocol.USERITEM_MODE_REVIVAL_HOSPITAL
			// 병원 삭제. Protocol.USERITEM_MODE_REVIVAL_DELETE
			_form.AddField( "listidx", "" + ServerData.sendCode_listIdx );						//동물번호.(listidx).
			_form.AddField("fieldidx", "" + ServerData.sendCode_fieldIdx);						//필드번호.(fieldidx).				
			//필드부활 	0 ~ 8
			//병원부활 	-1
			//예제.
			//필드부활(부활석x1 or 캐쉬+1)			gameid=xxxx2&password=049000s1i0n7t8445289&mode=1&listidx=1&fieldidx=1 
			//병원부활(부활석x2 or (캐쉬+1)*2)		gameid=xxxx2&password=049000s1i0n7t8445289&mode=2&listidx=4&fieldidx=-1 
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;	
		case Protocol.PTC_FDELETE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_FDELETE");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_FDELETE;
			
			//2. setting form
			//(DD1은 친구가 있어서 테스트용으로 남겨두세요.)
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("friendid", ServerData.sendCode_friendId );					//추가할 친구아이디.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_FADD:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_FADD");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_FADD;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("friendid", ServerData.sendCode_friendId );					//추가할 친구아이디.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_FSEARCH:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_FSEARCH");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_FSEARCH;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			
			//Debug.Log ( "test" );
			//_form.AddField("friendid", ServerData.sendCode_friendId );						//검색할 아이디.
			
			_form.AddField("friendid", "" );						//검색할 아이디.
			//DD 	> DD로 시작된 DD1, DD2, DD3... 10검색.
			//공백 	> 임의의 10개를 검색.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_ITEMSELL:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ITEMSELL");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ITEMSELL;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("listidx", "" + ServerData.sendCode_sellListIdx );						//인벤(동물, 소모템, 악세)의 listidx를 입력.
			_form.AddField("sellcnt", "" + ServerData.sendCode_sellCount );							//판매 수량.
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;

		case Protocol.PTC_ITEMSELLLIST:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ITEMSELLLIST");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ITEMSELLLIST;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("listset", ServerData.sendCode_StemCelllistset);	//번호:리스트인덱스;
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;

		case Protocol.PTC_ITEMBUY:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ITEMBUY");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ITEMBUY;
			
			//2. setting form
			/*
				_form.AddField("gameid", "xxxx7");						//유저 아이디.
				_form.AddField("password", "049000s1i0n7t8445289");		//유저 패스워드.				
				_form.AddField("itemcode", "" + 4);		
				_form.AddField("listidx", "" + -1);						//아이템의 공유 인덱스 번호가 있는 경우.
				_form.AddField("fieldidx", "" + -1);					//동물의 필드 번호.
																		//필드동물 						0 ~ 8.
																		//창고(-1).						Protocol.USERITEM_FIELDIDX_INVEN
																		//병원(-2).						Protocol.USERITEM_FIELDIDX_HOSPITAL
				_form.AddField("quickkind", "" + -1);					//소모템 > 퀵슬롯에 착용위치.
																		// 없음(1).										Protocol.USERMASTER_QUICKKIND_NON
																		// 총알,백신,촉진,알바(아이템 보고 세팅해줌)(-1). 	Protocol.USERMASTER_QUICKKIND_SETTING
				_form.AddField("randserial", "" + 7772);				// 랜덤 씨리얼 여기서 호출하지 마세요. 콜하는 쪽에서 호출하세요.
																		// SSUtil.getRandSerial()
				*/
			
			//1-1. 동물(인벤)				1-2. 동물(빈필드)
			//gameid=xxx					gameid=xxx
			//password=xxx					password=xxx	
			//itemcode=xxx					itemcode=xxx			<= 이것추가.
			//listidx=-1					listidx=-1
			//fieldidx=-1					fieldidx=0 ~ 8
			//quickkind=-1					quickkind=-1
			//randserial=xxx				randserial=xxx			<= 이것추가.				
			//
			//-- 동물.
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289',    4, -1, -1, -1, 7772	-- 소(인벤 -1)
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289',    1, -1,  6, -1, 7771	-- 소(필드  6) > 2번 충돌.
			_form.AddField("gameid", strCreateID );
			_form.AddField("password", strCreatePW );
			_form.AddField("itemcode", "" + ServerData.sendCode_itemCode );		
			_form.AddField("listidx", "" + ServerData.sendCode_listIdx );
			_form.AddField("fieldidx", "" + ServerData.sendCode_fieldIdx );
			_form.AddField("quickkind", "" + ServerData.sendCode_quickKind );
			//_form.AddField("randserial", ServerData.sendCode_randSerial );				
			_form.AddField("randserial", GameData.serial_itemBuy );				
			_form.AddField("buycnt", "" + ServerData.sendCode_buyCnt );	
			//				
			//2-1. 악세(인벤)				
			//gameid=xxx				
			//password=xxx				
			//itemcode=xxx				
			//listidx=-1				
			//fieldidx=-1				
			//quickkind=-1				
			//randserial=xxx				
			//
			//-- 악세.
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289', 1401, -1, -1, -1, 7775	-- 악세(머리)
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289', 1419, -1, -1, -1, 7775	-- 악세(등)
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289', 1421, -1, -1, -1, 7775	-- 악세(옆구리)
			//				
			//3-1. 소모(신규)				3-2. 소모(추가)
			//gameid=xxx					gameid=xxx
			//password=xxx					password=xxx
			//itemcode=xxx					itemcode=xxx
			//listidx=-1					listidx=xxxx
			//fieldidx=-1					fieldidx=-1
			//quickkind=xxx					quickkind=xxx
			//randserial=xxx				randserial=xxx
			//
			//-- 소모.
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289',  701, -1, -1, -1, 7773	-- 총알(새것) > 2번 충돌
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289',  701, 13, -1, -1, 7764	-- 총알(기존누적)
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289',  801, -1, -1, -1, 7777	-- 치료제
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289',  801, 14, -1,  1, 7778	-- 치료제(기존누적)
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289', 1001, -1, -1, -1, 7779	-- 일꾼
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289', 1001, 15, -1,  1, 7760	-- 일꾼(새것 > 세팅변경)
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289', 1101, -1, -1,  1, 7781	-- 촉진제
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289', 1101, 16, -1,  1, 7782	-- 촉진제(새것 > 세팅변경)
			//
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289', 1200, 11, -1, -1, 7753	-- 부활석
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289', 5201, -1, -1, -1, 7784	-- 일반교배티켓
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289', 5300, -1, -1, -1, 7785	-- 대회티켓B
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289', 2200, -1, -1, -1, 7786	-- 상인100프로만족
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289', 2100, -1, -1, -1, 7787	-- 긴급요청티켓
			//
			//-- 환전 > 직접입력됨.
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289', 5105, -1, -1, -1, 7790	-- 코인환전
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289', 5106, -1, -1, -1, 7791	--
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289', 5107, -1, -1, -1, 7792	--
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289', 5108, -1, -1, -1, 7793	--
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289', 5109, -1, -1, -1, 7794	--
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289', 5110, -1, -1, -1, 7795	--
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289', 5101, -1, -1, -1, 7795	-- 환전비용이상함.
			//
			//-- 기타지정템 > 직접입력됨.
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289',  901, -1, -1, -1, 7788	-- 건초
			//exec spu_ItemBuy 'xxxx7', '049000s1i0n7t8445289', 2000, -1, -1, -1, 7789	-- 하트
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_CHANGEPW:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_CHANGEPW");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_CHANGEPW;
			
			//2. setting form
			//strCreatePW : 패스워드는 클라이언트에서 생성. 
			_form.AddField("gameid", ServerData.sendCode_id );		//strCreateID
			_form.AddField("password", ServerData.sendCode_changePw );	//strCreatePW
			
			readAndroidInfo();
			_form.AddField("phone", strPhoneNumberC);
			
			//Debug.Log(" _form:" + SSUtil.getString(_form.data));
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;	
		case Protocol.PTC_XXXXX:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_XXXXX");
			//Debug.Log("url:" + urlbase + Protocol.PTG_XXXXX);
			#endif
			
			//1. make URL
			url = urlbase + Protocol.PTG_XXXXX;
			
			//2. setting form
			_form.AddField("serial", "" + (++debugSerial));
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form), _onResult));
		}
			break;
		case Protocol.PTC_DAILYREWARD:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_DAILYREWARD");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_DAILYREWARD;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );					//strCreateID
			_form.AddField("password", strCreatePW );	//strCreatePW
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_NOTICE: 
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_NOTICE");
			#endif
			
			//1. make URL
			url = urlbase + Protocol.PTG_NOTICE;
			
			//2. setting form
			_form.AddField("market", "" + Protocol.MARKET);
			_form.AddField("buytype", "" + Protocol.BUYTYPE);
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form), _onResult));
		}
			break;
		case Protocol.PTC_CREATEID:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_CREATEID");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_CREATEID;
			
			//2. setting form
			//strCreateID = "sangsang";
			//strCreatePW = "passwrod";
			
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("market", "" + Protocol.MARKET);
			_form.AddField("buytype", "" + Protocol.BUYTYPE);
			_form.AddField("platform", "" + Protocol.PLATFORM);
			_form.AddField("ukey", "xxxxx");
			_form.AddField("version", "" + Protocol.VERSION);
			
			readAndroidInfo();
			_form.AddField("phone", strPhoneNumberC);
			_form.AddField("pushid", strPushID);
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_CREATEGUEST:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_CREATEGUEST");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_CREATEGUEST;
			
			//2. setting form
			//strCreateID : guest라고 보내주면 서버에서 만들어준다.
			//strCreatePW : 패스워드는 클라이언트에서 생성.
			if ( GameData.guestPlay ) 
			{
				strCreateID = "iuest";
				
				strGuestPWOriginal = SSUtil.getGuestPassword();
				strCreatePW = SSUtil.setPassword( strGuestPWOriginal );
				
				_form.AddField("gameid", strCreateID);
				_form.AddField("password", strCreatePW);
				_form.AddField("market", "" + Protocol.MARKET);
				_form.AddField("buytype", "" + Protocol.BUYTYPE);
				_form.AddField("platform", "" + Protocol.PLATFORM);
				_form.AddField("ukey", "xxxxx");
				_form.AddField("version", "" + Protocol.VERSION);
				
				readAndroidInfo();
				_form.AddField("phone", strPhoneNumberC);
				_form.AddField("pushid", strPushID);
				_form.AddField("kakaotalkid", 	"");	//"wvPC8MH2w_PA7N7u3u3b797r3_PE88v4wb3"
				_form.AddField("kakaouserid",  "");		//"91188455545412240"
				_form.AddField("kakaogameid",  "");		//"162457805"

				//	Debug.Log(ServerData.sendCode_kakaonickname);
				_form.AddField("kakaonickname", ServerData.sendCode_kakaonickname);//_my.nickName);			//닉네임. 			"mynickname"
				_form.AddField("kakaoprofile",  SSUtil.EncryptString(""));//	_my.profile);			//사진 URL			"http://th-p.talk.kakao.co.kr/th/talkp/wke3o4tbAc/z5Zr5k02IhSrmU4NvTyxf1/kx19xk_110x110_c.jpg"
				
				_form.AddField("kakaomsgblocked", "");//_my.messageBlocked);	//메세지 블럭여부		KakaoProtocol.KAKAO_MESSAGE_BLOCKED_TRUE
				//					KakaoProtocol.KAKAO_MESSAGE_BLOCKED_FALSE
				_form.AddField("kakaofriendlist", "");// KakaoManager.Instance.stListKakaoFriends.getFriendsTalkId());	
				//appFriend talkId	"0:kakaotalkidxxxx;1:kakaotalkidxxxx3;"
				//					번호:talkId
				
			}
			else 
			{
				if ( GameData.IsChangeIdGuestToKakao () ) 
				{
					strCreateID = GameData.guestToKakaoId;
				}
				else 
				{
					strCreateID = "farm";
				}
				
				//Debug.Log ( "strCreateID ("+strCreateID+")"  );
				
				strGuestPWOriginal = SSUtil.getGuestPassword();
				strCreatePW = SSUtil.setPassword( strGuestPWOriginal );
				
				_form.AddField("gameid", strCreateID);
				_form.AddField("password", strCreatePW);
				_form.AddField("market", "" + Protocol.MARKET);
				_form.AddField("buytype", "" + Protocol.BUYTYPE);
				_form.AddField("platform", "" + Protocol.PLATFORM);
				_form.AddField("ukey", "xxxxx");
				_form.AddField("version", "" + Protocol.VERSION);
				
				readAndroidInfo();
				_form.AddField("phone", strPhoneNumberC);
				_form.AddField("pushid", strPushID);
				//---
				
				tagKakaoLocalUser _my = KakaoManager.Instance.stKakaoLocalUser;				
				//tagKakaoFriend _stFriend;
				_form.AddField("kakaotalkid", 	_my.uuid);	//"wvPC8MH2w_PA7N7u3u3b797r3_PE88v4wb3"
				_form.AddField("kakaouserid",  	_my.userId);//"91188455545412240"
				_form.AddField("kakaogameid",  	_my.id);	//"162457805"
				//Debug.Log(ServerData.sendCode_kakaonickname);
				_form.AddField("kakaonickname", ServerData.sendCode_kakaonickname );		//닉네임. 			"mynickname"

				//DebugManager.Ins.Log2("_my.nickName : " + _my.nickName);
				_form.AddField("kakaoprofile", 	SSUtil.EncryptString(_my.profile) );			//사진 URL			"http://th-p.talk.kakao.co.kr/th/talkp/wke3o4tbAc/z5Zr5k02IhSrmU4NvTyxf1/kx19xk_110x110_c.jpg"
				//없으면 			""
				_form.AddField("kakaomsgblocked", _my.messageBlocked);	//메세지 블럭여부		KakaoProtocol.KAKAO_MESSAGE_BLOCKED_TRUE
				//					KakaoProtocol.KAKAO_MESSAGE_BLOCKED_FALSE
				_form.AddField("kakaofriendlist", KakaoManager.Instance.stListKakaoFriends.getFriendsUserId());	
				//appFriend talkId	"0:kakaotalkidxxxx;1:kakaotalkidxxxx3;"
				//					번호:talkId
			}
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_PUSHMSG:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_PUSHMSG");
			#endif
			
			//1. make URL
			url = urlbase + Protocol.PTG_PUSHMSG;
			
			#if NET_DEBUG_MODE
			Debug.Log("#### 상대 게임아이디 입력.");
			#endif
			//2. setting form
			_form.AddField("gameid", strCreateID);
			_form.AddField("password", strCreatePW);
			_form.AddField("receid", strCreateID);
			_form.AddField("kind", "" + pushKind);
			_form.AddField("msgtitle", pushMsgTitle);
			_form.AddField("msgmsg", pushMsgMsg);
			
			//_form.AddField("kind", "" + Protocol.PUSH_MODE_MSG);
			//_form.AddField("msgtitle", "[단순제목]");
			//_form.AddField("msgmsg", "[단순내용]");
			
			//_form.AddField("kind", "" + Protocol.PUSH_MODE_PEACOCK);
			//_form.AddField("msgtitle", "[자랑제목]");
			//_form.AddField("msgmsg", "[자랑내용]");
			
			//_form.AddField("kind", "" + Protocol.PUSH_MODE_URL);
			//_form.AddField("msgtitle", "[URL제목]");
			//_form.AddField("msgmsg", "http://m.naver.com");
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_LOGIN:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_LOGIN");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_LOGIN;

			//2. setting form
			_form.AddField("gameid", strCreateID );		//strCreateID
			_form.AddField("password", strCreatePW );	//strCreatePW
			_form.AddField("market", "" + Protocol.MARKET);
			_form.AddField("version", "" + Protocol.VERSION);
			
			tagKakaoLocalUser _my = KakaoManager.Instance.stKakaoLocalUser;
			if ( _my.profile == null ) 
			{
				//Debug.Log ("Here1");
				_form.AddField("kakaoprofile", 	SSUtil.EncryptString(""));
				_form.AddField("kakaomsgblocked", "" );

				//DebugManager.Ins.Log("_my.profile1 : " + _my.profile);
			}
			else 
			{
				//Debug.Log ("Here2");S
				_form.AddField("kakaoprofile", 	SSUtil.EncryptString(_my.profile) );			//사진 URL			"http://th-p.talk.kakao.co.kr/th/talkp/wke3o4tbAc/z5Zr5k02IhSrmU4NvTyxf1/kx19xk_110x110_c.jpg"
				//_form.AddField("kakaoprofile",	_my.profile );			//사진 URL			"http://th-p.talk.kakao.co.kr/th/talkp/wke3o4tbAc/z5Zr5k02IhSrmU4NvTyxf1/kx19xk_110x110_c.jpg"

				//DebugManager.Ins.Log("_my.profile2 : " + _my.profile);

				_form.AddField("kakaomsgblocked", _my.messageBlocked );
				
				GameData.myMessageBlocked = _my.messageBlocked;
				//카톡(수락)	게임(수락)		=> ok (수락유지).
				//			게임(거부)		=> ok (거부유지).
				//카톡(거부)	게임(거부)		=> ok.
				//			게임(수락=> 거부)	=> (로그인시 보내준 거부로 변경).
				//			변경팝			=> 짜요 목장 이야기에서는 메시지를 받으시려면 카카오톡>더보기>카카오계정>연결된 앱관리에서 짜요 목장 이야기를 선택하여 '카카오톡으로 메시지를 수신'을 체크해주세요.
			}
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_GIFTGAIN:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_GIFTGAIN");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_GIFTGAIN;
			
			//2. setting form	
			_form.AddField("gameid", strCreateID );			//유저 아이디.
			_form.AddField("password", strCreatePW );		//유저 패스워드.
			_form.AddField("giftkind", "" + ServerData.sendCode_giftkind );
			//메세지 삭제(-1).				Protocol.GIFTLIST_GIFT_KIND_MESSAGE_DEL			
			//선물 삭제(안받고 삭제)(-2)		Protocol.GIFTLIST_GIFT_KIND_GIFT_DEL
			//선물 받기(해당템만 전송)(-3)		Protocol.GIFTLIST_GIFT_KIND_GIFT_GET		
			_form.AddField("idx", "" + ServerData.sendCode_giftIdx );							//선물번호 인덱스.
			_form.AddField("listidx", "" + ServerData.sendCode_listIdx );						//아이템의 공유 인덱스 번호가 있는 경우.
			_form.AddField("fieldidx", "" + ServerData.sendCode_fieldIdx );					//동물의 필드 번호.
			//필드동물 						0 ~ 8.
			//창고(-1).						Protocol.USERITEM_FIELDIDX_INVEN
			//병원(-2).						Protocol.USERITEM_FIELDIDX_HOSPITAL
			_form.AddField("quickkind", "" + ServerData.sendCode_quickKind );					//소모템 > 퀵슬롯에 착용위치.
			// 없음(1).										Protocol.USERMASTER_QUICKKIND_NON
			// 총알,백신,촉진,알바(아이템 보고 세팅해줌)(-1). 	Protocol.USERMASTER_QUICKKIND_SETTING
			
			//0-1. 쪽지 받기.	
			//gameid=xxx
			//password=xxx
			//giftkind=xxx
			//idx=xxx(선물 번호)
			//listidx=-1
			//fieldidx=-1
			//quickkind=-1
			//
			//1-1. 동물(인벤)			1-2. 동물(빈필드)	
			//gameid=xxx				gameid=xxx
			//password=xxx				password=xxx
			//giftkind=xxx				giftkind=xxx
			//idx=xxx(선물 번호)			idx=xxx(선물 번호)
			//listidx=-1				listidx=-1
			//fieldidx=-1				fieldidx=0 ~ 8
			//quickkind=-1				quickkind=-1
			//
			//2-1. 악세(인벤)	
			//gameid=xxx
			//password=xxx
			//giftkind=xxx
			//idx=xxx(선물 번호)
			//listidx=-1
			//fieldidx=-1
			//quickkind=-1
			//
			//3-1. 소모(신규)				3-2. 소모(추가)
			//gameid=xxx				gameid=xxx
			//password=xxx				password=xxx
			//giftkind=xxx				giftkind=xxx
			//idx=xxx(선물 번호)			idx=xxx(선물 번호)
			//listidx=-1				listidx=xxxx
			//fieldidx=-1				fieldidx=-1
			//quickkind=xxx				quickkind=xxx
			//
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -1, 75, -1, -1, -1	-- 쪽지받기(삭제).
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3, 60, -1, -1, -1	-- 소	(인벤).
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3, 61, -1,  6, -1	-- 양	(필드6).
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3, 62, -1,  6, -1	-- 산양 (필드6 충돌).
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3, 69, -1, -1, -1	-- 악세.
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3, 63, -1, -1, -1	-- 총알(번호불일치).
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3, 63,  7, -1, -1	-- 총알(번호일치).
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3,216, 25, -1,  1	-- 총알(새총알  > 세팅변경).
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3, 64,  8, -1,  1	-- 치료제.
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3,217, 26, -1,  1, -1	-- 치료제(새것 > 세팅변경).
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3, 66,  9, -1,  1, -1	-- 일꾼.
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3,218, 27, -1,  1, -1	-- 일꾼(새것 > 세팅변경).
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3, 67, 10, -1,  1, -1	-- 촉진제.
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3,219, 28, -1,  1, -1	-- 촉진제(새것 > 세팅변경).
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3, 68, 29, -1, -1, -1	-- 부활석.
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3, 73, 30, -1, -1, -1	-- 일반교배티켓.
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3, 74, 31, -1, -1, -1	-- 대회티켓B.
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3, 76, 32, -1, -1, -1	-- 상인100프로만족.
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3, 77, 33, -1, -1, -1	-- 긴급요청티켓.
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3, 65, -1, -1, -1, -1	-- 건초.
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3, 70, -1, -1, -1, -1	-- 하트.
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3, 71, -1, -1, -1, -1	-- 캐쉬.
			//exec spu_GiftGain 'xxxx6', '049000s1i0n7t8445289', -3, 72, -1, -1, -1, -1	-- 코인.	
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_ANISET:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ANISET");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ANISET;
			
			//2. setting form
			// 동물의 필드 배치 세팅하기.
			// 필드 0번(fieldidx)자리에 1번(listidx)를 세팅.
			// 필드 1                  2             세팅.
			// ....
			// 최종 배치된 자료만 보내주면된다.
			// (처음의 자료, 변경, 수정등등은 필요없으면. )
			_form.AddField("gameid", strCreateID );			//유저 아이디.
			_form.AddField("password", strCreatePW );		//유저 패스워드.
			_form.AddField("crypt", "1");
			_form.AddField("listset", SSUtil.setEncode32( ServerData.sendCode_aniSet ) );
			/*_form.AddField("listset", "0:1;1:2;2:3;3:4;4:5;5:6");	//동물배치.(필드에 있는 동물만 보내주면된다.)
																		// (fieldidx:listidx;fieldidx:listidx;....)
																		// 구분자1[:]	동물이 어떤 필드에 어떤 리스트 번호가 매칭 되었는지 콜론(:)으로 구분.
																		//				필드번호:리스트번호 
																		// 구분자2[;]	동물과 동물의 구분 세미콜론(;).
																		//				동물1;동물2;
																		*/
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_ANIDIE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_ANIDIE");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_ANIDIE;
			
			//2. setting form
			// 동물을 어떤 listidx(fieldidx:아님을 유의) 떻방식으로 죽었는지
			_form.AddField("gameid", strCreateID );			//유저 아이디.
			_form.AddField("password", strCreatePW );		//유저 패스워드.
			_form.AddField("mode", "" + ServerData.sendCode_animalDieMode );
			_form.AddField("listidx", "" + ServerData.sendCode_animalDieIdx );
			
			/*_form.AddField("mode", "" + Protocol.USERITEM_MODE_DIE_PRESS);	//죽는 모드.
																				//눌러, 터져 죽음 
																				//		> 카운터후 병원으로 이동시켜면 됨.(서버는 바로 이동시켜둠)
																				// 		Protocol.USERITEM_MODE_DIE_PRESS 
																				//늑재 죽음		
																				//		> 바로 병원으로 이동시킴.
																				//		Protocol.USERITEM_MODE_DIE_EAT_WOLF
				_form.AddField("listidx", "" + 17);								//동물번호.(listidx).
				*/
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		case Protocol.PTC_DOGAMREWARD:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C -> S] PTC_DOGAMREWARD");
			#endif
			//1. make URL
			url = urlbase + Protocol.PTG_DOGAMREWARD;
			
			//2. setting form
			_form.AddField("gameid", strCreateID );			//유저 아이디.
			_form.AddField("password", strCreatePW );		//유저 패스워드.
			_form.AddField("dogamidx", "" + ServerData.sendCode_dogamRewardIdx );						//도감번호.(아이템 테이블 : rewardcode).
			
			//Debug.Log(" _form:" + SSUtil.getString(_form.data));
			
			//3. sending
			#if NET_DEBUG_MODE
			Debug.Log(" _form:" + SSUtil.getString(_form.data));
			#endif
			StartCoroutine(Handle(new WWW(url, _form ), _onResult));
		}
			break;
		default:{
			Debug.LogError("[error][C -> S] #### error");				
		}
			break;
		}
		
		return true;
	}
	
	private void ReadSchoolUserTop ( string _xml , string _target , SSParser _parser )
	{
		//Ui_Debug.SetText ( "try read result" );
		
		_parser.parsing( _xml, _target );
		
		DownLoadData.MySchoolRankDataHolder.Init ();
		
		
		while( parser.next () ){
			DownLoadData.MySchoolRankDataHolder.Push ( 	_parser.getInt("userrank"),
			                                          _parser.getString("gameid"),
			                                          _parser.getInt("point"),
			                                          _parser.getString("schoolname"),
			                                          _parser.getInt("schoolidx"),
			                                          _parser.getInt ( "itemcode" ),
			                                          _parser.getInt ( "acc1" ),
			                                          _parser.getInt ( "acc2" ),
			                                          _parser.getString ( "kakaotalkid" ) ,
			                                          _parser.getString ( "kakaouserid" ) ,			                                          
			                                          _parser.getString ( "kakaonickname" ) ,
			                                          SSUtil.DecryptString(_parser.getString ( "kakaoprofile" )) ,			                           
			                                          //SSUtil.DecryptString("") ,			                           
			                                          _parser.getInt ( "kakaomsgblocked" ) ,
			                                          _parser.getInt ( "kakaofriendkind" ) , 
			                                          _parser.getInt ( "cnt" )
			                                          );
		}
		
	}
	
	private void ReadEpisodeData ( string _xml , string _target , SSParser _parser )
	{
		_parser.parsing( _xml, _target );
		
		if( _parser.next() )
		{
			DownLoadData.EpisodeData.ClearData ();
			
			DownLoadData.EpisodeData.parser_etsalecoinA 		= _parser.getInt("etsalecoin");	//에피소드 기간 동안의 수익.
			DownLoadData.EpisodeData.parser_etgrade			= _parser.getInt("etgrade");
			DownLoadData.EpisodeData.parser_etcheckresult1 	= _parser.getInt("etcheckresult1");
			DownLoadData.EpisodeData.parser_etcheckresult2 	= _parser.getInt("etcheckresult2");
			DownLoadData.EpisodeData.parser_etcheckresult3 	= _parser.getInt("etcheckresult3");
			DownLoadData.EpisodeData.parser_etitemcodeA 	= _parser.getInt("etitemcode");			
			DownLoadData.EpisodeData.parser_etreward1 		= _parser.getInt("etreward1");
			DownLoadData.EpisodeData.parser_etreward2 		= _parser.getInt("etreward2");
			DownLoadData.EpisodeData.parser_etreward3 		= _parser.getInt("etreward3");
			DownLoadData.EpisodeData.parser_etreward4 		= _parser.getInt("etreward4");
			
			
			//Debug.Log ( "etsalecoin ( "+parser.getInt("etsalecoin")+" ) " );
			//Debug.Log ( "etitemcode ( "+parser.getInt("etitemcode")+" ) " );
			//Debug.Log ( "etgrade ( "+parser.getInt("etgrade")+" ) " );
			/*
			DownLoadData.EpisodeData.parser_etsalecoinA 		= 12222;
			DownLoadData.EpisodeData.parser_etgrade			= Protocol.EPISODE_GRADE_EXCELLENT;
			DownLoadData.EpisodeData.parser_etcheckresult1 	= 0;
			DownLoadData.EpisodeData.parser_etcheckresult2 	= 0;
			DownLoadData.EpisodeData.parser_etcheckresult3 	= 0;
			DownLoadData.EpisodeData.parser_etitemcode 		= 91001;
			DownLoadData.EpisodeData.parser_etreward1 		= 803;
			DownLoadData.EpisodeData.parser_etreward2 		= 5;
			DownLoadData.EpisodeData.parser_etreward3 		= 6;
			DownLoadData.EpisodeData.parser_etreward4 		= -1;
			*/
		}
		
		
		
		
		/*
					//etgrade != Protocol.EPISODE_GRADE_NON > 보상기간출력.
					parser.parsing(_xml, "");
					if(parser.next()){
						parser.getInt("etsalecoin");	//에피소드 기간 동안의 수익.
						parser.getString("etgrade");	//에피소드 등급.
														//Protocol.EPISODE_GRADE_BAD 			// Bad		> 에피소드 결과 출력.	
														//Protocol.EPISODE_GRADE_NORMAL 		// Normal	> 에피소드 결과 출력.
														//Protocol.EPISODE_GRADE_GOOD 			// Good		> 에피소드 결과 출력.
														//Protocol.EPISODE_GRADE_EXCELLENT 		// Excellent> 에피소드 결과 출력.					
						parser.getInt("etcheckresult1");//조건1 불만족(-1), 만족(1)
						parser.getInt("etcheckresult2");//조건2 불만족(-1), 만족(1)
						parser.getInt("etcheckresult3");//조건3 불만족(-1), 만족(1)
						parser.getInt("etitemcode");	//에피소드 보상 아이템 코드(에피소드 코드번호임).
						parser.getInt("etreward1");		//보상1번.
						parser.getInt("etreward2");		//보상2번.
						parser.getInt("etreward3");		//보상3번.
						parser.getInt("etreward4");		//보상4번.
					}	
					*/
	}
	
	private void ReadSchoolRanking ( string _xml , string _target , SSParser _parser )
	{
		_parser.parsing( _xml, _target );
		
		bool _bNeedInit = true;
		
		while( _parser.next() )
		{
			if ( _bNeedInit )
			{
				DownLoadData.SchoolRankDataHolder.Init ();
				_bNeedInit = false;
			}
			
			DownLoadData.SchoolRankDataHolder.Push ( 	_parser.getInt("schoolrank"),
			                                        _parser.getInt("schoolidx"),
			                                        _parser.getString("schoolname"),
			                                        _parser.getString("schoolarea"),
			                                        _parser.getInt("schoolkind"),
			                                        _parser.getInt("cnt"),
			                                        _parser.getInt64("totalpoint")
			                                        );
		}
	}
	
	private void ReadSchoolList ( string _xml , string _target , SSParser _parser )
	{
		_parser.parsing( _xml, _target );
		
		DownLoadData.SchoolDataHolder.Init ();
		
		while( _parser.next() )
		{
			DownLoadData.SchoolDataHolder.Push (	_parser.getInt("schoolidx"),
			                                    _parser.getString("schoolname"),
			                                    _parser.getString("schoolarea"),
			                                    _parser.getInt("schoolkind")
			                                    );
		}
	}
	
	private void ReadBBS ( string _xml , string _target , SSParser _parser )
	{
		_parser.parsing( _xml, _target );
		
		// 리스트 초기화.
		Ui_MessageBoard.ClearBBSData ();
		
		Ui_MessageBoard.m_pageGuildMax = 1;		
		Ui_MessageBoard.m_pageNormalMax = 1;
		
		while ( _parser.next() )
		{
			Ui_MessageBoard.AddBBSData ( 	_parser.getInt("kind"),			//종류.						
			                            //일반게시판 		Protocol.USERBOARD_KIND_NORMAL
			                            //친추게시판 		Protocol.USERBOARD_KIND_FRIEND
			                            //대항게시판 		Protocol.USERBOARD_KIND_GROUP
			                            _parser.getInt("page"),			//현재 페이지번호.
			                            _parser.getInt("pagemax"),		//맥스 페이지.
			                            
			                            //게임정보(시설업글).
			                            _parser.getString("idx"),		//고유번호.
			                            _parser.getString("gameid"),		//작성자.	
			                            _parser.getString("message"),	//메세지내용.
			                            _parser.getString("writedate"),	//작성일.
			                            _parser.getInt("itemcode"),
			                            _parser.getInt("acc1"),
			                            _parser.getInt("acc2"),
			                            _parser.getInt("schoolidx"),	//학교번호.
			                            // -1 	: 없음.
			                            // >=1	: 학교번호.
			                            SSUtil.DecryptString(_parser.getString("kakaoprofile")) ,//kakaoprofile.
			                            //SSUtil.DecryptString("") ,//kakaoprofile.
			                            _parser.getString ( "kakaonickname" )
			                            );
		}
	}
	
	//@@@@ start 2015-11-16
	private void ReadGiftData ( string _xml , string _target , SSParser _parser )
	{
		_parser.parsing( _xml, _target );
		
		ServerData.listGiftData.Clear ();
		ServerGiftData _giftData = null;
		int _cnt, _itemcode;
		
		while( _parser.next() )
		{
			
			ServerData.GiftItem_PushA ( out _giftData,
			                           _parser.getInt("idx"),
			                           _parser.getInt("giftkind"),
			                           _parser.getString("message"),
			                           _parser.getInt("itemcode"),
			                           _parser.getString("giftdate"),
			                           _parser.getString("giftid"), 
			                           _parser.getInt("cnt") );
			
			ServerData.listGiftData.Add ( _giftData );
		}		
	}
	//@@@@ end
	
	private void ReadMoneyBase ( SSParser _parser )
	{

		ServerData.parser_cashcost = _parser.getInt("cashcost");				//변경된 금액.
		ServerData.parser_gamecostA = _parser.getInt("gamecost");	
		//Debug.Log (ServerData.parser_gamecostA);
		//Debug.Log (ServerData.parser_cashcost);
	}
	
	private void ReadFeed_Heart ( SSParser _parser )
	{
		ServerData.parser_feed = _parser.getInt("feed");					//1개사용중 -> 0개 사용중으로 클리어 해주세요.
		ServerData.parser_heart = _parser.getInt("heart");	
	}
	
	private void ReadParamForRival (int _param0, int _param1, int _param2, int _param3, int _param4, int _param5, int _param6, int _param7, int _param8, int _param9)
	{
		ServerData.parser_param0 = _param0;
		ServerData.parser_param1 = _param1;
		ServerData.parser_param2 = _param2;
		ServerData.parser_param3 = _param3;		// 받을 당시 코드.
		ServerData.parser_param4 = _param4;		// 받은 날짜.
		ServerData.parser_param5 = _param5;		// 받은 날짜.
		ServerData.parser_param6 = _param6;		// 퀘스트 포기 정보.		포기는 444;
		
		/*
		parser.getString("param3");
		parser.getString("param4");
		parser.getString("param5");
		parser.getString("param6");
		parser.getString("param7");
		parser.getString("param8");
		parser.getString("param8");
		*/
	}

	//@@@@ start 0067
	private void ReadRivalData ( SSParser _parser )
	{
		RivalQuestManager.bktWolfKillCnt 	= parser.getInt("bktwolfkillcnt");		//누적늑대잡이(1).
		RivalQuestManager.bktSaleCoin 		= parser.getInt("bktsalecoin");			//누적판매금액(11).
		RivalQuestManager.bkHeart 			= parser.getInt("bkheart");				//누적하트획득(12).
		RivalQuestManager.bkFeed 			= parser.getInt("bkfeed");				//누적건초획득(13).
		RivalQuestManager.bktSuccessCnt 	= parser.getInt("bktsuccesscnt");		//최고거래성공횟수(14).
		RivalQuestManager.bktBestFresh 		= parser.getInt("bktbestfresh");		//최고신선도(15) .
		RivalQuestManager.bktBestBarrel 	= parser.getInt("bktbestbarrel");		//최고배럴(16) .
		RivalQuestManager.bktBestCoin 		= parser.getInt("bktbestcoin");			//최고판매금액(17) .		
		RivalQuestManager.bkbarrel			= parser.getInt("bkbarrel");			//누적배럴(18) .
		RivalQuestManager.bkCrossNormal 	= parser.getInt("bkcrossnormal");		//누적일반교배(21).
		RivalQuestManager.bkCrossPremium 	= parser.getInt("bkcrosspremium");		//누적프리미엄교배(22).
		
		RivalQuestManager.bkTsGrade1Cnt 	= parser.getInt("bktsgrade1cnt");		//임시일반보물뽑기(23).
		RivalQuestManager.bkTsGrade2Cnt 	= parser.getInt("bktsgrade2cnt");		//임시프림보물뽑기(24).
		RivalQuestManager.bkTsUpCnt 		= parser.getInt("bktsupcnt");		//임시보물강화횟수(25).
		RivalQuestManager.bkBattleCnt		= parser.getInt("bkbattlecnt");			//임시배틀참여횟수(26).
		RivalQuestManager.bkAniUpCnt 		= parser.getInt("bkaniupcnt");			//누임시동물강화(27).	
		
		RivalQuestManager.bkApartAni 		= parser.getInt("bkapartani");			//누임시동물강화(27).	
		RivalQuestManager.bkApartTs 		= parser.getInt("bkapartts");			//누임시동물강화(27).		
		RivalQuestManager.bkComposeCnt 		= parser.getInt("bkcomposecnt");		//임시동물합성(20).	
		//		Debug.Log ( "best ("+parser.getInt("bktbestfresh")+")" );
	}
	
	private void ReadInviteInfo ( string _xml , string _target , SSParser _parser )
	{		
		_parser.parsing( _xml, _target );
		
		DownLoadData.KakaoInviteInfo.Clear ();
		
		while( _parser.next() ){
			DownLoadData.KakaoInviteInfo.Push ( _parser.getString("receuuid") ,
			                                   _parser.getString("senddate") );
		}
	}
	
	
	
	private void ReadHospitalAnimal ( string _xml , string _target , SSParser _parser ) 
	{
		/*
		parser.parsing(_xml, "hospitalowner");
		while(parser.next()){
			//공통 정보.
			parser.getInt("listidx");			//유저별 고유번호.
			parser.getInt("invenkind");			//가축(1)		Protocol.USERITEM_INVENKIND_ANI			<= 이것만 온다.
			parser.getInt("fieldidx");			//병원(-2)		Protocol.USERITEM_FIELDIDX_HOSPITAL		<= 이것만 온다.
			parser.getInt("itemcode");			//아이템 코드.
			parser.getInt("cnt");				//
			parser.getInt("anistep");			//
			parser.getInt("manger");			//
			parser.getInt("diseasestate");		//
			parser.getInt("acc1");				//
			parser.getInt("acc2");				//
			parser.getInt("randserial");		//
			parser.getInt("petupgrade");		//
			parser.getInt("needhelpcnt");		//필요한 동물 도움카운터(1). > 이것을 출력한다. 1/5남음.
		}
		*/
		
		_parser.parsing( _xml, _target );
		
		DownLoadData.HospitalAnimalDataHolder.Clear ();
		
		while ( _parser.next () )
		{
			DownLoadData.HospitalAnimalDataHolder.Push ( _parser.getInt ( "listidx" ) , _parser.getInt ( "needhelpcnt" ) );
			
			//Debug.Log ( "listIdx ( "+_parser.getInt ( "listidx" )+") needhelpcnt ("+_parser.getInt ( "needhelpcnt" )+")" );
		}
	}
	
	
	
	private void ReadListWhoNeedMyHelp ( string _xml , string _target , SSParser _parser ) 
	{
		
		
		_parser.parsing( _xml, _target );
		
		DownLoadData.NeedMyHelpHolder.Clear ();
		
		while( _parser.next() )
		{
			DownLoadData.NeedMyHelpHolder.PushData ( 	_parser.getString("friendid"),
			                                        _parser.getString("famelv"),
			                                        _parser.getString("kakaotalkid"),
			                                        _parser.getString("kakaouserid"),
			                                        _parser.getString("kakaonickname"),
			                                        SSUtil.DecryptString ( _parser.getString("kakaoprofile") )
			                                        //SSUtil.DecryptString (("") )
			                                        );
		}	
		
		
		// test.  
		//for ( int i = 0 ; i < 20 ; i++ ) { 
		//	DownLoadData.NeedMyHelpHolder.PushData ( "myName" + i , i.ToString () , i.ToString (), i.ToString (), i.ToString (), "" );
		//}
		
	}
	
	
	//처리못함 이건머지..?
	private void ReadListIHelpedFriend ( string _xml , string _target , SSParser _parser ) 
	{
		_parser.parsing( _xml, _target );
		
		DownLoadData.IHelpedFriendHolder.Clear ();
		DownLoadData.IHelpedFriendHolder.newRead = true;
		
		while( _parser.next() )
		{
			DownLoadData.IHelpedFriendHolder.PushData ( _parser.getString("kakaonickname"),
			                                           SSUtil.DecryptString ( _parser.getString("kakaoprofile") )
			                                           );
		}	
		
		//		DownLoadData.IHelpedFriendHolder.PushData ( "1" , "" );
		//		DownLoadData.IHelpedFriendHolder.PushData ( "2" , "" );
		//		DownLoadData.IHelpedFriendHolder.PushData ( "3" , "" );
		
		
		// test.  
		//for ( int i = 0 ; i < 20 ; i++ ) { 
		//	DownLoadData.NeedMyHelpHolder.PushData ( "myName" + i , i.ToString () , i.ToString (), i.ToString (), i.ToString (), "" );
		//}
		
	}
	
	
	
	//	private void ReadPmInfo ( string _xml , string _target , SSParser _parser ) 
	//	{
	//		_parser.parsing( _xml, _target );
	//		
	//		if( _parser.next()){
	//			GameData.primeumBbogiEventStart = System.DateTime.Parse ( _parser.getString("roulstart") );	//이벤트 시작.
	//			GameData.primeumBbogiEventEnd 	= System.DateTime.Parse ( _parser.getString("roulend") );	//이벤트 시작.
	//			
	//			GameData.animalCrystalEvent_active = _parser.getInt("roulflag");		//동물보상.
	//			//			Debug.Log ( "GameData.animalCrystalEvent_active " + GameData.animalCrystalEvent_active );
	//			GameData.animalCrystalEvent_animalCode.Clear ();
	//			GameData.animalCrystalEvent_animalCrystal.Clear ();
	//			
	//			GameData.animalCrystalEvent_animalCode.Add ( _parser.getInt("roulani1") );		//
	//			GameData.animalCrystalEvent_animalCode.Add ( _parser.getInt("roulani2") );		//
	//			GameData.animalCrystalEvent_animalCode.Add ( _parser.getInt("roulani3") );		//
	//			
	//			GameData.animalCrystalEvent_animalCrystal.Add ( _parser.getInt("roulreward1") );	//
	//			GameData.animalCrystalEvent_animalCrystal.Add ( _parser.getInt("roulreward2") );	//
	//			GameData.animalCrystalEvent_animalCrystal.Add ( _parser.getInt("roulreward3") );	//
	//			
	//			GameData.primeumChanceUp_active = _parser.getInt("roultimeflag");	//PM확률상승.
	//			//			Debug.Log ( "GameData.primeumChanceUp_active " + GameData.primeumChanceUp_active );
	//			GameData.primeumChanceUp_time1	= _parser.getInt("roultimetime1");	//
	//			GameData.primeumChanceUp_time2	= _parser.getInt("roultimetime2");	//
	//			GameData.primeumChanceUp_time3	= _parser.getInt("roultimetime3");	//
	//			
	//			GameData.freePrimeumEvent 	= _parser.getInt("pmgauageflag");	//PM무료고배.
	//			//			Debug.Log ( "GameData.freePrimeumEvent " + GameData.freePrimeumEvent );
	//			GameData.freePrimeumUpCnt	= _parser.getInt ( "pmgauagepoint" );
	//			GameData.freePrimeumBaseCnt	= _parser.getInt("pmgauagemax");	//
	//		}
	//	}
	
	
	private void ReadPmInfo ( string _xml , string _target , SSParser _parser ) 
	{
		_parser.parsing( _xml, _target );
		
		if( _parser.next())
		{
			if( _parser.getInt("roulsaleflag") == 1)
			{
				//동물뽑기 세일 플래그 (1) 세일.
				//동물뽑기 세일 적용범위 20 -> 20%.
				ServerData.parser_roul_cashSalePer = _parser.getInt("roulsalevalue");
			}
			else
			{
				ServerData.parser_roul_cashSalePer = 0;
			}

			GameData.primeumBbogiEventStart = System.DateTime.Parse ( _parser.getString("roulstart") );	//이벤트 시작.
			GameData.primeumBbogiEventEnd 	= System.DateTime.Parse ( _parser.getString("roulend") );	//이벤트 시작.
			
			GameData.animalCrystalEvent_active = _parser.getInt("roulflag");		//동물보상.
			GameData.animalCrystalEvent_animalCode.Clear ();
			GameData.animalCrystalEvent_animalCrystal.Clear ();
			GameData.animalCrystalEvent_animalCnt.Clear ();
			
			GameData.animalCrystalEvent_animalCode.Add ( _parser.getInt("roulani1") );		//
			GameData.animalCrystalEvent_animalCode.Add ( _parser.getInt("roulani2") );		//
			GameData.animalCrystalEvent_animalCode.Add ( _parser.getInt("roulani3") );		//
			
			GameData.animalCrystalEvent_animalCrystal.Add ( _parser.getInt("roulreward1") );	//
			GameData.animalCrystalEvent_animalCrystal.Add ( _parser.getInt("roulreward2") );	//
			GameData.animalCrystalEvent_animalCrystal.Add ( _parser.getInt("roulreward3") );	//
			
			GameData.animalCrystalEvent_animalCnt.Add ( _parser.getInt("roulrewardcnt1") );	//
			GameData.animalCrystalEvent_animalCnt.Add ( _parser.getInt("roulrewardcnt2") );	//
			GameData.animalCrystalEvent_animalCnt.Add ( _parser.getInt("roulrewardcnt3") );	//
			
			
			GameData.primeumChanceUp_active = _parser.getInt("roultimeflag");	//PM확률상승.
			GameData.primeumChanceUp_time1	= _parser.getInt("roultimetime1");	//
			GameData.primeumChanceUp_time2	= _parser.getInt("roultimetime2");	//
			GameData.primeumChanceUp_time3	= _parser.getInt("roultimetime3");	//
			GameData.primeumChanceUp_time4	= _parser.getInt("roultimetime4");	//
			
			GameData.freePrimeumEvent 	= _parser.getInt("pmgauageflag");	//PM무료고배.
			//			Debug.Log ( "GameData.freePrimeumEvent " + GameData.freePrimeumEvent );
			GameData.freePrimeumUpCnt	= _parser.getInt ( "pmgauagepoint" );
			GameData.freePrimeumBaseCnt	= _parser.getInt("pmgauagemax");	//
		}
	}

	//동물뽑기와 동일함.
	//변수 이름은 동일하지만 분명 보물전용 데이타입니다.
	private void ReadTsInfo ( string _xml , string _target , SSParser _parser ) 
	{
		_parser.parsing( _xml, _target );
		
		if( _parser.next()){
			//보물뽑기 세일 플래그 (1) 세일.
			//보물뽑기 세일 적용범위 20 -> 20%.
			if( _parser.getInt("tssaleflag") == 1)
			{				
				ServerData.parser_Tsroul_cashSalePer = _parser.getInt("tssalevalue");
			}
			else
			{
				ServerData.parser_Tsroul_cashSalePer = -1;
			}
		
			
			GameData.TsprimeumBbogiEventStart = System.DateTime.Parse ( _parser.getString("tsstart") );	//이벤트 시작.
			GameData.TsprimeumBbogiEventEnd 	= System.DateTime.Parse ( _parser.getString("tsend") );		//이벤트 종료.
			
			//x1보물을 뽑으면 -> x2 템 몇개를 지급해준다.
			GameData.TsCrystalEvent_active = _parser.getInt("tsflag");		//보물보상.

			GameData.TsCrystalEvent_treasureCode.Clear();
			GameData.TsCrystalEvent_treasureCrystal.Clear();
			GameData.TsCrystalEvent_treasureCnt.Clear();

			GameData.TsCrystalEvent_treasureCode.Add(_parser.getInt("tsani1"));	//	x1보물을 뽑으면...
			GameData.TsCrystalEvent_treasureCode.Add(_parser.getInt("tsani2"));	//
			GameData.TsCrystalEvent_treasureCode.Add(_parser.getInt("tsani3"));	//
			
			GameData.TsCrystalEvent_treasureCrystal.Add(_parser.getInt("tsreward1"));	//	x2템....
			GameData.TsCrystalEvent_treasureCrystal.Add(_parser.getInt("tsreward2"));	//
			GameData.TsCrystalEvent_treasureCrystal.Add(_parser.getInt("tsreward3"));	//
			
			GameData.TsCrystalEvent_treasureCnt.Add(_parser.getInt("tsrewardcnt1"));	// 몇개를 지급....
			GameData.TsCrystalEvent_treasureCnt.Add(_parser.getInt("tsrewardcnt2"));	//
			GameData.TsCrystalEvent_treasureCnt.Add(_parser.getInt("tsrewardcnt3"));	//	


			
			GameData.TsprimeumChanceUp_active = _parser.getInt("tstimeflag");	    //PM확률상승 시간.
			GameData.TsprimeumChanceUp_time1 = _parser.getInt("tstimetime1");	//
			GameData.TsprimeumChanceUp_time2 = _parser.getInt("tstimetime2");	//
			GameData.TsprimeumChanceUp_time3 = _parser.getInt("tstimetime3");	//
			GameData.TsprimeumChanceUp_time4 = _parser.getInt("tstimetime4");	//
			
			GameData.TsfreePrimeumEvent = _parser.getInt( "tspmgauageflag" );		//PM무료고배.
			GameData.TsfreePrimeumUpCnt = _parser.getInt( "tspmgauagepoint" );		// 누적포인트.
			GameData.TsfreePrimeumBaseCnt = _parser.getInt( "tspmgauagemax" );		// Max포인트.

			GameData.tsupgradesaleflag = _parser.getInt("tsupgradesaleflag");	//보물 업그레이드 비용할인 플래그.//할인중(1) 아님(-1)
			GameData.tsupgradesalevalue = _parser.getInt("tsupgradesalevalue");	//                  할인률.
		}
	}

	private void ReadFriendList ( string _xml , string _target , SSParser _parser ) 
	{
		_parser.parsing( _xml, _target );
		
		ServerData.Init_FriendData ();
		while( _parser.next() ){
			
			ServerData.PushFriendData ( _parser.getString("friendid") ,
			                           _parser.getInt("itemcode") ,
			                           _parser.getInt("acc1") ,
			                           _parser.getInt("acc2") ,			                           
			                           _parser.getString("senddate") ,			//하트선물 보낸날짜.
			                           _parser.getInt("state") ,				//친구의 수락, 신청 상태.
			                           //친구신청대기 			Protocol.USERFRIEND_STATE_PROPOSE_WAIT
			                           //친구수락대기			Protocol.USERFRIEND_STATE_APPROVE_WAIT
			                           //상호친구				Protocol.USERFRIEND_STATE_FRIEND
			                           _parser.getInt ( "famelv" ),
			                           _parser.getString ( "helpdate" ),
			                           _parser.getString ( "kakaotalkid" ) ,
			                           _parser.getString ( "kakaouserid" ) ,
			                           _parser.getString ( "kakaonickname" ) ,
			                           SSUtil.DecryptString(_parser.getString ( "kakaoprofile" )) ,			                           
			                           //SSUtil.DecryptString("") ,			                           
			                           _parser.getInt ( "kakaomsgblocked" ) ,
			                           _parser.getInt ( "kakaofriendkind" ) ,
			                           _parser.getInt("rtnstate"),		//복귀 요청에 대한 상태.
			                           _parser.getString("rtndate")		//복귀 요청 날짜.
			                           );
			
			//parser.getString("kakaotalkid");	//카톡 talkid(유일한 식별값 > 이걸로 친구를 찾음.)		"BElyGxtySQQ"
			//parser.getString("kakaouserid");	//카톡 userid(보이는 용도)							"91188455545412240"
			//parser.getString("kakaonickname");	//카톡 닉네임(유저가 변경한 이름)						"mynickname"
			//parser.getString("kakaoprofile");	//카톡 이미지(URL)									"" or "http://xxx"
			//parser.getString("kakaomsgblocked");//카톡 메세지 거절		KakaoProtocol.KAKAO_MESSAGE_BLOCKED_TRUE
			//	   메세지 수락		KakaoProtocol.KAKAO_MESSAGE_BLOCKED_FALSE
			//parser.getString("kakaofriendkind");//카톡 친구들(talkid -> 친구를 찾음)
			//게임친구 > 메세지(X)	KakaoProtocol.KAKAO_FRIEND_KIND_GAME
			//카톡친구 > 메세지(O)	KakaoProtocol.KAKAO_FRIEND_KIND_KAKAO
			//////////////////////////////////////////////////////////
			// 게임친구에게는 카톡 메세지를 절대로 보내지 말아야한다.
			//////////////////////////////////////////////////////////
		}
		
		
		
	}
	
	private void ReadServerUserItemData ( string _xml , string _target , SSParser _parser )
	{
		_parser.parsing( _xml, _target );
		
		DownLoadData.UserItemData.DataClear ();
		
		while ( _parser.next () ) {
			DownLoadData.UserItemData.PushUserITemData ( 
			                                            parser.getInt("listidx") ,
			                                            parser.getInt("invenkind") , 
			                                            parser.getInt("fieldidx"),
			                                            parser.getInt("itemcode"),
			                                            parser.getInt("cnt"),
			                                            parser.getInt("anistep"),
			                                            parser.getInt("manger"),
			                                            parser.getInt("diseasestate"),
			                                            parser.getInt("acc1"),
			                                            parser.getInt("acc2"),
			                                            parser.getInt("petupgrade"),
			                                            parser.getInt("treasureupgrade"),
			                                            parser.getInt("needhelpcnt"),
			                                            parser.getString("randserial") );
		}				
	}
	
	private void ReadBreedResultForNotify ( string _xml , string _target , SSParser _parser )
	{
		_parser.parsing(_xml, _target);
		
		BreedResultNotify _br = GameManager.Ins.breedResultNotify;
		
		_br.ClearData ();
		
		while( _parser.next () )
		{
			_br.AddData ( _parser.getInt("itemcode"), _parser.getString("comment") );
		}
	}
	
	// 랭킹 데이터 읽기.
	private void ReadRank ( string _xml , string _target , SSParser _parser )
	{		
		_parser.parsing(_xml, _target);
		
		if ( _parser.next () ) 
		{
			
			ServerData.Clean_Rank_Data ();
			
			do 
			{
				ServerData.Push_Rank_Data (
					_parser.getInt("rank") ,				//랭킹번호.
					_parser.getString("friendid") ,		//친구아이디(자기 아이디도 포함해서 옴).
					_parser.getInt("itemcode") ,			//대표동물 코드.
					_parser.getInt("acc1") , 
					_parser.getInt("acc2") , 
					_parser.getInt("ttsalecoin"),		//실제 1주일간 상인에게 판매한 누적금액(스케쥴에 의해서 자동 초기화됨).			
					_parser.getInt ( "famelv" ) ,
					_parser.getString("kakaotalkid") ,
					_parser.getString("kakaouserid") ,
					_parser.getString("kakaonickname") ,
					SSUtil.DecryptString(_parser.getString("kakaoprofile")) ,
					//SSUtil.DecryptString("") ,
					_parser.getInt("kakaomsgblocked") ,
					_parser.getInt("kakaofriendkind") );
				
				//if ( _parser.getInt("rank") < 15 )
				//	Ui_Debug.SetText ( _parser.getString("friendid") + " " + _parser.getString("kakaonickname") + " " + _parser.getInt("rank") );
			} while( parser.next () );			
			
			//카톡 talkid(유일한 식별값 > 이걸로 친구를 찾음.)		"BElyGxtySQQ"
			//카톡 userid(보이는 용도)							"91188455545412240"
			//카톡 닉네임(유저가 변경한 이름)						"mynickname"
			//카톡 이미지(URL)									"" or "http://xxx"
			//카톡 메세지 거절		KakaoProtocol.KAKAO_MESSAGE_BLOCKED_TRUE
			//	   메세지 수락		KakaoProtocol.KAKAO_MESSAGE_BLOCKED_FALSE
			//카톡 친구들(talkid -> 친구를 찾음)
			//게임친구 > 메세지(X)	KakaoProtocol.KAKAO_FRIEND_KIND_GAME
			//카톡친구 > 메세지(O)	KakaoProtocol.KAKAO_FRIEND_KIND_KAKAO
			//////////////////////////////////////////////////////////
			// 게임친구에게는 카톡 메세지를 절대로 보내지 말아야한다.
			//////////////////////////////////////////////////////////
		}
	}

	private void ReadWheelFreeInfo ( string _xml , string _target , SSParser _parser )
	{		
		_parser.parsing(_xml, _target);

		ServerData.ClearDailyRouletteInfoList();


		//parser.parsing(_xml, "wheelfreeinfo");
		while(_parser.next())
		{
			ServerData.AddDailyRouletteInfoList(parser.getInt("idx"), parser.getInt("itemcode"), parser.getInt("cnt"));
			//parser.getInt("idx");			//룰렛 고유 인덱스 번호. 나중에 룰렛을 돌리고 난다음에 이번호가 온다.
			//parser.getInt("itemcode");		//지급 아이템 코드번호.
			//parser.getInt("cnt");			//지급 아이템 수량.
		}
	}

	private void ReadWheelCashInfo ( string _xml , string _target , SSParser _parser )
	{		
		_parser.parsing(_xml, _target);

		ServerData.ClearCashRouletteInfoList();

		while(_parser.next())
		{
			ServerData.AddCashRouletteInfoList(parser.getInt("idx"), parser.getInt("itemcode"), parser.getInt("cnt"));
			//parser.getInt("idx");			//룰렛 고유 인덱스 번호. 나중에 룰렛을 돌리고 난다음에 이번호가 온다.
			//parser.getInt("itemcode");		//지급 아이템 코드번호.
			//parser.getInt("cnt");			//지급 아이템 수량.
		}
	}

	private void ReadWheelZzayoInfo ( string _xml , string _target , SSParser _parser )
	{		
		_parser.parsing(_xml, _target);

		ServerData.ClearZzayoRouletteInfoList();

		while(_parser.next())
		{
			ServerData.AddZzayoRouletteInfoList(parser.getInt("idx"), parser.getInt("itemcode"), parser.getInt("cnt"));
		}
	}

	private void ReadAllUserRank ( string _xml , string _target , SSParser _parser )
	{		
		_parser.parsing(_xml, _target);

		if(parser.getCount() > 0)
		{
			ServerData.ClearAllUserRankDataList();

			if( parser.next())
			{
				ServerData.AddAllUserRankDataPlayer(parser.getInt ("rank" ),				//랭킹순위.
				                              parser.getString("gameid"),			//유저gameid.
				                              parser.getString("kakaonickname"),	//닉네임.
				                              parser.getInt("anirepitemcode"),		//대표동물.
				                              parser.getInt("ttsalecoin"),			//판매금액.
				                              parser.getInt("famelv")				//famelv.
				                              );		
			}

			while ( parser.next () )
			{
				//Debug.Log("sale > " + parser.getInt ("rank" ) + ":" + parser.getString("gameid"));
				//자신의 랭킹 (처음) + 상위20위(20개)
				ServerData.AddAllUserRankData(parser.getInt ("rank" ),				//랭킹순위.
				                              parser.getString("gameid"),			//유저gameid.
				                              parser.getString("kakaonickname"),	//닉네임.
				                              parser.getInt("anirepitemcode"),		//대표동물.
				                              parser.getInt("ttsalecoin"),			//판매금액.
				                              parser.getInt("famelv")				//famelv.
				                              );		
			}
		}
	}

	private void ReadBattleRank ( string _xml , string _target , SSParser _parser )
	{		
		_parser.parsing(_xml, _target);

		if(parser.getCount() > 0)
		{
			ServerData.ClearBattleRankDataList();
			if(parser.next())
			{
				ServerData.AddBattleRankDataPlayer(parser.getInt ("rank" ),				//랭킹순위.
				                             parser.getString("gameid"),			//유저gameid.
				                             parser.getString("kakaonickname"),	//닉네임.
				                             parser.getInt("anirepitemcode"),		//대표동물.
				                             parser.getInt("trophy"),				//트로피(현재).
				                             parser.getInt("tier"),				//tier.
				                             parser.getInt("famelv")				//famelv
				                             );	
			}

			while ( parser.next () )
			{
				//Debug.Log("trophy > " + parser.getInt ("rank" ) + ":" + parser.getString("gameid"));
				//자신의 랭킹 (처음) + 상위20위(20개)
				ServerData.AddBattleRankData(parser.getInt ("rank" ),				//랭킹순위.
				                              parser.getString("gameid"),			//유저gameid.
				                              parser.getString("kakaonickname"),	//닉네임.
				                              parser.getInt("anirepitemcode"),		//대표동물.
				                              parser.getInt("trophy"),				//트로피(현재).
			                            	  parser.getInt("tier"),				//tier.
			                            	  parser.getInt("famelv")				//famelv
				                              );		
			}
		}
	}

	private void ReadZzayoMarketItems( string _xml , string _target , SSParser _parser)
	{
		_parser.parsing(_xml, _target);

		ServerData.ClearZzayoMarketItemList();

		while ( _parser.next () )
		{
			ServerData.AddZzayoMarketItem(_parser.getInt ( "idx" ),		//<- 주문할때 사용하는 번호.
										  _parser.getInt ( "kind" ),		//<- 상점분류.
										  //									Best(1).
										  //									일반(2).
										  //									월별한정(3).
										  //									날씬한끼(4).
										  //									든든한끼(5).
										  //									기타(6).
										  //
										  _parser.getString ( "title" ),		//<- 타이틀 정보.
										  _parser.getString ( "zcpfile" ),		//<- 이미지 URL.
										  _parser.getString ( "zcpurl" ),		//<- 점프 URL.
										  _parser.getInt ( "bestmark" ),		//<- Best마크(1), 없음(-1).
										  _parser.getInt ( "newmark" ),		//<- New 마크(1), 없음(-1).
										  _parser.getInt ( "needcnt" ),		//<- 필요한 수량(짜요쿠폰).
										  _parser.getInt ( "firstcnt" ),		//<- 처음입고량.
										  _parser.getInt ( "balancecnt" ),		//<- 사용량.
										  //									입고량(50), 사용량(20) -> 잔여량(30) -> 잔여량/입고량 => 30/50.
										  _parser.getString ( "commentsimple" ),//<-간략설명.
										  _parser.getString ( "commentdesc" ),	//<- 상세설명.
										  _parser.getString ( "expiredate" ));	//2016-05-31 00:00<- 만기일.
		}
	}

	private void ReadCashFirstTime( string _xml , string _target , SSParser _parser)
	{
		_parser.parsing(_xml, _target);

		//ServerData.AddCashFirstTime(5055);
		//ServerData.AddCashFirstTime(5053);
		while ( _parser.next () )
		{
			ServerData.AddCashFirstTime(_parser.getInt ( "itemcode" ));
		}
	}
	//0122
	private void ReadVipInfo( string _xml , string _target , SSParser _parser)
	{
		_parser.parsing(_xml, _target);
		
		ServerData.ClearVipInfoList();
		while ( _parser.next () )
		{
			ServerData.AddVipInfo(parser.getInt("vip_grade"), 
			                      parser.getInt("vip_cashpoint"),
			                      parser.getInt("vip_cashplus"),
			                      parser.getInt("vip_gamecost"),
			                      parser.getInt("vip_heart"),
			                      parser.getInt("vip_animal10"),
			                      parser.getInt("vip_wheel10"),
			                      parser.getInt("vip_treasure10"),
			                      parser.getInt("vip_box"),
			                      parser.getInt("vip_fbplus"));
		}
	}

	private void ReadPetInfo ( SSParser _parser )
	{
		
		// 현제 장착펫.
		DownLoadData.MyPetHolder.myPetId = _parser.getInt("petlistidx");
		
		DownLoadData.MyPetHolder.todaySellPetCode = _parser.getInt("pettodayitemcode");
		
		DownLoadData.MyPetHolder.todayExperienceCode = _parser.getInt("pettodayitemcode2");	//펫 체험 아이템 코드.
		//-1 	: 이미 체험했다.
		//펫코드 : 체험할 펫(오늘의 추천 펫과 동일한 것이 항상 온다.)
		
	}
	
	private void ReadFieldOpenInfo ( SSParser _parser )
	{
		DownLoadData.FieldInfo.SetInfo ( 0 , _parser.getInt("field0") );			//필드0 ~ 8번까지 허용되는가?
		DownLoadData.FieldInfo.SetInfo ( 1 , _parser.getInt("field1") );
		DownLoadData.FieldInfo.SetInfo ( 2 , _parser.getInt("field2") );
		DownLoadData.FieldInfo.SetInfo ( 3 , _parser.getInt("field3") );
		DownLoadData.FieldInfo.SetInfo ( 4 , _parser.getInt("field4") );
		DownLoadData.FieldInfo.SetInfo ( 5 , _parser.getInt("field5") );
		DownLoadData.FieldInfo.SetInfo ( 6 , _parser.getInt("field6") );
		DownLoadData.FieldInfo.SetInfo ( 7 , _parser.getInt("field7") );
		DownLoadData.FieldInfo.SetInfo ( 8 , _parser.getInt("field8") );		
	}
	
	private void ReadLastFriendRankData ( SSParser _parser )
	{
		DownLoadData.LastFriendRankDataHolder.lmSaleCoin = _parser.getInt("lmsalecoin");		//지난 내가 획득한 점수.
		DownLoadData.LastFriendRankDataHolder.lmRank = _parser.getInt("lmrank");			//지난 나의 랭킹.
		DownLoadData.LastFriendRankDataHolder.lmCnt = _parser.getInt("lmcnt");				//지난 나의 친구들.(lmcnt - lmrank = 내 밑에 있는 친구들).
		
		DownLoadData.LastFriendRankDataHolder.Init ();
		
		
		DownLoadData.LastFriendRankDataHolder.Push (	_parser.getString("l1gameid"),		//지난 1위 내친구.
		                                            _parser.getInt("l1itemcode"),		//		  대표동물.
		                                            _parser.getInt("l1acc1"),			//		  대표동물 악세.
		                                            _parser.getInt("l1acc2"),			//		  대표동물 악세.	
		                                            _parser.getInt("l1salecoin"),		//		  점수.
		                                            1,
		                                            _parser.getString("l1kakaonickname"),//		  닉네임.
		                                            SSUtil.DecryptString("kakaoprofile")	//		  사진.
		                                            );
		
		DownLoadData.LastFriendRankDataHolder.Push (	_parser.getString("l2gameid"),		//지난 1위 내친구.
		                                            _parser.getInt("l2itemcode"),		//		  대표동물.
		                                            _parser.getInt("l2acc1"),			//		  대표동물 악세.
		                                            _parser.getInt("l2acc2"),			//		  대표동물 악세.	
		                                            _parser.getInt("l2salecoin"),		//		  점수.
		                                            2,
		                                            _parser.getString("l2kakaonickname"),//		  닉네임.
		                                            SSUtil.DecryptString("kakaoprofile")	//		  사진.
		                                            );
		
		DownLoadData.LastFriendRankDataHolder.Push (	_parser.getString("l3gameid"),		//지난 1위 내친구.
		                                            _parser.getInt("l3itemcode"),		//		  대표동물.
		                                            _parser.getInt("l3acc1"),			//		  대표동물 악세.
		                                            _parser.getInt("l3acc2"),			//		  대표동물 악세.	
		                                            _parser.getInt("l3salecoin"),		//		  점수.
		                                            3,
		                                            _parser.getString("l3kakaonickname"),//		  닉네임.
		                                            SSUtil.DecryptString("kakaoprofile")	//		  사진.
		                                            );
	}
	
	private void Read_Calendar_Datas ( string _xml , string _target , SSParser _parser )
	{
		DownLoadData.EpisodeCalendarDataHolder.Init ();
		
		_parser.parsing ( _xml , _target );
		
		
		while( _parser.next() )  
		{
			
			DownLoadData.EpisodeCalendarDataHolder.Push ( _parser.getInt("itemcode")			//	에피소드 아이템 코드번호.
			                                             ,_parser.getInt("etyear")				//	에피소드 지급날짜.
			                                             ,_parser.getInt("etgrade")				//          기간 동안 등급.					
			                                             );
			
			/*
			//parser.getInt("itemcode");			//	에피소드 아이템 코드번호.
			_parser.getInt("etyear");			//	에피소드 지급날짜.
			//parser.getInt("etsalecoin");		//	        기간 동안 벌어들인 수익.
			_parser.getInt("etgrade");			//          기간 동안 등급.					
												//Protocol.EPISODE_GRADE_NON 			// 없음		> 출력안함.
												//Protocol.EPISODE_GRADE_BAD 			// Bad		> 에피소드 결과 출력.	
												//Protocol.EPISODE_GRADE_NORMAL 		// Normal	> 에피소드 결과 출력.
												//Protocol.EPISODE_GRADE_GOOD 			// Good		> 에피소드 결과 출력.
												//Protocol.EPISODE_GRADE_EXCELLENT 		// Excellent> 에피소드 결과 출력.
			//parser.getInt("etreward1");			//          보상1 ~ 4.
			//parser.getInt("etreward2");			//
			//parser.getInt("etreward3");			//
			//parser.getInt("etreward4");			//
			*/
		}
	}
	
	private void ReadPetDogam ( string _xml , string _target , SSParser _parser )
	{
		_parser.parsing ( _xml , _target );
		
		DownLoadData.MyPetHolder.ClearDogamData ();
		
		while( _parser.next() )
		{
			DownLoadData.MyPetHolder.PushDogamData ( _parser.getInt("itemcode") );			//획득한 동물 아이템 코드(구매, 뽑기, 대회 등등에서 획득시 자동 수집됨).
		}
	}
	
	private void ReadLastSchoolRank ( string _xml , string _target , SSParser _parser )
	{
		// 여기 잘못 읽음?
		_parser.parsing ( _xml , _target );
		
		DownLoadData.LastSchoolRankDataHolder.Init ();
		
		while ( _parser.next () )
		{
			DownLoadData.LastSchoolRankDataHolder.Push ( 	_parser.getString("dateid"),	//
			                                            _parser.getInt("schoolrank"),		//랭킹번호 1, 2,3.
			                                            _parser.getString("schoolname"),	//학교이름.
			                                            _parser.getInt("schoolidx"),		//학교코드번호.
			                                            _parser.getInt("cnt"),				//학교 인원.
			                                            _parser.getInt64("totalpoint")		//누적점수.
			                                            );
		}
	}
	
	private void ReadLastRankInMySchool ( string _xml , string _target , SSParser _parser )
	{
		_parser.parsing ( _xml , _target );
		
		DownLoadData.LastRankInMySchoolDataHolder.Init ();
		
		if( _parser.next() )
		{
			DownLoadData.LastRankInMySchoolDataHolder.Push ( 	_parser.getString("dateid"),
			                                                _parser.getInt("schoolrank"),
			                                                _parser.getString("schoolname"),
			                                                _parser.getInt("schoolidx"),
			                                                _parser.getInt("cnt"),
			                                                _parser.getInt("point"),
			                                                _parser.getInt("userrank"),
			                                                _parser.getInt("itemcode1"),
			                                                _parser.getInt("itemcode2"),
			                                                _parser.getInt("itemcode3")
			                                                );
		}
	}
	
	
	
	private void ReadSysYabau ( string _xml , string _target , SSParser _parser )
	{
		_parser.parsing ( _xml , _target );
		
		if(_parser.next()){
			//_parser.getInt("idx");				//위의 리스트 번호.
			//_parser.getString("packname");		//이름.
			Ui_DiceGamble.saleper = 	_parser.getInt("saleper");			//할인률.
			
			
			Ui_DiceGamble.SetDiceGambleInfo ( 1, _parser.getInt("pack11") , _parser.getInt("pack12") , _parser.getInt("pack13") , _parser.getInt("pack14") );
			Ui_DiceGamble.SetDiceGambleInfo ( 2, _parser.getInt("pack21") , _parser.getInt("pack22") , _parser.getInt("pack23") , _parser.getInt("pack24") );
			Ui_DiceGamble.SetDiceGambleInfo ( 3, _parser.getInt("pack31") , _parser.getInt("pack32") , _parser.getInt("pack33") , _parser.getInt("pack34") );
			Ui_DiceGamble.SetDiceGambleInfo ( 4, _parser.getInt("pack41") , _parser.getInt("pack42") , _parser.getInt("pack43") , _parser.getInt("pack44") );
			Ui_DiceGamble.SetDiceGambleInfo ( 5, _parser.getInt("pack51") , _parser.getInt("pack52") , _parser.getInt("pack53") , _parser.getInt("pack54") );
			Ui_DiceGamble.SetDiceGambleInfo ( 6, _parser.getInt("pack61") , _parser.getInt("pack62") , _parser.getInt("pack63") , _parser.getInt("pack64") );
			
			//			_parser.getInt("pack11");			//1단계 상품.
			//			_parser.getInt("pack12");			//      NPC가 제시할 주사위.
			//			_parser.getInt("pack13");			//      수정가격.
			//			_parser.getInt("pack14");			//      코인가격.
			//		
			//			_parser.getInt("pack21");			//2단계 상품.
			//			_parser.getInt("pack22");			//      NPC가 제시할 주사위.
			//			_parser.getInt("pack23");			//      수정가격.
			//			_parser.getInt("pack24");			//      코인가격.
			//		
			//			_parser.getInt("pack31");			//3단계 상품.
			//			_parser.getInt("pack32");			//      NPC가 제시할 주사위.
			//			_parser.getInt("pack33");			//      수정가격.
			//			_parser.getInt("pack34");			//      코인가격.
			//		
			//			_parser.getInt("pack41");			//4단계 상품.
			//			_parser.getInt("pack42");			//      NPC가 제시할 주사위.
			//			_parser.getInt("pack43");			//      수정가격.
			//			_parser.getInt("pack44");			//      코인가격.
			//		
			//			_parser.getInt("pack51");			//5단계 상품.
			//			_parser.getInt("pack52");			//      NPC가 제시할 주사위.
			//			_parser.getInt("pack53");			//      수정가격.
			//			_parser.getInt("pack54");			//      코인가격.
			//		
			//			_parser.getInt("pack61");			//6단계 상품.
			//			_parser.getInt("pack62");			//      NPC가 제시할 주사위.
			//			_parser.getInt("pack63");			//      수정가격.
			//			_parser.getInt("pack64");			//      코인가격.
		}
	}
	
	private void ReadContryFarm ( string _xml , string _target , SSParser _parser )
	{
		_parser.parsing ( _xml , _target );
		
		ServerData.Clean_ContryFarmData ();
		
		while( _parser.next() )
		{
			ServerData.Push_ContryFarmData ( parser.getInt("farmidx") ,				//목장번호 순서용으로만 사용됨.
			                                parser.getInt("itemcode") ,				//목장의 코드번호 구매. 판매. 수익에 사용됨.	
			                                //아이템코드 > 정보는 아이템 테이블에서 참조.
			                                //label(farmworld)
			                                //시간당수익(실제시간)				hourcoin
			                                //맥스코인						maxcoin
			                                //가격상승년(1월)					raiseyear
			                                //상승퍼센트(100%)				raisepercent		
			                                //			
			                                //목장원가격(판매, 구매동일)		gamecost
			                                // > 목장구매, 판매가 산정			gamecost + gamecost * raisepercent * (gameyear - raiseyear) / 100
			                                //
			                                //목장 수익 > 보유중 > 1시간 단위로 지정된 단위로 보상 > 맥스 초과못함.
			                                //	1. buystate = Protocol.USERFARM_BUYSTATE_BUY 
			                                //	2. 흘러간시간 * hourcoin
			                                //	3. (hourcoin > maxcoin)?maxcoin:hourcoin
			                                //		
			                                parser.getInt("buystate") ,				//구매상태.
			                                //미보유			Protocol.USERFARM_BUYSTATE_NOBUY
			                                //보유중			Protocol.USERFARM_BUYSTATE_BUY
			                                parser.getString("incomedate"),		//수익을 얻어가고 난 뒤에 시간(구매나 수익 얻어가고 초기화됨).
			                                parser.getInt("star"),
			                                parser.getInt("playcnt")
			                                );
		}

		if ( GameEvent.Ins != null )
			GameEvent.Ins.Event_ChangedFarmList ();
	}
		
	private void ReadServerItemData ( out ServerUserItemData _parser_userItemData , SSParser _parser )
	{
		_parser_userItemData = new ServerUserItemData ();					
		
		_parser_userItemData.invenKind 		= _parser.getInt("invenkind");		//인벤종류.							
		_parser_userItemData.listIdx 		= _parser.getInt("listidx");		//아이템 리스트 번호.
		_parser_userItemData.itemCode 		= _parser.getInt("itemcode");		//아이템 코드.
		_parser_userItemData.cnt 			= _parser.getInt("cnt");			//보유수량.
		_parser_userItemData.randSerial 	= _parser.getString("randserial");	//
		_parser_userItemData.aniStep 		= _parser.getInt("anistep");		//0 ~ 12단계.
		_parser_userItemData.manger 		= _parser.getInt("manger");			//(건초:1>여물:25)
		_parser_userItemData.diseasestate 	= _parser.getInt("diseasestate");	//질병상태.0:노질병, n:질병걸림.
		_parser_userItemData.acc1 			= _parser.getInt("acc1");			//악세사리 아이템코드.
		_parser_userItemData.acc2 			= _parser.getInt("acc2");			//악세사리 아이템코드.
		_parser_userItemData.petUpgrade 	= _parser.getInt("petupgrade");
		_parser_userItemData.fieldIdx 		= _parser.getInt("fieldidx");//필드(-1:창고, 0~8:필드, 99:대표, -2:죽음/병원).
		_parser_userItemData.treasureUpgrade= _parser.getInt("treasureupgrade");

		_parser_userItemData.upcnt 			= _parser.getInt("upcnt");
		_parser_userItemData.upstepmax 		= _parser.getInt("upstepmax");
		_parser_userItemData.freshstem100 	= _parser.getInt("freshstem100");
		_parser_userItemData.attstem100 	= _parser.getInt("attstem100");
		_parser_userItemData.timestem100 	= _parser.getInt("timestem100");
		_parser_userItemData.defstem100		= _parser.getInt("defstem100");
		_parser_userItemData.hpstem100		= _parser.getInt("hpstem100");
		_parser_userItemData.expirekind		= _parser.getInt("expirekind");
		_parser_userItemData.expiredate		= _parser.getString("expiredate");

//		Debug.Log("listidx : " + _parser_userItemData.listIdx);
//		Debug.Log("itemcode : " + _parser_userItemData.itemCode);
//		Debug.Log("cnt : " + _parser_userItemData.cnt);

		//		Debug.Log ("ReadServerItemData");
		
		
		//동물정보추가.
		
		// 필드동물 		0 ~ 8.
		// 대표(99)		Protocol.USERITEM_FIELDIDX_REPRESENT
		// 창고(-1)		Protocol.USERITEM_FIELDIDX_INVEN	
		// 병원(-2)		Protocol.USERITEM_FIELDIDX_HOSPITAL		
		
		//공통 정보.
		//					;			//유저별 고유번호.
		//					parser.getInt("invenkind");			//액세서리(4)	Protocol.USERITEM_INVENKIND_ACC
		//					;			// 창고(-1)		Protocol.USERITEM_FIELDIDX_INVEN
		//								//아이템 코드.
		//					;				//보유수량. 일반적으로는 1개, 소모템은 0개 이상.
		//					
		//					//동물에 대한 추가정보.
		//					parser.getInt("anistep");
		//					parser.getInt("manger");
		//					parser.getInt("diseasestate");
		//					parser.getInt("acc1");
		//					parser.getInt("acc2");
		//					parser.getInt("randserial");
		//					
		//					parser.getInt("petupgrade");
		//					parser.getInt("needhelpcnt");
		//					parser.getInt("needhelpalive");
	}
	
	//--------------------------------------------
	//[C <- S]
	// 2. 보내온 데이타는 data, fun으로 구성됨.
	//
	// queue[_idx].data 	: 서버메세지.
	// queue[_idx].fun 		: callback Funtion.
	// queue[_idx].popup 	: is Popup
	//--------------------------------------------
	public int parseCode(string _xml){
		
		//Ui_Debug.SetText ( "parseCode _idx ( "+_idx+" )" );
		//string _xml 	= queue[_idx].data;
		
		#if NET_DEBUG_MODE2
		Debug.Log ( _xml );
		string _xml = _xml;
		#endif
		
		//_xml  = "<?xml version='1.0' encoding='utf-8'?>";
		//_xml += "<rows>";
		//_xml += "	<result>";
		//_xml += "<resultcode>-2</resultcode>";
		//_xml += "<resultmsg> DEBUG (생성)아이디가 중복되었습니다.</resultmsg>";
		//_xml += "</result>";
		//_xml += "</rows>";
		
		//1. 변수 선언 및 할당.
		//bool _bPopup 				= queue[_idx].popup;
		//DELEGATE_INT _callbackFun 	= queue[_idx].fun;		
		//queue[_idx].fun				= null;
		
		if(Ui_NetLoading.Ins != null && Ui_NetLoading.Ins.gameObject.activeSelf == true)
			Ui_NetLoading.Ins.DissMiss();
		
		
		parser.parsing(_xml, "result");
		parser.next();
		
		int _code 		= parser.getInt("code");
		int _resultcode = parser.getInt("resultcode");
		string _msg 	= parser.getString("resultmsg");
		
		#if NET_DEBUG_MODE2
		Debug.Log( 
		          //"Queue _idx:" + _idx
		          //+ " _bPopup:" + _bPopup
		          " _code:" + _code 
		          + " _resultcode:" + _resultcode 
		          + " _msg:" + _msg
		          );
		#endif	
		
		#if NET_DEBUG_MODE2
		Debug.Log ( _xml );
		#endif	
		
		//3. 내부 코드.
		switch(_code){	
		case Protocol.PTS_FRETURN:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_FRETURN _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구하트주기 > 성공.");
				#endif
				
				//유저 정보.
				parser.parsing(_xml, "userinfo");
				
				if( parser.next() ){
					ReadMoneyBase ( parser );
					ReadFeed_Heart ( parser );
					ServerData.parser_FPoint = parser.getInt("fpoint");			//우정포인트(110 > 1개, 10포인트)로 표현함.
				}
				
				ReadFriendList ( _xml, "flist" , parser );
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구하트주기 > 아이디를 찾을 수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_OTHERID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구하트주기 > 친구의 정보를 찾을수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구하트주기 > 신청 받은 사람만이 승인 처리 할 수 있습니다");
				#endif
				break;
			case Protocol.RESULT_ERROR_ALIVE_USER:
				#if NET_DEBUG_MODE
				Debug.Log(" > 현재 활동하는 유저입니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_WAIT_RETURN:
				#if NET_DEBUG_MODE
				Debug.Log(" > 현재 요청 대기중입니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log(" > 팝업처리.");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_YABAUCHANGE:
		case Protocol.PTS_YABAUREWARD:
		case Protocol.PTS_YABAU:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_YABAUCHANGE, PTS_YABAUREWARD, PTS_YABAU _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PETTODAY > success");
				#endif
				
				ReadMoneyBase ( parser );
				
				Ui_DiceGamble.yabauidx 		= parser.getInt("yabauidx");		//주사위 인덱스 번호.(리스트 갱신을 하면 이것 바뀐다. 상세 정보는 아래에 위치 => sysyabau)
				Ui_DiceGamble.yabaustep 	= parser.getInt("yabaustep");		//0 주사위 안굴림, 1 ~6 주사위 굴림.	
				Ui_DiceGamble.yabauchange 	= parser.getInt("yabauchange");		//리스트 갱신에 들어가는 코인 비용.
				
				Ui_DiceGamble.yabaunum 		= parser.getInt("yabaunum");		//현재 주사위.									-				-				0				
				Ui_DiceGamble.yabauresult 	= parser.getInt("yabauresult");		//주사위 결과(승[==1], 패[!=1]).					-				-				0
				
				//행운의 주사위 상세 정보.
				ReadSysYabau ( _xml , "sysyabau" , parser );
				
				// 선물 읽기.
				if ( _code == Protocol.PTS_YABAUREWARD )
				{
					ReadGiftData ( _xml , "giftitem" , parser );
				}
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_YABAUCHANGE, PTS_YABAUREWARD, PTS_YABAU > error > 아이디를 확인해라.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_YABAUCHANGE, PTS_YABAUREWARD, PTS_YABAU > error > 지원하지 않는 모드입니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CASHCOST_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_YABAUCHANGE, PTS_YABAUREWARD, PTS_YABAU > error > 캐쉬가 부족합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_GAMECOST_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_YABAUCHANGE, PTS_YABAUREWARD, PTS_YABAU > error > 코인이 부족합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_YABAUCHANGE, PTS_YABAUREWARD, PTS_YABAU > error > 리스트를 찾을 수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CANNT_CHANGE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_YABAUCHANGE, PTS_YABAUREWARD, PTS_YABAU > error > 진행 중이거나 기타 사유로 리스트를 변경할 수 없습니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_YABAUCHANGE, PTS_YABAUREWARD, PTS_YABAU > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_TRADECHANGE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_TRADECHANGE _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TRADECHANGE > success");
				#endif
				
				//유저 정보.
				parser.parsing(_xml, "tradeinfo");
				if(parser.next()){
					GameData.SetDealerSelectedInGroup ( 0 , parser.getInt ( "trade0" ) );
					GameData.SetDealerSelectedInGroup ( 1 , parser.getInt ( "trade1" ) );
					GameData.SetDealerSelectedInGroup ( 2 , parser.getInt ( "trade2" ) );
					GameData.SetDealerSelectedInGroup ( 3 , parser.getInt ( "trade3" ) );
					GameData.SetDealerSelectedInGroup ( 4 , parser.getInt ( "trade4" ) );
					GameData.SetDealerSelectedInGroup ( 5 , parser.getInt ( "trade5" ) );
					GameData.SetDealerSelectedInGroup ( 6 , parser.getInt ( "trade6" ) );
				}
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TRADECHANGE > error > 아이디가 존재하지 않는다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TRADECHANGE > error > not found error");
				#endif
				break;
			}
		}
			break;

		case Protocol.PTS_RANKLIST:
			{
				#if NET_DEBUG_MODE
				Debug.Log("[C <- S] PTS_RANKLIST _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
				#endif

				switch(_resultcode){
				case Protocol.RESULT_SUCCESS:
					#if NET_DEBUG_MODE
					Debug.Log("PTS_RANKLIST > success");
					#endif

					//전체 유저 랭킹.
					ReadAllUserRank(_xml, "ranksale", parser);

					//유저 배틀 랭킹.
					ReadBattleRank(_xml, "rankbattle", parser);

					break;
				case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
					#if NET_DEBUG_MODE
					Debug.Log("PTS_RANKLIST > error > 아이디가 존재하지 않는다.");
					#endif
					break;
				default:
					#if NET_DEBUG_MODE
					Debug.Log("PTS_RANKLIST > error > not found error");
					#endif
					break;
				}
			}
			break;

		case Protocol.PTS_ANICOMPOSEINIT:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ANICOMPOSEINIT _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANICOMPOSEINIT > success");
				#endif
				
				//1. 변경된 것들.
				ReadMoneyBase ( parser );
				ReadFeed_Heart ( parser );
				
				ServerData.parser_bgcomposewt 	= System.DateTime.Parse ( parser.getString("bgcomposewt") ) ;		//합성 가능 시간(이시간 이후부터 합성이 가능합니다.)
				ServerData.parser_bgcomposecc 	= parser.getInt("bgcomposecc");			//합성 가능 시간초기화 비용.
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANICOMPOSEINIT > error > 아이디를 확인해라.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CASHCOST_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANICOMPOSEINIT > error > 캐쉬가 부족합니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANICOMPOSEINIT > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_ANICOMPOSE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ANICOMPOSE _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANICOMPOSE > success");
				#endif
				
				//1. 변경된 것들.
				ReadMoneyBase ( parser );
				ReadFeed_Heart ( parser );
				
				//2. 합성의 결과.
				ServerData.parser_bgcomposeic = parser.getInt("bgcomposeic");	//동물 아이템코드.
				ServerData.parset_bgcomposert = parser.getInt("bgcomposert");	//성공 or 실패.
				//Protocol.COMPOSE_RESULT_SUCCESS
				//Protocol.COMPOSE_RESULT_FAIL
				
				ServerData.parser_bgcomposewt 	= System.DateTime.Parse ( parser.getString("bgcomposewt") ) ;		//합성 가능 시간(이시간 이후부터 합성이 가능합니다.)
				ServerData.parser_bgcomposecc 	= parser.getInt("bgcomposecc");	
				//합성 가능 시간초기화 비용.

				//합성해서 새로운 동물, 또는 기존동물.
				ServerData.parser_userItemData = null;				
				parser.parsing(_xml, "itemowner");				
				if ( parser.next() )
				{
					ReadServerItemData ( out ServerData.parser_userItemData , parser );	
				}
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANICOMPOSE > error > 아이디를 확인해라.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANICOMPOSE > error > 지원하지 않습니다.(자신과교배, 지원안하는 모드)");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANICOMPOSE > error > 코드를 찾을수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_LISTIDX_NOT_FOUND:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANICOMPOSE > error > 번호를 찾을수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_MATCH:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANICOMPOSE > error > 동일한 아이템 코드가 아닙니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_HEART_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANICOMPOSE > error > 하트이 부족하다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_GAMECOST_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANICOMPOSE > error > 게임코인이 부족합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CASHCOST_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANICOMPOSE > error > 캐쉬가 부족합니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANICOMPOSE > error > not found error");
				#endif
				break;
			}
		}
			break;
			
		//@@@@ start 0095
		case Protocol.PTS_ANIPROMOTE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ANIPROMOTE _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIPROMOTE > success");
				#endif
				
				//1. 변경된 것들.
				ReadMoneyBase ( parser );
				ReadFeed_Heart ( parser );
				
				//2. 승급의 결과.
				ServerData.parser_promote_animal = parser.getInt("bgpromoteic");	//동물 아이템코드(승급된 동물).
				
				//승급해서 새로운 동물, 또는 기존동물.
				ServerData.parser_userItemData = null;
				parser.parsing(_xml, "itemowner");
				if ( parser.next() )
				{
					ReadServerItemData ( out ServerData.parser_userItemData , parser );
				}
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIPROMOTE > error > 아이디를 확인해라.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIPROMOTE > error > 코드를 찾을수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_LISTIDX_NOT_FOUND:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIPROMOTE > error > 번호를 찾을수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_HEART_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIPROMOTE > error > 하트이 부족하다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_GAMECOST_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIPROMOTE > error > 게임코인이 부족합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_TICKET_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIPROMOTE > error > 티켓 수량이 부족합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_ANIMAL_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIPROMOTE > error > 필요동물 수량이 부족합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_DIFFERENT_GRADE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIPROMOTE > error > 다른 등급의 동물이 있습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_MATCH:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIPROMOTE > error > 동일한 아이템 코드가 아닙니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIPROMOTE > error > not found error");
				#endif
				break;
			}
		}
		break;
		//@@@@ end
		case Protocol.PTS_ANIHOSLIST:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ANIHOSLIST _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIHOSLIST > success");
				#endif
				
				//로그인 정보와 동일한 형태로 온다. PTS_ANIHOSLIST > itemowner(와 동일한 형태.)
				//동물 병원의 동물들만 전송함.
				ReadHospitalAnimal ( _xml , "hospitalowner" , parser );
				
				
				//창고에 있는 전체 동물들을 전체 보내드림
				//창고 1, 2, 3, 4, 
				//전송 1, 2, 3, 4, 5, 6 > 5, 6       새롭게 부활받은 동물.
				//                      > 1, 2, 3, 4 패스해서 버리세요.
				/*
				parser.parsing(_xml, "invenowner");
				while(parser.next()){
					//공통 정보.
					parser.getInt("listidx");			//유저별 고유번호.
					parser.getInt("invenkind");			//가축(1)		Protocol.USERITEM_INVENKIND_ANI			<= 이것만 온다.
					parser.getInt("fieldidx");			// 창고(-1)		Protocol.USERITEM_FIELDIDX_INVEN		<= 이것만 온다.
					parser.getInt("itemcode");			//아이템 코드.
					parser.getInt("cnt");				//
					parser.getInt("anistep");			//
					parser.getInt("manger");			//
					parser.getInt("diseasestate");		//
					parser.getInt("acc1");				//
					parser.getInt("acc2");				//
					parser.getInt("randserial");		//
					parser.getInt("petupgrade");		//
					parser.getInt("needhelpcnt");		//
				}
				*/
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIHOSLIST > error > 아이디를 확인해라 > 다시 로그인.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIHOSLIST > error > not found error");
				#endif
				break;
			}
		}
			break;
			
		case Protocol.PTS_ANIUPGRADE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ANIUPGRADE _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode)
			{
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIUPGRADE > success");
				#endif
				
				ServerData.parser_gamecostA = parser.getInt("gamecost");	//게임머니.
				ServerData.parser_cashcost 	= parser.getInt("cashcost");	//캐쉬.
				ServerData.parser_feed 		= parser.getInt("feed");		//1개사용중 -> 0개 사용중으로 클리어 해주세요.
				ServerData.parser_heart 	= parser.getInt("heart");
				

				ServerData.parser_userItemData = null;				
				parser.parsing(_xml, "itemowner");				
				if ( parser.next() )
				{
					ReadServerItemData ( out ServerData.parser_userItemData , parser );	
				}
				break;
				
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIUPGRADE > error > 아이디를 확인해라 > 다시 로그인.");
				#endif
				break;
				
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIUPGRADE > error > 튜토리얼 번호가 없다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_UPGRADE_FULL:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIUPGRADE > error > 업그레이드가 풀입니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_GAMECOST_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIUPGRADE > error > 게임코인이 부족합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_HEART_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIUPGRADE > error > 하트이 부족하다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIUPGRADE > error > not found error");
				#endif
				break;
			}
		}
			break;
		//@@@@ start 0080
		case Protocol.PTS_APARTITEMCODE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_APARTITEMCODE _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode)
			{
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_APARTITEMCODE > success");
				#endif
				//동물 -> 구매/지원 -> 코인(80%)
				ReadMoneyBase ( parser );

				ServerData.Decompound_Coin = parser.getInt("plusgamecost");

				//@@@@ start 0093
				//분해된 개수.
				//예) 13 
				// 1차 -> 10개 현재와같이 표현 
				// 2차 -> 3개 ....
				parser.getInt("apartcnt");
				//@@@@ end	
							
				//유저인벤에 바로 들어감.
				ServerData.Clear_ListUserItemData ();
				ServerData.Clear_DecompoundResult_Item();

				parser.parsing(_xml, "itemowner");
				while(parser.next())
				{
					int _itemCode = parser.getInt("itemcode");
					ServerData.PushUserITemData (parser.getInt("listidx") ,
					                             parser.getInt("invenkind") ,
					                             parser.getInt("fieldidx"),
					                             _itemCode,
					                             parser.getInt("cnt"),
					                             parser.getInt("anistep"),
					                             parser.getInt("manger"),
					                             parser.getInt("diseasestate"),
					                             parser.getInt("acc1"),
					                             parser.getInt("acc2"),
					                             parser.getInt("petupgrade"),
					                             parser.getInt("treasureupgrade"),
					                             parser.getInt("needhelpcnt"),
					                             parser.getString("randserial"),
					                             parser.getInt("upcnt"),			//세포 누적횟수.
					                             parser.getInt("upstepmax"),		//세포 누적Max.  iteminfo.xml의 upstepmax는 사용하지 마세요.
					                             parser.getInt("freshstem100"),		//세포로 늘어난 신선도.
					                             parser.getInt("attstem100"),		//공격력.
					                             parser.getInt("defstem100"),		//방어력.
					                             parser.getInt("hpstem100"),		//HP.
					                             parser.getInt("timestem100"),		//줄어든 시간
							parser.getInt("expirekind"),		//** 만기템(1), 만기아님(-1).
							parser.getString("expiredate")
					                             );

					ServerData.Parser_DecompoundResult_Item_Add(_itemCode);
				}
				break;
				
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_APARTITEMCODE > error > 아이디를 확인해라 > 다시 로그인.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_APARTITEMCODE > error > 지원하지 않습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_LISTIDX_NOT_FOUND:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_APARTITEMCODE > error > 번호를 찾을수 없습니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_APARTITEMCODE > error > not found error");
				#endif
				break;
			}
		}
			break;
			//@@@@ end

		case Protocol.PTS_UBBOXOPENOPEN:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_UBBOXOPENOPEN _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode)
			{
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBBOXOPENOPEN > success");
				#endif
				ServerData.InitGoldCashHeartFeedGoldTicketBattleTicket(parser.getInt("gamecost"),
				                                                       parser.getInt("cashcost"),
				                                                       parser.getInt("heart"),
				                                                       parser.getInt("feed"),
				                                                       parser.getInt("goldticket"),
				                                                       parser.getInt("battleticket")
				                                                       );
				
				//----------------------------------
				//박스를 오픈할려고 누를 경우 오는 프로토콜.
				// 1번 박스오픈 .
				// boxslotidx 	: 1
				// boxslottime 	: 1번 박스 오픈예정 시간.
				// boxslot1 ~ 4 : 1 ~ 4번까지 박스정보.
				//----------------------------------
				ServerData.parse_boxslotidx = parser.getInt("boxslotidx");//현재 오픈 진행중인 박스슬롯인덱스(1 ~ 4).
				ServerData.parse_boxslottime = parser.getString("boxslottime");//현재 오픈 진행중인 박스의 완료 예정시간.
				//각 슬롯에 있는 박스번호(아이템코드값이 들어가있음).
				ServerData.Update_UBBOXOPENOPEN(parser.getInt("boxslot1"), parser.getInt("boxslot2"), parser.getInt("boxslot3"), parser.getInt("boxslot4"));


				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBBOXOPENOPEN > error > 아이디를 확인해라.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBBOXOPENOPEN > 지원하지 않는 모드입니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_BOX:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBBOXOPENOPEN > error > 요청하신 슬롯에 박스가 존재하지 않습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_OPERATE_OTHER_BOX:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBBOXOPENOPEN > error > 다른 슬롯이 작동중입니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBBOXOPENOPEN > error > not found error");
				#endif
				break;
			}
		}
			break;
		
		case Protocol.PTS_UBBOXOPENCASH2:		//캐쉬2배 오픈.
		case Protocol.PTS_UBBOXOPENCASH:		//캐쉬오픈.
		case Protocol.PTS_UBBOXOPENGETITEM:		//시간되어서 오픈.
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_UBBOXOPENCASH _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode)
			{
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBBOXOPENCASH > success");
				#endif
				ServerData.InitGoldCashHeartFeedGoldTicketBattleTicket(parser.getInt("gamecost"),
				                                                       parser.getInt("cashcost"),
				                                                       parser.getInt("heart"),
				                                                       parser.getInt("feed"),
				                                                       parser.getInt("goldticket"),
				                                                       parser.getInt("battleticket")
				                                                       );
				
				//----------------------------------
				//캐쉬로 강제 오픈하기.
				// 1번 박스오픈 .
				// boxslotidx 	: 1	-> 빈상태(-1)
				// boxslottime 	: -1이면 시간은 의미가 없어진다.
				// boxslot1 ~ 4 : 1 ~ 4번까지 박스정보.
				//----------------------------------

				//parser.getInt("boxslotidx");	//현재 오픈 진행중인 박스슬롯인덱스(1 ~ 4).
				//parser.getInt("boxslottime");	//현재 오픈 진행중인 박스의 완료 예정시간.
				//parser.getInt("boxslot1");		//각 슬롯에 있는 박스번호(아이템코드값이 들어가있음).
				//parser.getInt("boxslot2");
				//parser.getInt("boxslot3");
				//parser.getInt("boxslot4");
				
				//----------------------------------
				// 보상 정보.
				//----------------------------------
				ServerData.parse_rewardgamecost = parser.getInt("rewardgamecost");				//보상 코인.
				ServerData.parse_rewardcomposeticket = parser.getInt("rewardcomposeticket");	//보상 합성티켓.
				ServerData.parse_rewardpromoteticket = parser.getInt("rewardpromoteticket");	//보상 승급티켓.
				ServerData.parse_rewardgeneralstem = parser.getInt("rewardgeneralstem");		//보상 일반세포. (직접 넣어줌)
				ServerData.parse_rewardepicstem = parser.getInt("rewardepicstem");				//보상 좋은세포. (직접 넣어줌)

//				Debug.Log (ServerData.parse_rewardgamecost);
//				Debug.Log (ServerData.parse_rewardcomposeticket);
//				Debug.Log (ServerData.parse_rewardpromoteticket);
//				Debug.Log (ServerData.parse_rewardgeneralstem);
//				Debug.Log (ServerData.parse_rewardepicstem);
//				Debug.Log ("ItemCode");
				
				ServerData.zcpchance = parser.getInt ( "zcpchance" );

				//지급받은 일반, 좋은세포.
				ServerData.Clear_ListUserItemData ();
				ServerData.Clear_Result_Item();
				parser.parsing(_xml, "itemowner");
				while(parser.next())
				{
					int _itemCode = parser.getInt("itemcode");
					ServerData.PushUserITemData (parser.getInt("listidx") ,
					                             parser.getInt("invenkind") ,
					                             parser.getInt("fieldidx"),
					                             _itemCode,
					                             parser.getInt("cnt"),
					                             parser.getInt("anistep"),
					                             parser.getInt("manger"),
					                             parser.getInt("diseasestate"),
					                             parser.getInt("acc1"),
					                             parser.getInt("acc2"),
					                             parser.getInt("petupgrade"),
					                             parser.getInt("treasureupgrade"),
					                             parser.getInt("needhelpcnt"),
					                             parser.getString("randserial"),
					                             parser.getInt("upcnt"),			//세포 누적횟수.
					                             parser.getInt("upstepmax"),		//세포 누적Max.  iteminfo.xml의 upstepmax는 사용하지 마세요.
					                             parser.getInt("freshstem100"),		//세포로 늘어난 신선도.
					                             parser.getInt("attstem100"),		//공격력.
					                             parser.getInt("defstem100"),		//방어력.
					                             parser.getInt("hpstem100"),		//HP.
					                             parser.getInt("timestem100"),		//줄어든 시간
							parser.getInt("expirekind"),		//** 만기템(1), 만기아님(-1).
							parser.getString("expiredate")
					                             );

					//Debug.Log (_itemCode);
					ServerData.Parser_Result_Item_Add(_itemCode);
				}
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBBOXOPENCASH > error > 아이디를 확인해라.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBBOXOPENCASH > 지원하지 않는 모드입니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_BOX:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBBOXOPENCASH > error > 요청하신 슬롯에 박스가 존재하지 않습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_INVEN_FULL:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBBOXOPENCASH > error > 인벤이 풀입니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_OPERATE_OTHER_BOX:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBBOXOPENCASH > error > 다른 슬롯이 작동중입니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CASHCOST_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBBOXOPENCASH > error > 캐쉬가 부족합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_TIME_REMAIN:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBBOXOPENCASH > error > 시간이 남았습니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBBOXOPENCASH > error > not found error");
				#endif
				break;
			}
		}
			break;

		case Protocol.PTS_UBSEARCH:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_UBSEARCH _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode)
			{
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBSEARCH > success");
				#endif

				//유저배틀 로고 번호 -> 끝나고 보내줘야함.
				ServerData.parse_userbattleidx2 = parser.getInt("userbattleidx2");
				
				//상대방정보.
				parser.parsing(_xml, "rivaluser");
				if(parser.next())
				{
					//상대방 일반정보.
					ServerData.userbattle_kakaonickname = 	parser.getString("kakaonickname");
					ServerData.userbattle_trophy = parser.getInt("trophy");
					ServerData.userbattle_tier = parser.getInt("tier");
					
					//동물1.
					//-1이면 없음 그외는 동물 아이템코드.
					//강화횟수 -> upstep, upstepmax는 iteminfo에서 찾으시면 됩니다.
					//세포강화된 정보(오리지날 정보 그대로 넣어둠)
					ServerData.Clear_UserRivalAnimalDataList();
					ServerData.Parser_UserRivalAnimalData_Add(parser.getInt("aniitemcode1"), parser.getInt("upcnt1"), parser.getInt("attstem1"), 
					                                          parser.getInt("defstem1"), parser.getInt("hpstem1"), parser.getInt("timestem1"));

					ServerData.Parser_UserRivalAnimalData_Add(parser.getInt("aniitemcode2"), parser.getInt("upcnt2"), parser.getInt("attstem2"), 
					                                          parser.getInt("defstem2"), parser.getInt("hpstem2"), parser.getInt("timestem2"));

					ServerData.Parser_UserRivalAnimalData_Add(parser.getInt("aniitemcode3"), parser.getInt("upcnt3"), parser.getInt("attstem3"), 
					                                          parser.getInt("defstem3"), parser.getInt("hpstem3"), parser.getInt("timestem3"));

					//보물1 ~ 5.
												//-1이면 없음 그외는 보물 아이템코드.
					RivalTreasureAbility.SetZeroValue();
					RivalTreasureAbility.ApplySkill(parser.getInt("treasure1"), parser.getInt("treasureupgrade1"));
					RivalTreasureAbility.ApplySkill(parser.getInt("treasure2"), parser.getInt("treasureupgrade2"));
					RivalTreasureAbility.ApplySkill(parser.getInt("treasure3"), parser.getInt("treasureupgrade3"));
					RivalTreasureAbility.ApplySkill(parser.getInt("treasure4"), parser.getInt("treasureupgrade4"));
					RivalTreasureAbility.ApplySkill(parser.getInt("treasure5"), parser.getInt("treasureupgrade5"));
				}
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBSEARCH > error > 아이디를 확인해라 > 다시 로그인.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBSEARCH > error > not found error");
				#endif
				break;
			}
		}
			break;

		case Protocol.PTS_UBRESULT:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_UBRESULT _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode)
			{
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBRESULT > success");
				#endif
				
				//-------------------------------------------------------
				//보상받은 상자.
				// > 빈곳이 있어 받으면 상자아이템 코드 번호가 들어감.
				//-------------------------------------------------------

				ServerData.psrser_battleResultRewardlist.Clear();
				ServerData.AddBattleResultReward(parser.getInt("rewardbox"));
				//보상받은 상자.	-> 출력해줌.
				ServerData.gettrophy = parser.getInt("gettrophy");	//획득한 트로피.	-> 출력해줌.
				ServerData.userbattle_trophy = parser.getInt("trophy");	//승패에 따른 트로피.
				ServerData.userbattle_tier = parser.getInt("tier");		//승패에 따른 tier.
				
				//-------------------------------------------------------
				//각슬롯의 정보들.
				// > 빈곳에 채워진 상태로 전송됨.
				//-------------------------------------------------------
				ServerData.parser_boxslot1 = parser.getInt("boxslot1");
				ServerData.parser_boxslot2 = parser.getInt("boxslot2");
				ServerData.parser_boxslot3 = parser.getInt("boxslot3");
				ServerData.parser_boxslot4 = parser.getInt("boxslot4");
				ServerData.UpdateBattleBox();

				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBRESULT > error > 아이디를 확인해라 > 다시 로그인.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_UBRESULT > error > not found error");
				#endif
				break;
			}
		}
			break;

		case Protocol.PTS_WHEEL:
			{
				#if NET_DEBUG_MODE
				Debug.Log("[C <- S] PTS_WHEEL _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
				#endif

				switch(_resultcode)
				{
				case Protocol.RESULT_SUCCESS:
					#if NET_DEBUG_MODE
					Debug.Log("PTS_WHEEL > success");
					#endif

					//1. 인벤정보들이 온다.
					ServerData.parser_cashcost = parser.getInt("cashcost");			//변경된 금액.
					ServerData.parser_gamecostA = parser.getInt("gamecost");

					//2. 뽑은 룰렛 정보.
					ServerData.rewardidx = parser.getInt("rewardidx");			//뽑은 번호 -> 처음 로그인한 번호임.
					ServerData.rewarditemcode = parser.getInt("rewarditemcode");	//템과 수량.
					ServerData.rewardcnt = parser.getInt("rewardcnt");

					//3. 무료, 황금룰렛 이벤트진행 정보..
					ServerData.wheeltodaycnt = parser.getInt("wheeltodaycnt");	//무료룰렛 		: 안돌림(0), 돌림(1) 즉 돌린 횟수를 서버에서 카운터 합니다. 다음날이 되면 무조건 초기화되고요.
					ServerData.wheelgauage = parser.getInt("wheelgauage");	//황금룰렛 		: 게이지 이벤트를 진행중이면 현재의 게이지.
					ServerData.wheelfree = parser.getInt("wheelfree");		//황금룰렛무료 	: 게이지가 풀이되면 1개가 들어옴. -> 없음(0), 있음(1)

					//4. 황금룰렛 세팅정보.
					ServerData.wheelgauageflag = parser.getInt("wheelgauageflag");	//이벤트 활성화 정보.
					ServerData.wheelgauagepoint = parser.getInt("wheelgauagepoint");	//1회당 올라가는 포인트.
					ServerData.wheelgauagemax = parser.getInt("wheelgauagemax");	//max가 되면 1회 무료로 돌릴수 있음(wheel free 1은 1회 황금룰렛무료라는 뜻)

					ServerData.rkstartstate = parser.getInt("rkstartstate");	//참여중(1), 미참여(0)
					ServerData.rkteam = parser.getInt("rkteam");		//팀정보 청(1), 백(0)


					ReadGiftData ( _xml, "giftitem" , parser );	

					ReadWheelFreeInfo(_xml, "wheelfreeinfo", parser);
					ReadWheelCashInfo(_xml, "wheelcashinfo", parser);

//					//무료룰렛판 정보(항상 8개).
//					parser.parsing(_xml, "wheelfreeinfo");
//					while(parser.next()){
//						parser.getInt("idx");			//룰렛 고유 인덱스 번호. 나중에 룰렛을 돌리고 난다음에 이번호가 온다.
//						parser.getInt("itemcode");		//지급 아이템 코드번호.
//						parser.getInt("cnt");			//지급 아이템 수량.
//					}
//
//
//					//무료룰렛판 정보(항상 8개).
//					parser.parsing(_xml, "wheelcashinfo");
//					while(parser.next()){
//						parser.getInt("idx");			//룰렛 고유 인덱스 번호. 나중에 룰렛을 돌리고 난다음에 이번호가 온다.
//						parser.getInt("itemcode");		//지급 아이템 코드번호.
//						parser.getInt("cnt");			//지급 아이템 수량.
//					}
					break;
				case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
					#if NET_DEBUG_MODE
					Debug.Log("PTS_WHEEL > error > 아이디를 확인해라 > 다시 로그인.");
					#endif
					break;
				case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
					#if NET_DEBUG_MODE
					Debug.Log("PTS_WHEEL > error > 지원하지 않는 모드입니다.");
					#endif
					break;
				case Protocol.RESULT_ERROR_DAILY_REWARD_ALREADY:
					#if NET_DEBUG_MODE
					Debug.Log("PTS_WHEEL > error > 1일1회 무료회전판을 2번이상 돌림");
					#endif
					break;
				case Protocol.RESULT_ERROR_NOT_MATCH:
					#if NET_DEBUG_MODE
					Debug.Log("PTS_WHEEL > error > 황금룰렛의 캐쉬가 불일치합니다.");
					#endif
					break;
				case Protocol.RESULT_ERROR_CASHCOST_LACK:
					#if NET_DEBUG_MODE
					Debug.Log("PTS_WHEEL > error > 황금룰렛의 캐쉬가 부족합니다.");
					#endif
					break;
				default:
					#if NET_DEBUG_MODE
					Debug.Log("PTS_WHEEL > error > not found error");
					#endif
					break;
				}
			}
			break;

		case Protocol.PTS_ZCPCHANCE:
			{
				#if NET_DEBUG_MODE
				Debug.Log("[C <- S] PTS_ZCPCHANCE _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
				#endif

				switch(_resultcode)
				{
				case Protocol.RESULT_SUCCESS:
					#if NET_DEBUG_MODE
					Debug.Log("PTS_ZCPCHANCE > success");
					#endif

					//1. 인벤정보들이 온다.
					ServerData.parser_cashcost = parser.getInt("cashcost");			//변경된 금액.
					ServerData.parser_gamecostA = parser.getInt("gamecost");

					//2. 뽑은 룰렛 정보.
					ServerData.rewardidx = parser.getInt("rewardidx");				//뽑은 번호 -> 처음 로그인한 번호임.
					ServerData.rewarditemcode = parser.getInt("rewarditemcode");	//템과 수량.
					ServerData.rewardcnt = parser.getInt("rewardcnt");

					//3. 받은 아이템개수. (유저인벤에 바로 들어감.)
					// -> 조각은 99개 넘으면 수량이 줄어들고.
					//    짜요쿠폰은 1개 늘어나서 그래서 2개 이상이 올수 있다.
					parser.parsing(_xml, "itemowner");
					ServerData.Clear_ListUserItemData ();
					while(parser.next()){
						ServerData.PushUserITemData ( 	parser.getInt("listidx") ,
							parser.getInt("invenkind") ,
							parser.getInt("fieldidx"),
							parser.getInt("itemcode"),
							parser.getInt("cnt"),
							parser.getInt("anistep"),
							parser.getInt("manger"),
							parser.getInt("diseasestate"),
							parser.getInt("acc1"),
							parser.getInt("acc2"),
							parser.getInt("petupgrade"),
							parser.getInt("treasureupgrade"),
							parser.getInt("needhelpcnt"),
							parser.getString("randserial"),
							parser.getInt("upcnt"),			//세포 누적횟수.
							parser.getInt("upstepmax"),		//세포 누적Max.  iteminfo.xml의 upstepmax는 사용하지 마세요.
							parser.getInt("freshstem100"),		//세포로 늘어난 신선도.
							parser.getInt("attstem100"),		//공격력.
							parser.getInt("defstem100"),		//방어력.
							parser.getInt("hpstem100"),		//HP.
							parser.getInt("timestem100"),		//줄어든 시간
							parser.getInt("expirekind"),		//** 만기템(1), 만기아님(-1).
							parser.getString("expiredate")		//** 만기템에만 해당함. <- 짜요쿠폰에만 이것이 설정되어 올것임.
						);

					}

					break;
				default:
					#if NET_DEBUG_MODE
					Debug.Log("PTS_ZCPCHANCE > error > not found error");
					#endif
					break;
				}
			}
			break;

		case Protocol.PTS_ZCPBUY:
			{
				#if NET_DEBUG_MODE
				Debug.Log("[C <- S] PTS_ZCPBUY _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
				#endif

				switch(_resultcode)
				{
				case Protocol.RESULT_SUCCESS:
					#if NET_DEBUG_MODE
					Debug.Log("PTS_ZCPBUY > success");
					#endif

					//삭제리스트.
					ServerData.ClearDeleteItemList();
					parser.parsing(_xml, "itemdellist");
					while(parser.next()){
						//구매 or 만기되어서 삭제된 짜요쿠폰 listidx번호.
						ServerData.AddDeleteItem(parser.getInt("listidx"));
					}

					//쪽지정보.
					ReadGiftData ( _xml , "giftitem" , parser );
					//짜요마켓아이템등록.
					ReadZzayoMarketItems(_xml, "zcpmarket", parser);

					break;
				default:
					#if NET_DEBUG_MODE
					Debug.Log("PTS_ZCPBUY > error > not found error");
					#endif
					break;
				}
			}
			break;

		case Protocol.PTS_RKRANK:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_RKRANK _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode)
			{
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_RKRANK > success");
				#endif
				
				//유저 정보.
				parser.parsing(_xml, "userinfo");
				if(parser.next())
				{
					ServerData.rkstartstate = parser.getInt("rkstartstate");	//참여중(1), 미참여(0)
					ServerData.rkteam = parser.getInt("rkteam");		//팀정보 청(1), 백(0)
					
					//3-1. 내가 팀에 기여한 기여도.
					ServerData.AddRkData("Player", 
										parser.getInt64("rksalemoney"),		//내가 기여한 기도 1요소.
										parser.getInt64("rksalebarrel"),	//
										parser.getInt64("rkbattlecnt"),		//
										parser.getInt64("rkbogicnt"),		//
										parser.getInt64("rkfriendpoint"),	//
										parser.getInt64("rkroulettecnt"),	//
								    	parser.getInt64("rkwolfcnt"));		//
				}
				
				//6 현재 랭킹대전 정보..
				parser.parsing(_xml, "rkcurrank");
				if ( parser.next () )
				{
					ServerData.rkCurDate = parser.getString ( "rkdateid8" );	//날짜.
					
					//청팀.
					ServerData.AddRkData("CurBlue", 
					                     parser.getInt64 ( "rksalemoney" ),	//1번 점수.
					                     parser.getInt64 ( "rksalebarrel" ),	//2번 점수.
					                     parser.getInt64 ( "rkbattlecnt" ),	//3번 점수.
					                     parser.getInt64 ( "rkbogicnt" ),	//4번 점수.
					                     parser.getInt64 ( "rkfriendpoint" ),//5번 점수.
					                     parser.getInt64 ( "rkroulettecnt" ),//6번 점수.
					                     parser.getInt64 ( "rkwolfcnt" ));	//7번 점수.
					
					//백팀.
					ServerData.AddRkData("CurWhite", 
					                     parser.getInt64 ( "rksalemoney2" ),	//1번 점수.
					                     parser.getInt64 ( "rksalebarrel2" ),//2번 점수.
					                     parser.getInt64 ( "rkbattlecnt2" ),	//3번 점수.
					                     parser.getInt64 ( "rkbogicnt2" ),	//4번 점수.
					                     parser.getInt64 ( "rkfriendpoint2" ),//5번 점수.
					                     parser.getInt64 ( "rkroulettecnt2" ),//6번 점수.
					                     parser.getInt64 ( "rkwolfcnt2" ));	//7번 점수.
				}
				
				//7. 지난회차 랭킹대전 정보..
				parser.parsing(_xml, "rklaterank");
				if ( parser.next () )
				{
					ServerData.rkLateDate = parser.getString ( "rkdateid8" );	//날짜.				
					
					//청팀.
					ServerData.AddRkData("LateBlue", 
					                     parser.getInt64 ( "rksalemoney" ),	//1번 점수.
					                     parser.getInt64 ( "rksalebarrel" ),	//2번 점수.
					                     parser.getInt64 ( "rkbattlecnt" ),	//3번 점수.
					                     parser.getInt64 ( "rkbogicnt" ),	//4번 점수.
					                     parser.getInt64 ( "rkfriendpoint" ),//5번 점수.
					                     parser.getInt64 ( "rkroulettecnt" ),//6번 점수.
					                     parser.getInt64 ( "rkwolfcnt" ));	//7번 점수.
					
					//백팀.
					ServerData.AddRkData("LateWhite", 
					                     parser.getInt64 ( "rksalemoney2" ),	//1번 점수.
					                     parser.getInt64 ( "rksalebarrel2" ),//2번 점수.
					                     parser.getInt64 ( "rkbattlecnt2" ),	//3번 점수.
					                     parser.getInt64 ( "rkbogicnt2" ),	//4번 점수.
					                     parser.getInt64 ( "rkfriendpoint2" ),//5번 점수.
					                     parser.getInt64 ( "rkroulettecnt2" ),//6번 점수.
					                     parser.getInt64 ( "rkwolfcnt2" ));	//7번 점수.
				}
				
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_RKRANK > error > not found error");
				#endif
				break;
			}
		}
			break;

		case Protocol.PTS_ANIBATTLESTART:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ANIBATTLESTART _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode)
			{
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIBATTLESTART > success");
				#endif
				ServerData.InitGoldCashHeartFeedGoldTicketBattleTicket(parser.getInt("gamecost"), 
				                                                             parser.getInt("cashcost"), 
				                                                             parser.getInt("heart"), 
				                                                             parser.getInt("feed"), 
				                                                             parser.getInt("goldticket"), 
				                                                             parser.getInt("battleticket")
				                                                             );

				ServerData.parser_goldtickettime = DateTime.Parse ( parser.getString("goldtickettime") );	//골드티켓 time (10분에 1개씩 차오름, max 이상 안오름).	
				ServerData.parser_battletickettime = DateTime.Parse ( parser.getString("battletickettime") );//싸움티켓 time (10분에 1개씩 차오름, max 이상 안오름).	
				
				GameData.Max_GoldTicket		= parser.getInt("goldticketmax");//골드티켓 max.	

				GameData.Max_BattleTicket	= parser.getInt("battleticketmax");	//싸움티켓 max.	

				           
				ServerData.parser_battleidx2 = parser.getInt("battleidx2");	//배틀이 끝나면 전송해줘야하는 코드입니다.

				//@@@@ start 0081
				//상대 동물의 정보.
				ServerData.SetEnemyInfo(
					parser.getInt("enemyani"),
					parser.getInt("enemylv"), 
					parser.getInt("enemycnt"),
					parser.getInt("stagecnt"), 
					parser.getInt("enemyboss")
					);
				//@@@@ end

				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIBATTLESTART > error > 아이디를 확인해라 > 다시 로그인.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_USERFARM:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIBATTLESTART > 농장을 소유하고 있지 않다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_INVEN_FULL:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIBATTLESTART > error > 인벤토리가 가득찻습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_CLEAR_BEFORE_FARM:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIBATTLESTART > error > 전목장을 클리어하셔야합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_TICKET_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIBATTLESTART > error > 티켓 수량이 부족합니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIBATTLESTART > error > not found error");
				#endif
				break;
			}
		}
			break;

		case Protocol.PTS_ANIBATTLEPLAYCNTBUY:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ANIBATTLEPLAYCNTBUY _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode)
			{
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIBATTLEPLAYCNTBUY > success");
				#endif
				
				//cashcost, gamecost 두개만 업데이트.
				ReadMoneyBase ( parser );
				
				//목장정보갱신.
				ReadContryFarm ( _xml , "myfarm" , parser );
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIBATTLEPLAYCNTBUY > error > 아이디를 확인해라 > 다시 로그인.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_USERFARM:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIBATTLEPLAYCNTBUY > 농장을 소유하고 있지 않다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CASHCOST_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("RESULT_ERROR_CASHCOST_LACK > error > 캐쉬가 부족합니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIBATTLEPLAYCNTBUY > error > not found error");
				#endif
				break;
			}
		}
			break;

		case Protocol.PTS_ANIBATTLERESULT:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ANIBATTLERESULT _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode)
			{
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIBATTLERESULT > success");
				#endif
				
				ServerData.InitGoldCashHeartFeedGoldTicketBattleTicket(parser.getInt("gamecost"), 
				                                                       parser.getInt("cashcost"), 
				                                                       parser.getInt("heart"), 
				                                                       parser.getInt("feed"), 
				                                                       parser.getInt("goldticket"), 
				                                                       parser.getInt("battleticket")
				                                                       );
				
				//ServerData.parser_goldtickettime = DateTime.Parse ( parser.getString("goldtickettime") );	//골드티켓 time (10분에 1개씩 차오름, max 이상 안오름).	
				//ServerData.parser_battletickettime = DateTime.Parse ( parser.getString("battletickettime") );//싸움티켓 time (10분에 1개씩 차오름, max 이상 안오름).	
				
				GameData.Max_GoldTicket		= parser.getInt("goldticketmax");//골드티켓 max.	
				GameData.Max_BattleTicket	= parser.getInt("battleticketmax");	//싸움티켓 max.	

				
				//배틀로 지급받은템(모두 각 1개씩만 지급됨).
				ServerData.psrser_battleResultRewardlist.Clear();
				ServerData.AddBattleResultReward(parser.getInt("reward1"));	//처음 지급받은 아이템코드(줄기세포 1개).
				ServerData.AddBattleResultReward(parser.getInt("reward2"));	//              아이템코드(줄기세포 1개).
	            ServerData.AddBattleResultReward(parser.getInt("reward3"));	//              아이템코드(줄기세포 1개).
	            ServerData.AddBattleResultReward(parser.getInt("reward4"));	//              아이템코드(줄기세포 1개).
	            ServerData.AddBattleResultReward(parser.getInt("reward5"));	//만약 지급이되면 골드티켓 코드번호가 와요.
				ServerData.parser_battleResultGold = parser.getInt("rewardgamecost");//보상상골드[얼마나 받게 는지 표시.];

				ServerData.parser_battleTotalStar = parser.getInt("totalstar");	//우선 받아두세요.(전체 획득한 별의 수량)
				//Debug.Log ("ServerData.parser_battleTotalStar : " + ServerData.parser_battleTotalStar);
				//위의 것들의 리스트인덱스를 통해서 결과창에 획득한 아이템을 뿌려준다.
				
				//2. 획득한 템들을 > 직접 알려줌(줄기세포만 들어가는 것임).
				//   만약 위의 받은 수량만큼 옴.
				//   로그인하고 동일한 형태임.
				//   두번 반복해서 보내면 아래의 리스트가 없을수 있음(중복 지급을 안에서 처리해줌).

				//유저인벤에 바로 들어감.
				ServerData.Clear_ListUserItemData ();
				//Debug.Log ("ServerData.Clear_ListUserItemData ();");
				parser.parsing(_xml, "itemowner");
				while(parser.next())
				{
					//Debug.Log ("ServerData.Clear_ListUserItemData (); - 2");
					ServerData.PushUserITemData ( 	parser.getInt("listidx") ,
					                             parser.getInt("invenkind") ,
					                             parser.getInt("fieldidx"),
					                             parser.getInt("itemcode"),
					                             parser.getInt("cnt"),
					                             parser.getInt("anistep"),
					                             parser.getInt("manger"),
					                             parser.getInt("diseasestate"),
					                             parser.getInt("acc1"),
					                             parser.getInt("acc2"),
					                             parser.getInt("petupgrade"),
					                             parser.getInt("treasureupgrade"),
					                             parser.getInt("needhelpcnt"),
					                             parser.getString("randserial")
					                             );
				}
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIBATTLERESULT > error > 아이디를 확인해라 > 다시 로그인.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIBATTLERESULT > error > not found error");
				#endif
				break;
			}
		}
			break;

		case Protocol.PTS_KFHELPLIST:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_KFHELPLIST _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_KFHELPLIST > 도움 요청리스트");
				#endif
				
				//유저 친구정보.
				ReadListWhoNeedMyHelp ( _xml , "userfriend" , parser );
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_KFHELPLIST > 아이디가 존재하지 않는다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_KFHELPLIST > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_KFRESET:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_KFRESET _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구추가 > 성공.");
				#endif
				
				//결과.
				parser.parsing(_xml, "flist");
				while(parser.next()){
					parser.getString("friendid");	//내친구아이디.
					parser.getInt("itemcode");		//대표동물 아이템코드.
					parser.getInt("acc1");			//머리 악세.
					parser.getInt("acc2");			//등, 옆구리 악세.
					parser.getString("senddate");	//하트선물 보낸날짜.
					parser.getInt("state");			//친구의 수락, 신청 상태.
					//친구신청대기 			Protocol.USERFRIEND_STATE_PROPOSE_WAIT
					//친구수락대기			Protocol.USERFRIEND_STATE_APPROVE_WAIT
					//상호친구				Protocol.USERFRIEND_STATE_FRIEND
					
					parser.getString("kakaotalkid");	//카톡 talkid(유일한 식별값 > 이걸로 친구를 찾음.)		"BElyGxtySQQ"
					parser.getString("kakaouserid");	//카톡 userid(보이는 용도)							"91188455545412240"
					parser.getString("kakaonickname");	//카톡 닉네임(유저가 변경한 이름)						"mynickname"
					SSUtil.DecryptString((""));	//카톡 이미지(URL)									"" or "http://xxx"
					parser.getString("kakaomsgblocked");//카톡 메세지 거절		KakaoProtocol.KAKAO_MESSAGE_BLOCKED_TRUE
					//	   메세지 수락		KakaoProtocol.KAKAO_MESSAGE_BLOCKED_FALSE
					parser.getString("kakaofriendkind");//카톡 친구들(talkid -> 친구를 찾음)
					//게임친구 > 메세지(X)	KakaoProtocol.KAKAO_FRIEND_KIND_GAME
					//카톡친구 > 메세지(O)	KakaoProtocol.KAKAO_FRIEND_KIND_KAKAO
					//////////////////////////////////////////////////////////
					// 게임친구에게는 카톡 메세지를 절대로 보내지 말아야한다.
					//////////////////////////////////////////////////////////
					parser.getString("helpdate");		//각 친구들 도와줘 요청한 시간.
					parser.getString("rentdate");		//대여 시간.
					
				}
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구추가 실패. > 내아이디를 찾을 수 없습니다. > 팝업처리.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구추가 실패. > 팝업처리.");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_ROULACC:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ROULACC _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ROULACC > success");
				#endif
				
				//1. 변경된 것들.
				ReadMoneyBase ( parser );
				//parser.getInt("gamecost");		//게임머니.
				//parser.getInt("cashcost");		//캐쉬.
				//parser.getInt("heart");			//하트.
				//parser.getInt("feed");			//건초.
				//parser.getInt("fpoint");		//우정포인트.
				
				//2. 뽑은 아이템들(디스플레이 > 상세 정보는 선물 리스트에 존재).
				ServerData.parser_roulAcc_01 = parser.getInt("itemcode1");
				ServerData.parser_roulAcc_02 = parser.getInt("itemcode2");
				ServerData.parser_roulAcc_03 = parser.getInt("itemcode3");
				ServerData.parser_roulAcc_04 = parser.getInt("itemcode4");
				ServerData.parser_roulAcc_05 = parser.getInt("itemcode5");
				
				ReadGiftData ( _xml , "giftitem" , parser );
				//3. 선물 리스트.
				
				//parser.parsing(_xml, "giftitem");
				//while(parser.next()){
				//	parser.getInt("idx");			//내부 고유번호.
				//	parser.getInt("giftkind");		//선물종류.
				//	//Protocol.GIFTLIST_GIFT_KIND_MESSAGE	> 메세지 > 확인 > 삭제.
				//	//Protocol.GIFTLIST_GIFT_KIND_GIFT		> 아이템 > 확인 > 선물함 -> 인벤으로 이동후 삭제됨.
				//
				//	parser.getInt("itemcode");		//선물 아이템코드.
				//	parser.getString("giftdate");	//선물 받은 일자.
				//	parser.getString("giftid");		//선물 해준 아이디.
				//	parser.getString("message");	//메세지.
				//}
				
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ROULACC > error > 아이디를 확인해라.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CASHCOST_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ROULACC > error > 캐쉬가 부족합니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ROULACC > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_ANIRESTORE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ANIRESTORE _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIRESTORE > success");
				#endif
				ServerData.parser_gamecostA = parser.getInt("gamecost");	//게임머니.
				ServerData.parser_cashcost = parser.getInt("cashcost");		//캐쉬.
				
				ReadServerUserItemData ( _xml , "aniowner" , parser );
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIRESTORE > 아이디가 존재하지 않는다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_ANIMAL_IS_ALIVE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIRESTORE > 동물이 살아있다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIRESTORE > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_KFHELP:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_KFHELP _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_KFHELP > 친구에게 도와줘를 요청했습니다");
				#endif
				
				
				//유저 친구정보.
				ReadFriendList ( _xml ,  "userfriend"  , parser );
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_KFHELP > 아이디가 존재하지 않는다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_TIME_REMAIN:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_KFHELP > 시간이 남아있습니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_KFHELP > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_KFINVITE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_KFINVITE _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구추가 > 성공.");
				#endif
				
				ReadFeed_Heart ( parser );					
				
				
				//parser.getString("kakaomsginvitetodaydate");	//1일 초대 인원수 초기화 날짜.(표시안해되됨)
				Ui_TopMenu_KaKao_Invite.kakaoInviteTotalCnt = parser.getInt("kakaomsginvitecnt");
				Ui_TopMenu_KaKao_Invite.kakaoInviteTodayCnt = parser.getInt("kakaomsginvitetodaycnt");		//1일 초대 인원수.
				
				ReadInviteInfo ( _xml , "kakaoinvite" , parser );
				
				ReadGiftData ( _xml , "giftitem" , parser );
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 아이디가 존재하지 않는다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_TIME_REMAIN:
				#if NET_DEBUG_MODE
				Debug.Log(" > 시간이 남아있습니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log(" > 기타오류.");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_KFADD:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_KFADD _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구추가 > 성공.");
				#endif
				
				//결과.
				ReadFriendList ( _xml, "flist" , parser );
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구추가 실패. > 내아이디를 찾을 수 없습니다. > 팝업처리.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구추가 실패. > 팝업처리.");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_KCHECKNN:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_KCHECKNN _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_KCHECKNN > success");
				#endif
				
				ReadMoneyBase ( parser );
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_KCHECKNN > error > 아이디가 존재하지 않는다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CANNOT_USED_NICKNAME:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_KCHECKNN > error > 닉네임을 다른 사람이 사용중입니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CASHCOST_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_KCHECKNN > error > 캐쉬가 부족합니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_KCHECKNN > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_NEWSTART:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_NEWSTART _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode)
			{
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log(" > 아이디삭제 > 성공.");
				#endif
				strCreateID = "";
				strCreatePW = "";
				
				//PlayerPrefs.SetString("DBB_ID", strCreateID);
				//PlayerPrefs.SetString("DBB_PW", strCreatePW);
				
				SaveDataOnMobile.SaveId ( strCreateID );
				SaveDataOnMobile.SavePw ( strCreatePW );
				PlayerPrefs.Save();
				//Debug.Log ("PlayerPrefs.Save();, RESULT_SUCCESS");
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 아이디를 찾을 수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR:
				#if NET_DEBUG_MODE
				Debug.Log(" > 알수 없는 오류가 발생했습니다.");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_SYSINQUIRE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_SYSINQUIRE _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log(" > 게임 문의를 등록했습니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log(" > 팝업처리.");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_TUTOSTEP:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_TUTOSTEP _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TUTOSTEP > success");
				#endif
				
				//유저 정보.
				parser.parsing(_xml, "userinfo");
				if(parser.next()){
					
					ServerData.parser_rewardKind = parser.getInt("rewardkind");		//보상종류(경쟁모드와 동일).
					ServerData.parser_rewardValue = parser.getInt("rewardvalue");	//보상값.
					
					ReadMoneyBase ( parser );
					ReadFeed_Heart ( parser );					
					
					ServerData.parser_FPoint = parser.getInt("fpoint");			//우정포인트(110 > 1개, 10포인트)로 표현함.
				}
				
				ReadGiftData ( _xml, "giftitem" , parser );
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TUTOSTEP > error > 아이디가 존재하지 않는다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TUTOSTEP > error > 튜토리얼 번호가 없다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_TUTORIAL_ALREADY:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TUTOSTEP > error > 이미 지급했다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TUTOSTEP > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_CERTNO:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_CERTNO _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CERTNO > success");
				#endif
				
				//3. 선물 리스트.
				ReadGiftData ( _xml , "giftitem" , parser );
				
				/*
					parser.parsing(_xml, "giftitem");
					while(parser.next()){
						parser.getInt("idx");			//내부 고유번호.
						parser.getInt("giftkind");		//선물종류.
						//Protocol.GIFTLIST_GIFT_KIND_MESSAGE	> 메세지 > 확인 > 삭제.
						//Protocol.GIFTLIST_GIFT_KIND_GIFT		> 아이템 > 확인 > 선물함 -> 인벤으로 이동후 삭제됨.

						parser.getInt("itemcode");		//선물 아이템코드.
						parser.getString("giftdate");	//선물 받은 일자.
						parser.getString("giftid");		//선물 해준 아이디.
						parser.getString("message");	//메세지.
					}
				*/
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CERTNO > error > 아이디를 확인해라.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_CERTNO:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CERTNO > error > 인증번호가 존재안합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_ALREADY_REWARD_COUPON:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CERTNO > error > 쿠폰은 1인 1매.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CERTNO > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_AGREEMENT:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_AGREEMENT _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_AGREEMENT > success:" + parser.getString("serial"));
				#endif
				
				Ui_ReadMe.msgReadMeGamePlay = parser.getString("resultagreement");
				Ui_ReadMe.msgReadMeSms = parser.getString("resultsms");
				
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_AGREEMENT > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_PETTODAY:
		case Protocol.PTS_PETROLL:
		case Protocol.PTS_PETUPGRADE:
		case Protocol.PTS_PETWEAR:
		case Protocol.PTS_PETEXP:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_PETTODAY, PTS_PETROLL, PTS_PETUPGRADE, PTS_PETWEAR _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PETTODAY > success");
				#endif
				
				//1. 지급된 것들.
				parser.parsing(_xml, "userinfo");
				if(parser.next()){						
					ServerData.parser_cashcost = parser.getInt("cashcost");				//변경된 금액.
					ServerData.parser_gamecostA = parser.getInt("gamecost");	
					//parser.getInt("heart");		//하트.
					//parser.getInt("feed");		//건초.
					//parser.getInt("fpoint");		//우정포인트.
					
					//parser.getInt("petlistidx");	//장착한 펫리스트번호.
					//parser.getInt("petcooltime");	//쿨타임.
					//parser.getInt("pettodayitemcode");//오늘만 판매의 펫코드.
					ReadPetInfo ( parser );
				}
				
				//2. 오늘만 구매한펫.
				//int _invenkind;
				//int _fieldidx;
				ServerData.parser_userItemData = null;
				
				parser.parsing(_xml, "itemowner");				
				if ( parser.next() )
				{
					ReadServerItemData ( out ServerData.parser_userItemData , parser );	
				}
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PETTODAY, PTS_PETROLL, PTS_PETUPGRADE, PTS_PETWEAR > error > 아이디를 확인해라.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PETTODAY, PTS_PETROLL, PTS_PETUPGRADE, PTS_PETWEAR > error > 지원하지 않는 모드입니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PETTODAY, PTS_PETROLL, PTS_PETUPGRADE, PTS_PETWEAR > error > 아이템을 찾을수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CASHCOST_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PETTODAY, PTS_PETROLL, PTS_PETUPGRADE, PTS_PETWEAR > error > 캐쉬가 부족합니다.");
				#endif
				break;					
			case Protocol.RESULT_ERROR_GAMECOST_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PETTODAY, PTS_PETROLL, PTS_PETUPGRADE, PTS_PETWEAR > error > 코인이 부족합니다.");
				#endif
				break;			
			case Protocol.RESULT_ERROR_LISTIDX_NOT_FOUND:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PETTODAY, PTS_PETROLL, PTS_PETUPGRADE, PTS_PETWEAR > error > 아이템 리스트 번호가 존재하지 않습니다.");
				#endif
				break;		
			case Protocol.RESULT_ERROR_NO_MORE_PET:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PETTODAY, PTS_PETROLL, PTS_PETUPGRADE, PTS_PETWEAR > error > 더이상 펫이 없습니다.");
				#endif
				break;	
			case Protocol.RESULT_ERROR_UPGRADE_FULL:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PETTODAY, PTS_PETROLL, PTS_PETUPGRADE, PTS_PETWEAR > error > 업그레이드가 풀입니다.");
				#endif
				break;			
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PETTODAY, PTS_PETROLL, PTS_PETUPGRADE, PTS_PETWEAR > error > not found error");
				#endif
				break;					
			}
		}
			break;
		case Protocol.PTS_SCHOOLUSERTOP:
		{
			Ui_Debug.SetText ( "parse ok" );
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_SCHOOLUSERTOP _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				Ui_Debug.SetText ( "in success" );
				#if NET_DEBUG_MODE
				Debug.Log(" > 학교랭킹 > 성공.");
				#endif
				
				ReadSchoolUserTop ( _xml , "schoolusertop" , parser );	
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 학교랭킹. > 아이디를 찾을수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log(" > 학교랭킹. > 지원하지 않는 모드입니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log(" > 학교랭킹. > 팝업처리.");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_SCHOOLTOP:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_SCHOOLTOP _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log(" > 학교랭킹 > 성공.");
				#endif
				
				ReadSchoolRanking ( _xml , "schooltop" , parser );					
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 학교랭킹. > 아이디를 찾을수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log(" > 학교랭킹. > 지원하지 않는 모드입니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log(" > 학교랭킹. > 팝업처리.");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_SCHOOLJOIN:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_SCHOOLJOIN _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				parser.parsing(_xml, "schoolinfo");
				if ( parser.next () )
				{
					ServerData.parser_schoolName = parser.getString ( "schoolname" );
				}
				#if NET_DEBUG_MODE
				Debug.Log(" > 학교가입 > 성공.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 학교가입. > 아이디를 찾을수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log(" > 학교가입. > 지원하지 않는 모드입니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CANNT_CHANGEDAY_SCHOOL:
				#if NET_DEBUG_MODE
				Debug.Log(" > 학교가입. > 재가입할 수 없는 날입니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CANNT_JOINDAY_SCHOOL:
				#if NET_DEBUG_MODE
				Debug.Log(" > 학교가입. > 가입 및 재가입이 불가능합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CANNT_FIND_SCHOOL:
				#if NET_DEBUG_MODE
				Debug.Log(" > 학교가입. > 학교를 찾을 수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CANNT_JOINMAX_SCHOOL:
				#if NET_DEBUG_MODE
				Debug.Log(" > 학교가입. > 학교인원을 초과했습니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log(" > 학교가입. > 팝업처리.");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_SCHOOLSEARCH:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_SCHOOLSEARCH _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log(" > 학교검색 > 성공.");
				#endif
				
				//결과.
				ReadSchoolList ( _xml , "schoolsearch" , parser );	
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 학교검색. > 아이디를 찾을수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log(" > 학교검색. > 지원하지 않는 모드입니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log(" > 학교검색 실패. > 팝업처리.");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_TRADECONTINUE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_TRADECONTINUE _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TRADECONTINUE > success");
				#endif
				
				//유저 정보.
				parser.parsing(_xml, "userinfo");
				if(parser.next()){
					//유저기본정보.
					ReadMoneyBase ( parser );						
					ServerData.parser_tradeFailCntA = parser.getInt("tradefailcnt");		//연속거래 실패.
					ServerData.parser_goodDealCount = parser.getInt("tradecnt");				//연속거래 성공횟수.		serverData.goodDealCount = 5;				//연속거래 성공횟수.
					ServerData.parser_goodDealGainCount = parser.getInt("prizecnt");			//상인상탄횟수.
				}
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TRADECONTINUE > error > 아이디가 존재하지 않는다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TRADECONTINUE > error > 지원하지 않는 모드입니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CASHCOST_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TRADECONTINUE > error > 캐쉬가 부족합니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TRADECONTINUE > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_TRADECASH:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_TRADECASH _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TRADECASH > success");
				#endif
				ReadMoneyBase ( parser );
				ServerData.parser_FPoint = parser.getInt("fpoint");			//우정포인트(110 > 1개, 10포인트)로 표현함.
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TRADECASH > error > 아이디가 존재하지 않는다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CASHCOST_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TRADECASH > error > 캐쉬가 부족합니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TRADECASH > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_FBWRITE:
		case Protocol.PTS_FBREAD:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_FBWRITE/PTS_FBREAD _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log(" > 게시판 글쓰기, 읽기 > 성공.");
				#endif
				
				//친구 시설 정보.
				ReadBBS ( _xml , "boardlist" , parser );
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 내아이디를 찾을 수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log(" > 지원하지 않는 모드입니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log(" > 팝업처리.");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_FVISIT:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_FVISIT _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구추가 > 성공.");
				#endif
				
				ServerData.parser_VisitData = new VisitData ();
				
				//친구 시설 정보.
				parser.parsing(_xml, "friendinfo");
				if(parser.next()){
					ServerData.parser_VisitData.gameYear = parser.getInt("gameyear");		//게임시작 2013년 3월부터 시작(봄).
					ServerData.parser_VisitData.gameMonth = parser.getInt("gamemonth");		//
					ServerData.parser_VisitData.fameLv = parser.getInt("famelv");			//레벨.
					
					//게임정보(시설업글).
					ServerData.parser_VisitData.houseStep = parser.getInt("housestep");			//집.
					ServerData.parser_VisitData.tankStep = parser.getInt("tankstep");			//우유탱크.
					ServerData.parser_VisitData.bottleStep = parser.getInt("bottlestep");		//양동이.
					ServerData.parser_VisitData.pumpStep = parser.getInt("pumpstep");			//착유기.
					ServerData.parser_VisitData.transferStep =  parser.getInt("transferstep");	//주입기.
					ServerData.parser_VisitData.pureStep = parser.getInt("purestep");			//정화시설.
					ServerData.parser_VisitData.freshCoolStep = parser.getInt("freshcoolstep");	//저온보관.
				}
				
				//친구 동물 정보(필드에 있는 동물정보만 옴).
				ServerData.parser_VisitData.ClearFriendAnimalData ();
				parser.parsing(_xml, "friendani");
				while(parser.next()){
					//공통 정보.
					ServerData.parser_VisitData.PushFriendAnimalData ( 	parser.getInt("fieldidx"),		//필드(0~8:필드, -1:창고, -2:죽음/병원).
					                                                  parser.getInt("itemcode"),		//아이템 코드.
					                                                  parser.getInt("anistep"),			//현재단계(0 ~ 12단계).
					                                                  parser.getInt("manger"),			//여물통(건초:1 > 여물:20).
					                                                  parser.getInt("diseasestate"),	//질병상태(0:노질병, 질병 >=0 걸림).
					                                                  parser.getInt("acc1"),			//악세(모자:아이템코드).
					                                                  parser.getInt("acc2") );			//악세(등, 옆구리:아이템코드).
					
					/*
						parser.getInt("fieldidx");			//필드(0~8:필드, -1:창고, -2:죽음/병원).
						parser.getInt("itemcode");			//아이템 코드.
						parser.getInt("anistep");			//현재단계(0 ~ 12단계).
						parser.getInt("manger");			//여물통(건초:1 > 여물:20).
						parser.getInt("diseasestate");		//질병상태(0:노질병, 질병 >=0 걸림).
						parser.getInt("acc1");				//악세(모자:아이템코드).
						parser.getInt("acc2");				//악세(등, 옆구리:아이템코드).
						*/
				}
				
				/*
					//친구 경작지 정보.
					parser.parsing(_xml, "seedfield");
					while(parser.next()){
						//공통 정보.
						parser.getInt("seedidx");			//0 ~ 11(12개)
						parser.getInt("itemcode");			//씨앗 :>= 0 아이템 코드 번호.
															//		Protocol.USERSEED_NEED_EMPTY  	-1 : 구매, 빈곳.
															//		Protocol.USERSEED_NEED_BUY		-2 : 미구매.
						parser.getString("seedstartdate");	//시작일.
						parser.getString("seedenddate");	//만료일.
					}
					*/
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구추가 실패. > 내아이디를 찾을 수 없습니다. > 팝업처리.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_OTHERID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구추가 실패. > 친구 아이디를 찾을 수 없습니다. > 팝업처리.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구삭제 실패 > 지원하지 않는 모드입니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구추가 실패. > 팝업처리.");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_CHANGEINFO:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_CHANGEINFO _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CHANGEINFO > success");
				#endif
				
				//유저 정보.
				parser.parsing(_xml, "userinfo");
				if(parser.next()){
					//유저기본정보.
					ReadMoneyBase ( parser );
					//parser.getInt("feed");				//건초.
					//parser.getInt("heart");				//하트(작물 > 수확, 친구추천 > ).
					//parser.getInt("fpoint");			
					ServerData.parser_mboardstate = parser.getInt("mboardstate");		//보상상태.
					ServerData.parser_mboardreward = parser.getInt("mboardreward");		//보상금액.
					
					ServerData.parser_kkopushallow = parser.getInt("kkopushallow");		//푸쉬설정변경값.
					//푸쉬안받음		Protocol.INFOMATION_NO
					//푸쉬받음		Protocol.INFOMATION_YES
					
					GameData.myMessageBlocked 		= parser.getInt("kakaomsgblocked");	//카톡 자신의 정보 수신거부/수락.
					//Debug.Log ("messabge : " + GameData.myMessageBlocked);
					//수신수락		Protocol.KAKAO_MESSAGE_BLOCKED_FALSE
					//수신거부		Protocol.KAKAO_MESSAGE_BLOCKED_TRUE
					//Debug.Log("1>"+ parser.getInt("kakaomsgblocked"));
				}
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CHANGEINFO > 아이디를 확인해라.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CHANGEINFO > 지원하지 않는 모드입니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_ALREADY_REWARD:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CHANGEINFO > 이미 지급했다..");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CHANGEINFO > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_USERPARAM:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_USERPARAM _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_USERPARAM > success");
				#endif
				ReadParamForRival (parser.getInt("param0"),  parser.getInt("param1"),  parser.getInt("param2"),
				                   parser.getInt("param3"), parser.getInt("param4"), parser.getInt("param5"),
				                   parser.getInt("param6"), parser.getInt("param7"), parser.getInt("param8"),
				                   parser.getInt("param9") );
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_USERPARAM > error > 아이디가 존재하지 않는다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_USERPARAM > error > not found error");
				#endif
				break;
			}
		}
			break;	
		case Protocol.PTS_COMPETITION:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_COMPETITION _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_COMPETITION > success");
				#endif
				//유저 정보.
				parser.parsing(_xml, "userinfo");
				if(parser.next()){
					//출석정보.
					//유저기본정보.
					ReadMoneyBase ( parser );
					ReadFeed_Heart ( parser );
					ServerData.parser_FPoint = parser.getInt("fpoint");				//우정포인트(110 > 1개, 10포인트)로 표현함.
					
					ServerData.parser_RivalQuestCode = parser.getInt("comreward");	//경쟁모드 번호.(초기 -1, 보상후부터는 기록된것).
					
					//경쟁정보.
					ReadRivalData ( parser );
					
					// 유져데이타 for 라이벌 데이타.
					ReadParamForRival (parser.getInt("param0"),  parser.getInt("param1"),  parser.getInt("param2"),
					                   parser.getInt("param3"), parser.getInt("param4"), parser.getInt("param5"),
					                   parser.getInt("param6"), parser.getInt("param7"), parser.getInt("param8"),
					                   parser.getInt("param9") );
				}
				
				//선물정보.
				ReadGiftData ( _xml, "giftitem" , parser );
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_COMPETITION > error > 아이디가 존재하지 않는다.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_COMPETITION > error > 튜토리얼 번호가 없다.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_TUTORIAL_ALREADY:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_COMPETITION > error > 이미 지급했다.");	
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_COMPETITION > error > not found error");
				#endif
				break;
			}
		}
			break;	
		case Protocol.PTS_FWBUY:
		case Protocol.PTS_FWSELL:
		case Protocol.PTS_FWINCOME:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_FWBUY _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_FWBUY, FWSELL, FWINCOME > success");
				#endif
				
				//유저기본정보.
				ReadMoneyBase ( parser );
				
				parser.getInt("incomegamecost");	//수입.
				
				ReadContryFarm ( _xml , "myfarm" , parser );
				
				// 목장 구매일때.
				if ( _code == Protocol.PTS_FWBUY )
				{
					// 선물 보상이있는 목장이면.
					if ( Ui_ContryFarm_Shop.Ins.HasBuyPresent () )
					{
						//선물정보 읽기.
						ReadGiftData ( _xml, "giftitem" , parser );	
					}
				}
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_FWBUY, FWSELL, FWINCOME > 아이디를 확인해라");	
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_FWBUY, FWSELL, FWINCOME > 지원하지 않는 모드입니다.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_GAMECOST_LACK:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_FWBUY, FWSELL, FWINCOME > 코인이 부족합니다.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_USERFARM:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_FWBUY, FWSELL, FWINCOME > 농장을 소유하고 있지 않다.");	
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_FWBUY, FWSELL, FWINCOME > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_FMYFRIEND:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_FMYFRIEND _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구리스트 > 성공.");
				#endif
				
				//결과.
				ReadFriendList ( _xml, "flist" , parser );
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구삭제 실패 > 지원하지 않는 모드입니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구리스트 실패. > 팝업처리.");
				#endif
				break;
			}
		}
			break;	
		case Protocol.PTS_FAPPROVE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_FAPPROVE _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구승인 > 성공.");
				#endif
				
				//결과.
				ReadFriendList ( _xml, "flist" , parser );
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구승인 실패. > 아이디를 찾을 수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구승인 실패. > 신청 받은 사람만이 승인 처리 할 수 있습니다");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구승인 실패. > 팝업처리.");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_FHEART:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_FHEART _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구하트주기 > 성공.");
				#endif
				
				//유저 정보.
				parser.parsing(_xml, "userinfo");
				if(parser.next()){
					//유저기본정보.
					//parser.getInt("cashcost");			//캐쉬.
					//parser.getInt("gamecost");			//게임머니.
					//parser.getInt("feed");				//건초.
					//parser.getInt("heart");				//하트(작물 > 수확, 친구추천 > ).
					ServerData.parser_FPoint = parser.getInt("fpoint");	//우정포인트(110 > 1개, 10포인트)로 표현함.
				}
				
				//친구정보.
				ReadFriendList ( _xml, "flist" , parser );
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구하트주기 > 아이디를 찾을 수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_OTHERID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구하트주기 > 친구의 정보를 찾을수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구하트주기 > 신청 받은 사람만이 승인 처리 할 수 있습니다");
				#endif
				break;
			case Protocol.RESULT_ERROR_TIME_REMAIN:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구하트주기 > 하트 선물 시간이 남았습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_HEART_DAILY_FULL:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구하트주기 > 1일 하트 허용량을 초과했습니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log(" > 팝업처리.");
				#endif
				break;
			}
		}
			break;

		case Protocol.PTS_FPROUD:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_FPROUD _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구자랑하기 > 가능하다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구자랑주기 > 아이디를 찾을 수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_OTHERID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구자랑주기 > 친구의 정보를 찾을수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구자랑주기 > 모드가 틀리다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_KAKAO_MESSAGE_BLOCK:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구자랑주기 > 상대가 거절상태이다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log(" > 팝업처리.");
				#endif
				break;
			}
		}
			break;

		case Protocol.PTS_FPOINT:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_FPOINT _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구일꾼 > 성공.");
				#endif
				
				//유저 정보.					
				ServerData.parser_FPoint = parser.getInt("fpoint");			//우정포인트(110 > 1개, 10포인트)로 표현함.					
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 아이디를 찾을 수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_FPOINT_LACK:
				#if NET_DEBUG_MODE
				Debug.Log(" > 포인트가 부족합니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log(" > 팝업처리.");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_TUTORIAL:
		{
			//Ui_Debug.SetText ( "Protocol.PTS_TUTORIAL" );
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_TUTORIAL _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TUTORIAL > success");
				#endif				
				
				//1. 
				parser.getInt("gamecost");		//게임머니.
				parser.getInt("cashcost");		//캐쉬.
				parser.getInt("heart");			//하트.
				parser.getInt("feed");			//건초.								
				parser.getInt("tutorial");		//튜토리얼.	
				
				//선물정보.
				ReadGiftData ( _xml, "giftitem" , parser );	
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TUTORIAL > error > 아이디가 존재하지 않는다.");	
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TUTORIAL > error > not found error");
				#endif
				break;
			}
		}
			break;	
		case Protocol.PTS_CASHBUY:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_CASHBUY _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CASHBUY > success");
				#endif
				
				parser.parsing(_xml, "cashbuy");
				if(parser.next()){
					//1. 변경된 것들.
					ReadMoneyBase ( parser );
					ReadFeed_Heart ( parser );
				}				
				//0122
				ServerData.cashpoint = parser.getInt("cashpoint");		//내가 구매한 캐쉬포인트.
				ServerData.UpdateVipGrade();
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log(" > 캐쉬구매 > 지원하지 않는 모드입니다. > 팝업처리.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GIFTID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 캐쉬구매 > 선물받을 친구가 없습니다. > 팝업처리.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 캐쉬구매 > 아이디를 찾지 못했습니다. > 팝업처리.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_PASSWORD:
				#if NET_DEBUG_MODE
				Debug.Log(" > 캐쉬구매 > 패스워드가 일치하지 않습니다. > 팝업처리.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CASH_COPY:
				#if NET_DEBUG_MODE
				Debug.Log(" > 캐쉬구매 > 캐쉬카피(블럭처리됩니다) > 팝업처리.");
				#endif
				break;
			case Protocol.RESULT_ERROR:
				#if NET_DEBUG_MODE
				Debug.Log(" > 캐쉬구매 실패. > 팝업처리.");
				#endif
				break;				
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CASHBUY > error > not found error");
				#endif
				break;
			}
		}
			break;	
		case Protocol.PTS_ROULBUY:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ROULBUY _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ROULBUY > success");
				#endif	
				
				//1. 변경된 것들.
				ReadMoneyBase ( parser );
				ReadFeed_Heart ( parser );
				
				//2. 뽑은 아이템들(디스플레이 > 상세 정보는 선물 리스트에 존재).
				ServerData.Parser_RoulResult_Item_Add ( parser.getInt("roul1") , true );
				ServerData.Parser_RoulResult_Item_Add ( parser.getInt("roul2") , false );
				ServerData.Parser_RoulResult_Item_Add ( parser.getInt("roul3") , false );
				ServerData.Parser_RoulResult_Item_Add ( parser.getInt("roul4") , false );
				ServerData.Parser_RoulResult_Item_Add ( parser.getInt("roul5") , false );
				ServerData.Parser_RoulResult_Item_Add ( parser.getInt("roul6") , false );
				ServerData.Parser_RoulResult_Item_Add ( parser.getInt("roul7") , false );
				ServerData.Parser_RoulResult_Item_Add ( parser.getInt("roul8") , false );
				ServerData.Parser_RoulResult_Item_Add ( parser.getInt("roul9") , false );
				ServerData.Parser_RoulResult_Item_Add ( parser.getInt("roul10") , false );
				ServerData.Parser_RoulResult_Item_Add ( parser.getInt("roul11") , false );
				
				GameData.bgroulcnt			= parser.getInt ( "anigrade1cnt" );		//동물 일반뽑기 횟수.
				GameData.pmroulcnt			= parser.getInt ( "anigrade2cnt" );		//동물 루비뽑기 횟수.
				GameData.freePrimeumCurCnt 	= parser.getInt ( "anigrade2gauage" );	//동물 루비뽑기 획득 게이지.
				GameData.pmroulcnt2			= parser.getInt ( "anigrade4cnt" );		//동물 루비뽑기 10+1.
				GameData.freePrimeumCurCnt2 = parser.getInt ( "anigrade4gauage" );	//동물 루비뽑기 10+1획득 게이지.

				GameData.animalCrystalEvent_result_animal 		= parser.getInt("checkani");		//현재 획득한 수치;
				GameData.animalCrystalEvent_result_crystal		= parser.getInt("checkreward");		//수치 이상이면 한번더 뽑을 수있다.
				GameData.animalCrystalEvent_result_cnt			= parser.getInt("checkrewardcnt");		
				
				//3. 선물 리스트.
				ReadGiftData ( _xml, "giftitem" , parser );	
				
				
				//뽑기 이벤트 정보.
				ReadPmInfo ( _xml , "pminfo" , parser );

				
				//추가로 뽑은 동물리스트만 온다.
				//일반 -> 1마리.
				//프림 -> 1마리.
				//10+1 -> 11마리.
				parser.parsing(_xml, "itemowner");
				ServerData.Clear_ListUserItemData ();
				while(parser.next())
				{
					ServerData.PushUserITemData ( 	parser.getInt("listidx") ,
					                             parser.getInt("invenkind") ,
					                             parser.getInt("fieldidx"),
					                             parser.getInt("itemcode"),
					                             parser.getInt("cnt"),
					                             parser.getInt("anistep"),
					                             parser.getInt("manger"),
					                             parser.getInt("diseasestate"),
					                             parser.getInt("acc1"),
					                             parser.getInt("acc2"),
					                             parser.getInt("petupgrade"),
					                             parser.getInt("treasureupgrade"),
					                             parser.getInt("needhelpcnt"),
					                             parser.getString("randserial"),
					                             parser.getInt("upcnt"),			//세포 누적횟수.
					                             parser.getInt("upstepmax"),		//세포 누적Max.  iteminfo.xml의 upstepmax는 사용하지 마세요.
					                             parser.getInt("freshstem100"),		//세포로 늘어난 신선도.
					                             parser.getInt("attstem100"),		//공격력.
					                             parser.getInt("defstem100"),		//방어력.
					                             parser.getInt("hpstem100"),		//HP.
					                             parser.getInt("timestem100"),		//줄어든 시간
								parser.getInt("expirekind"),		//** 만기템(1), 만기아님(-1).
								parser.getString("expiredate")	
					                             );
				}

				parser.parsing(_xml, "eventresultani");
				ServerData.ClearCrossbreedResultCrystalList();
				while(parser.next())
				{
					ServerData.AddCrossbreedResultCrystal(parser.getInt("checkani"), 		//체크동물 아이템 코드.
					                            parser.getInt("checkreward"),	//보상템 아이템 코드.
					                            parser.getInt("checkrewardcnt")	//보상템 개수.
					                            );
				}

				break;				
			case Protocol.RESULT_ERROR_INVEN_FULL:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ROULBUY > error > 인벤이 풀로 확장되었습니다.");
				#endif
				break;	
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ROULBUY > error > 아이디를 확인해라.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ROULBUY > error > 코드를 찾을수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ROULBUY > error > 지원하지 않습니다.(자신과교배, 지원안하는 모드)");
				#endif
				break;
			case Protocol.RESULT_ERROR_CASHCOST_LACK:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ROULBUY > error > 캐쉬가 부족합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_GAMECOST_LACK:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ROULBUY > error > 게임코인이 부족합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_HEART_LACK:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ROULBUY > error > 하트이 부족하다.");
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ROULBUY > error > not found error");
				#endif
				break;
			}
		}
			break;	

		case Protocol.PTS_TREASUREBUY:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_TREASUREBUY _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREBUY > success");
				#endif
				
				//1. 변경된 것들.
				ReadMoneyBase ( parser );
				ReadFeed_Heart ( parser );
				
				//2. 뽑은 아이템들(디스플레이 > 상세 정보는 선물 리스트에 존재).

				ServerData.Parser_TsRoulResult_Item_Add ( parser.getInt("roul1") , true );
				ServerData.Parser_TsRoulResult_Item_Add ( parser.getInt("roul2") , false );
				ServerData.Parser_TsRoulResult_Item_Add ( parser.getInt("roul3") , false );
				ServerData.Parser_TsRoulResult_Item_Add ( parser.getInt("roul4") , false );
				ServerData.Parser_TsRoulResult_Item_Add ( parser.getInt("roul5") , false );
				ServerData.Parser_TsRoulResult_Item_Add ( parser.getInt("roul6") , false );
				ServerData.Parser_TsRoulResult_Item_Add ( parser.getInt("roul7") , false );
				ServerData.Parser_TsRoulResult_Item_Add ( parser.getInt("roul8") , false );
				ServerData.Parser_TsRoulResult_Item_Add ( parser.getInt("roul9") , false );
				ServerData.Parser_TsRoulResult_Item_Add ( parser.getInt("roul10") , false );
				ServerData.Parser_TsRoulResult_Item_Add ( parser.getInt("roul11") , false );

				GameData.tsgrade1cnt = parser.getInt ( "tsgrade1cnt" );	//보물 일반뽑기 횟수.
				GameData.tsgrade2cnt = parser.getInt ( "tsgrade2cnt" );	//보물 루비뽑기 횟수.
				GameData.TsfreePrimeumCurCnt = parser.getInt ( "tsgrade2gauage" );	//보물 루비뽑기 획득 게이지.
				GameData.tsgrade4cnt = parser.getInt ( "tsgrade4cnt" );	//보물 루비뽑기 10+1.
				GameData.TsfreePrimeumCurCnt2 = parser.getInt ( "tsgrade4gauage" );	//보물 루비뽑기 10+1획득 게이지.

				//@@@@ start 0067
				//업데이트 하면 안된다. 클라에서 업데이트 중이다.
				//GameData.tsupcnt		= parser.getInt("tsupcnt");			//누적보물강화횟수(109).
				//GameData.bgbattlecnt	= parser.getInt("bgbattlecnt");		//누적배틀참여().
				//GameData.bganiupcnt		= parser.getInt("bganiupcnt");		//누적동물강화(107).
				//@@@@ end
				
				GameData.TsCrystalEvent_result_treasure = parser.getInt("checkani");		//현재 획득한 수치;
				GameData.TsCrystalEvent_result_crystal = parser.getInt("checkreward");	//수치 이상이면 한번더 뽑을 수있다.
				GameData.TsCrystalEvent_result_cnt = parser.getInt("checkrewardcnt");
				
				//3. 선물 리스트.
				ReadGiftData ( _xml, "giftitem" , parser );
				
				//뽑기 이벤트 정보.
				ReadTsInfo ( _xml , "tsinfo" , parser );

				//추가로 뽑은 보물리스트만 온다.
				//일반 -> 1개.
				//프림 -> 1개.
				//10+1 -> 11개.
				parser.parsing(_xml, "itemowner");
				ServerData.Clear_ListUserItemData ();
				while(parser.next()){
					ServerData.PushUserITemData ( 	parser.getInt("listidx") ,
					                             parser.getInt("invenkind") ,
					                             parser.getInt("fieldidx"),
					                             parser.getInt("itemcode"),
					                             parser.getInt("cnt"),
					                             parser.getInt("anistep"),
					                             parser.getInt("manger"),
					                             parser.getInt("diseasestate"),
					                             parser.getInt("acc1"),
					                             parser.getInt("acc2"),
					                             parser.getInt("petupgrade"),
					                             parser.getInt("treasureupgrade"),
					                             parser.getInt("needhelpcnt"),
					                             parser.getString("randserial"),
					                             parser.getInt("upcnt"),			//세포 누적횟수.
					                             parser.getInt("upstepmax"),		//세포 누적Max.  iteminfo.xml의 upstepmax는 사용하지 마세요.
					                             parser.getInt("freshstem100"),		//세포로 늘어난 신선도.
					                             parser.getInt("attstem100"),		//공격력.
					                             parser.getInt("defstem100"),		//방어력.
					                             parser.getInt("hpstem100"),		//HP.
					                             parser.getInt("timestem100"),		//줄어든 시간
							parser.getInt("expirekind"),		//** 만기템(1), 만기아님(-1).
							parser.getString("expiredate")	
					                             );
					
				}

				parser.parsing(_xml, "eventresultts");
				ServerData.ClearTreasureResultCrystalList();
				while(parser.next())
				{
					ServerData.AddTreasureResultCrystal(parser.getInt("checkts"), 		//체크동물 아이템 코드.
					                                      parser.getInt("checkreward"),	//보상템 아이템 코드.
					                                      parser.getInt("checkrewardcnt")	//보상템 개수.
					                                      );
				}

				break;
			case Protocol.RESULT_ERROR_INVEN_FULL:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREBUY > error > 인벤이 풀로 확장되었습니다.");
				#endif
				break;	

				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREBUY > error > 아이디를 확인해라.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREBUY > error > 코드를 찾을수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREBUY > error > 지원하지 않습니다.(자신과교배, 지원안하는 모드)");
				#endif
				break;
			case Protocol.RESULT_ERROR_CASHCOST_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREBUY > error > 캐쉬가 부족합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_GAMECOST_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREBUY > error > 게임코인이 부족합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_HEART_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREBUY > error > 하트이 부족하다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREBUY > error > not found error");
				#endif
				break;
			}
		}
			break;

		case Protocol.PTS_TREASUREWEAR:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_TREASUREWEAR _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREWEAR > success");
				#endif
				
				//보물 리스트 인덱스 번호.
				parser.getInt("tslistidx1");
				parser.getInt("tslistidx2");
				parser.getInt("tslistidx3");
				parser.getInt("tslistidx4");
				parser.getInt("tslistidx5");
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREWEAR > error > 아이디를 확인해라.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREWEAR > error > not found error");
				#endif
				break;
			}
		}
			break;

		case Protocol.PTS_TREASUREUPGRADE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_TREASUREUPGRADE _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREUPGRADE > success");
				#endif
				
				//1. 변경된 것들.
				ReadMoneyBase ( parser );
				ReadFeed_Heart ( parser );
				
				//2. 변경된 것들.
				ServerData.tsupgraderesult = parser.getInt("tsupgraderesult");
				//성공		TSUPGRADE_RESULT_SUCCESS
				//실패		TSUPGRADE_RESULT_FAIL

				ServerData.parser_userItemData = null;				
				parser.parsing(_xml, "itemowner");				
				if ( parser.next() )
				{
					ReadServerItemData ( out ServerData.parser_userItemData , parser );	
				}

				//보물이벤트 정보.
				ReadTsInfo ( _xml , "tsinfo" , parser );
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREUPGRADE > error > 아이디를 확인해라.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREUPGRADE > error > 코드를 찾을수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREUPGRADE > error > 지원하지 않습니다.(자신과교배, 지원안하는 모드)");
				#endif
				break;
			case Protocol.RESULT_ERROR_CASHCOST_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREUPGRADE > error > 캐쉬가 부족합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_GAMECOST_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREUPGRADE > error > 게임코인이 부족합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_HEART_LACK:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREUPGRADE > error > 하트이 부족하다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_UPGRADE_FULL:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREUPGRADE > error > 업그레이드가 풀입니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TREASUREUPGRADE > error > not found error");
				#endif
				break;
			}
		}
			break;

		case Protocol.PTS_ANIURGENCY:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ANIURGENCY _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIURGENCY > success");
				#endif
				ReadMoneyBase ( parser );
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIURGENCY > error > 아이디가 존재하지 않는다.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_CASHCOST_LACK:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIURGENCY > error > 캐쉬가 부족합니다.");	
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIURGENCY > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_PACKBUY:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_PACKBUY _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PACKBUY > success");
				#endif	
				
				//1. 선물에서 바로 지급된 것들.
				ReadMoneyBase ( parser );
				//ReadFeed_Heart ( parser );
				
				//3. 선물 리스트.
				ReadGiftData ( _xml, "giftitem" , parser );	
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PACKBUY > error > 아이디를 확인해라.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PACKBUY > error > 코드를 찾을수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CASHCOST_LACK:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PACKBUY > error > 캐쉬가 부족합니다.");
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PACKBUY > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_SAVE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_SAVE _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SAVE > success");
				#endif	
				
				//1. 인벤정보들이 온다.
				ServerData.parser_cashcost = parser.getInt("cashcost");			//변경된 금액.
				ServerData.parser_gamecostA = parser.getInt("gamecost");	
				ServerData.parser_feed = parser.getInt("feed");					//1개사용중 -> 0개 사용중으로 클리어 해주세요.
				ServerData.parser_heart = parser.getInt("heart");	
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SAVE > error > 아이디를 확인해라.");	
				#endif
				break;		
			case Protocol.RESULT_ERROR_PARAMETER:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SAVE > error > 파라미터 오류.");
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SAVE > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_TRADE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_TRADE _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TRADE > success");
				#endif	
				
				//1. 인벤정보들이 온다.
				ReadFeed_Heart ( parser );
				ReadMoneyBase ( parser );
				
				ServerData.parser_goldticket 	= parser.getInt("goldticket");		//골드티켓.	
				ServerData.parser_battleticket 	= parser.getInt("battleticket");	//싸움티켓.
				//시간표시는 이시간에서 10분이 지나면 1개 올라가고 Max이상은 안올라가는 것임.
				//참조는 parser_freshCoolTime 하시면 관련 된것이 있습니다.
				
				ServerData.parser_goldtickettime = DateTime.Parse ( parser.getString("goldtickettime") );	//골드티켓 time (10분에 1개씩 차오름, max 이상 안오름).	
				//Debug.Log ("GoldTicket : " + ServerData.parser_goldticket);
				//Debug.Log ("GoldTicketTime : " + ServerData.parser_goldtickettime);
				ServerData.parser_battletickettime = DateTime.Parse ( parser.getString("battletickettime") );//싸움티켓 time (10분에 1개씩 차오름, max 이상 안오름).	
				
				GameData.Max_GoldTicket		= parser.getInt("goldticketmax");//골드티켓 max.	
				GameData.Max_BattleTicket	= parser.getInt("battleticketmax");	//싸움티켓 max.	
				
				//@@@@ start 0032
				//골드티켓과 싸움 티켓의 정보는 갱신해주시면 됩니다.
				ServerData.parser_tradesuccesscnt = parser.getInt("tradesuccesscnt");	//거래성공횟수.
				ServerData.parser_tradeclosedealer = parser.getInt("tradeclosedealer");	//잠김상인번호.
				//@@@@ end
				
				//@@@@ start 0068
				//최고 연속 거래 정보.
				GameData.bgcttradecnt	= parser.getInt ( "bgcttradecnt" );
				//@@@@ end


				//ServerData.parser_freshCoolTime = DateTime.Parse ( parser.getString("freshcooltime") );	//	
				
				ServerData.parser_tradeFailCntA = parser.getInt("tradefailcnt");		//연속거래 실패.
				
				GameManager.Ins.player.gooldDealCountA 		= parser.getInt("tradecnt");// 연속거래 횟수
				GameManager.Ins.player.goolDealGainCount 	= parser.getInt("prizecnt");// 선물받은 횟수.
				
				ReadRivalData ( parser );
				
				//분기별 매출 표시하는 정보.
				ServerData.parser_qtSaleCoin = parser.getInt("qtsalecoin");				//분기별 판매누적총액.
				ServerData.parser_qtSaleCoinBest = parser.getInt("qtsalecoinbest");		//분기별 최고 거래금매액.
				ServerData.parser_qtSaleBarrel = parser.getInt("qtsalebarrel");			//분기별 판매배럴.
				ServerData.parser_qtFeedUse = parser.getInt("qtfeeduse");				//분기별 건초 사용량.
				ServerData.parser_qtTradeCnt = parser.getInt("qttradecnt");				//분기별 거래성공횟수.
				
				// 필드 오픈 정보.
				ReadFieldOpenInfo ( parser );
				
				// 유져데이타 for 라이벌 데이타.			
				ReadParamForRival (parser.getInt("param0"),  parser.getInt("param1"),  parser.getInt("param2"),
				                   parser.getInt("param3"), parser.getInt("param4"), parser.getInt("param5"),
				                   parser.getInt("param6"), parser.getInt("param7"), parser.getInt("param8"),
				                   parser.getInt("param9") );
				
				// 거래후 하트추가.
				ServerData.parser_plusHeartCow = parser.getInt ( "plusheartcow" );
				ServerData.parser_plusHeartSheep = parser.getInt ( "plusheartsheep" );
				ServerData.parser_plusHeartGoat = parser.getInt ( "plusheartgoat" );
				
				DownLoadData.EpisodeData.parser_etremain 	= parser.getInt("etremain");
				DownLoadData.EpisodeData.parser_etsalecoinA 	= parser.getInt("etsalecoin");	//에피소드 기간 동안의 수익.
				DownLoadData.EpisodeData.parser_etgrade		= parser.getInt("etgrade");			//에피소드 보상이 있는가?	
				
				//Debug.Log ( "etremain ( "+parser.getInt("etremain")+" ) " );
				//Debug.Log ( "etsalecoin ( "+parser.getInt("etsalecoin")+" ) " );
				//Debug.Log ( "etgrade ( "+parser.getInt("etgrade")+" ) " );
				//Debug.Log ( "----" );
				
				//Protocol.EPISODE_GRADE_NON 			// 없음		> 출력안함.
				//Protocol.EPISODE_GRADE_BAD 			// Bad		> 에피소드 결과 출력.	
				//Protocol.EPISODE_GRADE_NORMAL 		// Normal	> 에피소드 결과 출력.
				//Protocol.EPISODE_GRADE_GOOD 			// Good		> 에피소드 결과 출력.
				//Protocol.EPISODE_GRADE_EXCELLENT 		// Excellent> 에피소드 결과 출력.
				
				//행운의 주사위 정보.
				Ui_DiceGamble.yabauchange = parser.getInt("yabauchange");	//변경가격.
				
				Constant.FPOINT_TO_CASH_DEALER = parser.getInt("needfpoint");	//황금 상인 호출할 때 드는 우정포인트값.
				
				GameData.combackUserStep  =		parser.getInt("rtnstep");		//>= 1 단계(아이콘 표시), -1: 아님.
				GameData.combackUserState = 	parser.getInt("rtnplaycnt");	//각단계별 거래횟수.
				GameData.combackReward	  =		parser.getInt("rtnreward");		// 보상 있는가? 
				
				//@@@@ start 0002
				int sid = parser.getInt("sid");		
				//Debug.Log("sid : " + sid);
				//Debug.Log ("GameData.sid : " + GameData.sid);
				if( !GameData.IsCheckSessionID( sid))
				{
					
					Ui_MsgBox.Ins.SetMsg( "세션이 만료되었습니다.", GameManager.Ins.GotoLogoScene );
					Ui_MsgBox.Ins.BringIn ();
					
					//					Ui_TostMsg.Ins.SetMsgA ( "세션이 만료되었습니다." );
					//					Ui_TostMsg.Ins.m_bCheckChageScene_Logo = true;
					//					Ui_TostMsg.Ins.BringIn ();
				}
				//	> 세션이 만료되었습니다. 메세지 출력후 로고 화면으로 이동해주세요.
				
				ServerData.zcpchance = parser.getInt ( "zcpchance" );

				//@@@@ start 0059
				//2. 보유아이템들.	
				//상인 카드로부터 받은 상품들...
				ServerData.parser_userItemData = null;
				parser.parsing(_xml, "itemowner");
				if ( parser.next() )
				{
					ReadServerItemData ( out ServerData.parser_userItemData , parser );
				}			
				//@@@@ end
				
				
				ReadGiftData ( _xml, "giftitem" , parser );	
				
				ReadRank ( _xml , "frank" , parser );
				
				//뽑기광고.
				ReadBreedResultForNotify ( _xml , "adlist" , parser );
				
				ReadSchoolRanking ( _xml , "schooltop" , parser );
				
				ReadSchoolUserTop ( _xml , "schoolusertop" , parser );
				
				// 에피소드 정보.
				ReadEpisodeData ( _xml , "etrewardinfo" , parser );
				
				//교배뽑기 재갱신. 
				parser.parsing(_xml, "sysroul");
				if ( parser.next () )
				{
					ServerData.parser_roul_gameCost		= parser.getInt ( "roulgrade1gamecost" );	//동물 일반뽑기      코인.		=> 1번째 버턴의 가격.
					ServerData.parser_roul_gameHeart	= parser.getInt ( "roulgrade1heart" );		//동물 일반뽑기      하트.
					ServerData.parser_roul_cashCostOri  = parser.getInt ( "roulgrade2cashcost" );	//동물 루비뽑기      루비가격.		=> 2번쨰 버턴의 가격.
					ServerData.parser_roul_cashCostOri2 = parser.getInt ( "roulgrade4cashcost" );	//동물 루비뽑기 10+1 루비가격.		=> 3번째 버튼의 가격.
				}

				//보물뽑기 가격갱신. 
				parser.parsing(_xml, "systreasure");
				if ( parser.next () )
				{
					ServerData.parser_Tsroul_gameCost		= parser.getInt ( "tsgrade1gamecost" );	//동물 일반뽑기      코인.		=> 1번째 버턴의 가격.
					ServerData.parser_Tsroul_gameHeart	= parser.getInt ( "tsgrade1heart" );		//동물 일반뽑기      하트.
					ServerData.parser_Tsroul_cashCostOri  = parser.getInt ( "tsgrade2cashcost" );	//동물 루비뽑기      루비가격.		=> 2번쨰 버턴의 가격.
					ServerData.parser_Tsroul_cashCostOri2 = parser.getInt ( "tsgrade4cashcost" );	//동물 루비뽑기 10+1 루비가격.		=> 3번째 버튼의 가격.
				}

				ServerData.InitSupport();
				parser.parsing(_xml, "syssupportmsg");
				while ( parser.next () )
				{
					ServerData.AddSupport(parser.getInt ( "groupline" ), parser.getString ( "msg" ));
				}

				//전체 유저 랭킹.
				ReadAllUserRank(_xml, "ranksale", parser);
				
				//유저 배틀 랭킹.
				ReadBattleRank(_xml, "rankbattle", parser);
								

				ReadWheelFreeInfo(_xml, "wheelfreeinfo", parser);
				ReadWheelCashInfo(_xml, "wheelcashinfo", parser);

				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TRADE > error > 아이디를 확인해라.");	
				#endif
				break;		
			case Protocol.RESULT_ERROR_PARAMETER:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TRADE > error > 파라미터 오류.");
				#endif
				break;
			case Protocol.RESULT_ERROR_RESULT_COPY:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TRADE > error > 게임코인을 결과가 불일치합니다.");
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_TRADE > error > not found error");
				#endif
				break;
			}
			
			//Debug.Log ( "test PTS_TRADE" );
			
			
		}
			break;
		case Protocol.PTS_SEEDHARVEST:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_SEEDHARVEST _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDHARVEST > success");
				#endif	
				
				//1. 인벤정보들이 온다.
				ServerData.parser_cashcost = parser.getInt("cashcost");			//변경된 금액.
				ServerData.parser_gamecostA = parser.getInt("gamecost");	
				ServerData.parser_feed = parser.getInt("feed");					//1개사용중 -> 0개 사용중으로 클리어 해주세요.
				ServerData.parser_heart = parser.getInt("heart");	
				
				int _bresult = parser.getInt("bresult");
				
				ServerData.zcpchance = parser.getInt ( "zcpchance" );

				//유저 경작지.
				parser.parsing(_xml, "seedfield");
				while(parser.next()){
					//공통 정보.
					parser.getInt("seedidx");			//0 ~ 11(12개)
					parser.getInt("itemcode");			//씨앗 :>= 0 아이템 코드 번호.
					//		Protocol.USERSEED_NEED_EMPTY  	-1 : 구매, 빈곳.
					//		Protocol.USERSEED_NEED_BUY		-2 : 미구매.
					parser.getString("seedstartdate");	//시작일.
					parser.getString("seedenddate");	//만료일.
				}
				
				//PTS_SEEDHARVEST > bresult > 2가 오면 선물이 있고 없으면 리스트는 없다고 생각하면 되겠습니다.
				if ( _bresult == 2 )
				{
					//선물정보.
					if ( ServerData.sendCode_mode == Protocol.USERSEED_HARVEST_MODE_NORMAL )
						ReadGiftData ( _xml, "giftitem" , parser );		
				}
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDHARVEST > error > 아이디를 확인해라.");	
				#endif
				break;		
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDHARVEST > error > 정보를 못찾았습니다.");
				#endif
				
				//1. 인벤정보들이 온다.
				ServerData.parser_cashcost = parser.getInt("cashcost");			//변경된 금액.
				ServerData.parser_gamecostA = parser.getInt("gamecost");	
				ServerData.parser_feed = parser.getInt("feed");					//1개사용중 -> 0개 사용중으로 클리어 해주세요.
				ServerData.parser_heart = parser.getInt("heart");	
				
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDHARVEST > error > 지원하지 않는 정보입니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_HARVEST_TIME_REMAIN:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDHARVEST > error > 시간이 아직 남음.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CASHCOST_LACK:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDHARVEST > error > 캐쉬비용이 부족합니다.");
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDHARVEST > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_SEEDPLANT:
		{
			
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_SEEDPLANT _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			//Debug.Log (" ????? - 0 " );
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDPLANT > success");
				#endif	
				
				//1. 인벤정보들이 온다.
				ServerData.parser_cashcost = parser.getInt("cashcost");			//변경된 금액.
				ServerData.parser_gamecostA = parser.getInt("gamecost");	
				ServerData.parser_feed = parser.getInt("feed");					//1개사용중 -> 0개 사용중으로 클리어 해주세요.
				ServerData.parser_heart = parser.getInt("heart");	
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDPLANT > error > 아이디를 확인해라.");	
				#endif
				break;			
			case Protocol.RESULT_ERROR_NEED_BUY:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDPLANT > error > 경작지를 구매하지 않음.");
				#endif
				break;	
			case Protocol.RESULT_ERROR_PLANT_ALREADY:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDPLANT > error > 이미 씨앗이 있습니다.");
				#endif
				
				//1. 인벤정보들이 온다.
				ServerData.parser_cashcost = parser.getInt("cashcost");			//변경된 금액.
				ServerData.parser_gamecostA = parser.getInt("gamecost");	
				ServerData.parser_feed = parser.getInt("feed");					//1개사용중 -> 0개 사용중으로 클리어 해주세요.
				ServerData.parser_heart = parser.getInt("heart");	
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDPLANT > error > 씨앗 정보를 못찾았습니다.");
				#endif
				break;		
			case Protocol.RESULT_ERROR_CASHCOST_LACK:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDPLANT > error > 캐쉬비용이 부족합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_GAMECOST_LACK:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDPLANT > error > 코인비용이 부족합니다.");
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDPLANT > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_SEEDBUY:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_SEEDBUY _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDBUY > success");
				#endif	
				
				//1. 인벤정보들이 온다.
				ServerData.parser_cashcost = parser.getInt("cashcost");				//변경된 금액.
				ServerData.parser_gamecostA = parser.getInt("gamecost");	
				
				//parser.getInt("feed");	
				//parser.getInt("heart");	
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDBUY > error > 아이디를 확인해라.");	
				#endif
				break;			
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDBUY > error > 아이템 코드를 찾을 수 없습니다.");
				#endif
				break;				
			case Protocol.RESULT_ERROR_BUY_ALREADY:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDBUY > error > 이미 구매한 경작지 입니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_SEEDIDX:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDBUY > error > 경작지 번호가 유효하지 않습니다.");
				#endif
				break;		
			case Protocol.RESULT_ERROR_CASHCOST_LACK:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDBUY > error > 캐쉬비용이 부족합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_GAMECOST_LACK:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDBUY > error > 코인비용이 부족합니다.");
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_SEEDBUY > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_DELETEID:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_DELETEID _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log(" > 아이디삭제 > 성공.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 아이디삭제 > 아이디가 존재하지 않는다. > 팝업처리.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_PASSWORD:
				#if NET_DEBUG_MODE
				Debug.Log(" > 아이디삭제 > 패스워드 틀렸다.. > 팝업처리.");
				#endif
				break;
			case Protocol.RESULT_ERROR:
				#if NET_DEBUG_MODE
				Debug.Log(" > 아이디삭제 실패. > 팝업처리.");
				#endif
				break;
			}
		}
			break;	
		case Protocol.PTS_FACUPGRADE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_FACUPGRADE _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_FACUPGRADE > success");
				#endif	
				
				//1. 인벤정보들이 온다.
				ServerData.parser_cashcost = parser.getInt("cashcost");				//변경된 금액.
				ServerData.parser_gamecostA = parser.getInt("gamecost");	
				ServerData.parser_FPointMax = parser.getInt("fpointmax");
				/*parser.getInt("feedmax");	
					parser.getInt("heartmax");	
				
					parser.getInt("housestep");				//집정보.
					parser.getInt("housestate");		
					parser.getString("housetime");	
					parser.getInt("tankstep");				//탱크정보.
					parser.getInt("tankstate");		
					parser.getString("tanktime");	
					parser.getInt("bottlestep");			//양동이정보.
					parser.getInt("bottlestate");		
					parser.getString("bottletime");	
					parser.getInt("pumpstep");				//착유기정보.
					parser.getInt("pumpstate");		
					parser.getString("pumptime");	
					parser.getInt("transferstep");			//주입기정보.
					parser.getInt("transferstate");		
					parser.getString("transfertime");	
					parser.getInt("purestep");				//정화시설정보.
					parser.getInt("purestate");		
					parser.getString("puretime");	
					parser.getInt("freshcoolstep");			//저온보관정보.
					parser.getInt("freshcoolstate");		
					parser.getString("freshcooltime");	*/
				break;
			case Protocol.RESULT_ERROR_TIME_REMAIN:
				_resultcode = Protocol.RESULT_SUCCESS;
				ServerData.parser_cashcost = parser.getInt("cashcost");				//변경된 금액.
				ServerData.parser_gamecostA = parser.getInt("gamecost");	
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_FACUPGRADE > error > 아이디를 확인해라.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_FACUPGRADE > error > 지원하지 않는 모드입니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_UPGRADE_FULL:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_FACUPGRADE > error > 업그레이드가 맥스입니다.");
				#endif
				break;					
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_FACUPGRADE > error > 인벤이 해당 아이템 코드를 찾을 수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CASHCOST_LACK:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_FACUPGRADE > error > 캐쉬비용이 부족합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_GAMECOST_LACK:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_FACUPGRADE > error > 코인비용이 부족합니다.");
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_FACUPGRADE > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_ITEMACCNEW:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ITEMACCNEW _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMACCNEW > success");
				#endif
				
				ServerData.parser_userItemData = null;
				//1. 장착된것.
				ServerData.parser_aniListIdx = parser.getInt("anilistidx");
				ServerData.parser_acc1		 = parser.getInt("acc1");
				ServerData.parser_acc2		 = parser.getInt("acc2");
				
				//				<bgacc1listidxdel>-1</bgacc1listidxdel>
				//					<bgacc2listidxdel>-1</bgacc2listidxdel>
				//유저 동물 정보.
				//				parser.parsing(_xml, "itemowner");
				//				if(parser.next()){
				//					//공통 정보.
				//					parser.getInt("listidx");			//유저별 고유번호.
				//					parser.getInt("acc1");				//악세(모자:아이템코드).
				//					parser.getInt("acc2");				//악세(등, 옆구리:아이템코드).
				//				}
				
				//유저 교체, 분리된 악세정보.
				
				//				parser.parsing(_xml, "accitemowner");
				
				ReadServerUserItemData ( _xml , "accitemowner" , parser );
				//
				//				if ( parser.next () ) {
				//					ReadServerItemData ( out ServerData.parser_userItemData , parser );
				//				}
				
				//				while(parser.next()){
				//					//공통 정보.
				//					parser.getInt("listidx");			//유저별 고유번호.
				//					parser.getInt("invenkind");			//액세서리(4)	Protocol.USERITEM_INVENKIND_ACC
				//					parser.getInt("fieldidx");			// 창고(-1)		Protocol.USERITEM_FIELDIDX_INVEN
				//					parser.getInt("itemcode");			//아이템 코드.
				//					parser.getInt("cnt");				//보유수량. 일반적으로는 1개, 소모템은 0개 이상.
				//					
				//					//동물에 대한 추가정보.
				//					parser.getInt("anistep");
				//					parser.getInt("manger");
				//					parser.getInt("diseasestate");
				//					parser.getInt("acc1");
				//					parser.getInt("acc2");
				//					parser.getInt("randserial");
				//					
				//					parser.getInt("petupgrade");
				//					parser.getInt("needhelpcnt");
				//					parser.getInt("needhelpalive");
				//				}
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMACCNEW > error > 아이디를 확인해라.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMACCNEW > error > 동물없음, 악세없음, 동물병원에 있음.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMACCNEW > error > 머리, 등, 옆구리 이외에는 지원안합니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMACCNEW > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_ITEMACC:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ITEMACC _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMACC > success");
				#endif	
				
				//1. 장착된것.
				//parser.getInt("anilistidx");		
				//parser.getInt("acc1");	
				//parser.getInt("acc2");	
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMACC > error > 아이디를 확인해라.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMACC > error > 동물없음, 악세없음, 동물병원에 있음.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMACC > error > 머리, 등, 옆구리 이외에는 지원안합니다.");
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMACC > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_ITEMINVENEXP:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ITEMINVENEXP _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMINVENEXP > success");
				#endif	
				
				ServerData.parser_cashcost = parser.getInt("cashcost");			//변경된 금액.
				ServerData.parser_gamecostA = parser.getInt("gamecost");	
				//1. 인벤정보들이 온다.
				/*
					parser.getInt("invenanimalmax");	//동물인벤 맥스, 단계.
					parser.getInt("invenanimalstep");		
					parser.getInt("invencustommax");	//소모인벤 맥스, 단계.
					parser.getInt("invencustomstep");	
					parser.getInt("invenaccmax");		//악세인벤 맥스, 단계.
					parser.getInt("invenaccstep");	
					parser.getInt("");*/	
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMINVENEXP > error > 아이디를 확인해라.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMINVENEXP > error > 지원하지 않는 모드입니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_INVEN_FULL:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMINVENEXP > error > 인벤이 풀로 확장되었습니다.");
				#endif
				break;					
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMINVENEXP > error > 인벤이 해당 아이템 코드를 찾을 수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CASHCOST_LACK:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMINVENEXP > error > 캐쉬비용이 부족합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_GAMECOST_LACK:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMINVENEXP > error > 코인비용이 부족합니다.");
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMINVENEXP > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_ITEMQUICK:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ITEMQUICK _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMQUICK > success");
				#endif	
				
				//1. 장착된것.
				//parser.getInt("bulletlistidx");		
				//parser.getInt("vaccinelistidx");	
				//parser.getInt("boosterlistidx");	
				//parser.getInt("albalistidx");	
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMQUICK > error > 아이디를 확인해라.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMQUICK > error > 아이템을 찾을 수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_ENOUGH:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMQUICK > error > 수량이 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMQUICK > error > 총알, 백신, 부스터, 알바 이외에는 안됩니다.");
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMQUICK > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_ANIREPREG:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ANIREPREG _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log(" > 대표동물 변경 > 성공.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 대표동물 변경 > 아이디가 존재하지 않는다. > 팝업처리.");
				#endif
				break;
			case Protocol.RESULT_ERROR_ANIMAL_NOT_FOUND:
				#if NET_DEBUG_MODE
				Debug.Log(" > 대표동물 변경 > 아이디가 존재하지 않는다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_ANIMAL_NOT_INVEN:
				#if NET_DEBUG_MODE
				Debug.Log(" > 대표동물 변경 > 해당 동물아니거나 없다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_ANIMAL_NOT_ALIVE:
				#if NET_DEBUG_MODE
				Debug.Log(" > 대표동물 변경 > 해당 동물이 창고에 배치되어 있지 않다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log(" > 대표동물 변경. > 오류 팝업처리.");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_ANIUSEITEM:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ANIUSEITEM _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIUSEITEM > success");
				#endif					
				//전체 소모성 아이템만 보내드림.
				parser.parsing(_xml, "consumeowner");
				while(parser.next()){
					parser.getInt("listidx");
					parser.getInt("itemcode");
					parser.getInt("cnt");			//0개 이하도 보내줌.
					parser.getString("randserial");
				}
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIUSEITEM > error > 아이디가 존재하지 않는다.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_ENOUGH:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIUSEITEM > error > 정보가 불충분합니다.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_MATCH:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIUSEITEM > error > 소모성 정보가 불일치 합니다.");	
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIUSEITEM > error > not found error");
				#endif
				break;
			}
		}
			break;	
		case Protocol.PTS_ANIREVIVAL:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ANIREVIVAL _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIREVIVAL > success");
				#endif
				ServerData.parser_gamecostA = parser.getInt("gamecost");	//게임머니.
				ServerData.parser_cashcost = parser.getInt("cashcost");		//캐쉬.
				
				parser.parsing(_xml, "aniowner");				
				if ( parser.next() ){
					ServerData.PushUserITemData ( out ServerData.parser_userItem_Animal ,
					                             parser.getInt("listidx") ,
					                             parser.getInt("invenkind") , 
					                             parser.getInt("fieldidx"),
					                             parser.getInt("itemcode"),
					                             parser.getInt("cnt"),
					                             parser.getInt("anistep"),
					                             parser.getInt("manger"),
					                             parser.getInt("diseasestate"),
					                             parser.getInt("acc1"),
					                             parser.getInt("acc2"),
					                             parser.getInt("petupgrade"),
					                             parser.getInt("treasureupgrade"),
					                             parser.getInt("needhelpcnt"),
					                             parser.getString("randserial"),					                             
					                             parser.getInt("upcnt"),			//세포 누적횟수.
					                             parser.getInt("upstepmax"),		//세포 누적Max.  iteminfo.xml의 upstepmax는 사용하지 마세요.
					                             parser.getInt("freshstem100"),		//세포로 늘어난 신선도.
					                             parser.getInt("attstem100"),		//공격력.
					                             parser.getInt("defstem100"),		//방어력.
					                             parser.getInt("hpstem100"),		//HP.
					                             parser.getInt("timestem100")		//줄어든 시간.
					                             );
				}
				
				//부활템 정보.().
				parser.parsing(_xml, "consumeowner");
				if ( parser.next() ){	
					ServerData.PushUserITemData ( out ServerData.parser_userItem_RivivalTicket ,
					                             parser.getInt("listidx") ,
					                             parser.getInt("invenkind") , 
					                             parser.getInt("fieldidx"),
					                             parser.getInt("itemcode"),
					                             parser.getInt("cnt"),
					                             parser.getInt("anistep"),
					                             parser.getInt("manger"),
					                             parser.getInt("diseasestate"),
					                             parser.getInt("acc1"),
					                             parser.getInt("acc2"),
					                             parser.getInt("petupgrade"),
					                             parser.getInt("treasureupgrade"),
					                             parser.getInt("needhelpcnt"),
					                             parser.getString("randserial"),					                             
					                             parser.getInt("upcnt"),			//세포 누적횟수.
					                             parser.getInt("upstepmax"),		//세포 누적Max.  iteminfo.xml의 upstepmax는 사용하지 마세요.
					                             parser.getInt("freshstem100"),		//세포로 늘어난 신선도.
					                             parser.getInt("attstem100"),		//공격력.
					                             parser.getInt("defstem100"),		//방어력.
					                             parser.getInt("hpstem100"),		//HP.
					                             parser.getInt("timestem100")		//줄어든 시간.
					                             );
				}
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIREVIVAL > error > 아이디가 존재하지 않는다.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIREVIVAL > error > 지원하지 않는 모드입니다..");	
				#endif
				break;
			case Protocol.RESULT_ERROR_ANIMAL_NOT_FOUND:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIREVIVAL > error > 동물이 존재하지 않는다..");	
				#endif
				break;
			case Protocol.RESULT_ERROR_ANIMAL_IS_ALIVE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIREVIVAL > error > 동물이 살아 있거나 해당 필드에 다른 동물이 있다.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_ANIMAL_FIELDIDX:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIREVIVAL > error > 입력된 필드 인덱스 오류(-1, 0 ~ 8).");	
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIREVIVAL > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_FDELETE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_FDELETE _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구삭제 > 성공.");
				#endif
				
				ReadFriendList ( _xml ,  "flist"  , parser );
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구추가 실패. > 내아이디를 찾을 수 없습니다. > 팝업처리.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구삭제 실패. > 팝업처리.");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_FADD:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_FADD _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode)
			{
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구추가 > 성공.");
				#endif
				
				//친구 목록.
				ReadFriendList ( _xml ,  "flist"  , parser );
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구추가 실패. > 내아이디를 찾을 수 없습니다. > 팝업처리.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_OTHERID:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구추가 실패. > 친구 아이디를 찾을 수 없습니다. > 팝업처리.");
				#endif
				break;
			case Protocol.RESULT_ERROR_FRIEND_WAIT_MAX:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구추가 실패. > 더 이상 친구 신청을 할 수 없습니다. > 팝업처리.");
				#endif
				break;
			case Protocol.RESULT_ERROR_FRIEND_AGREE_MAX:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구추가 실패. > 더 이상 친구를 맺을 수 없습니다. > 팝업처리.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구추가 실패. > 팝업처리.");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_FSEARCH:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_FSEARCH _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구검색 > 성공.");
				#endif
				
				//친구 목록.
				ReadFriendList ( _xml ,  "fsearch"  , parser );
				
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log(" > 친구검색 실패. > 팝업처리.");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_ITEMSELL:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ITEMSELL _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){				
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMSELL > success");
				#endif	
				
				//1. 지급된 것들.
				ServerData.parser_gamecostA = parser.getInt("gamecost");//게임머니.
				ServerData.parser_cashcost = parser.getInt("cashcost");	//캐쉬.
				ServerData.parser_heart = parser.getInt("heart");		//하트.
				ServerData.parser_feed = parser.getInt("feed");			//건초.									
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMSELL > error > 아이디를 확인해라.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMSELL > error > 아이템을 찾을 수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_ITEMCOST_WRONG:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMSELL > error > 판매 단가가 이상합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_ENOUGH:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMSELL > error > 판매 수량을 초과했다.");
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMSELL > error > not found error");
				#endif
				break;
			}
		}
			break;

		case Protocol.PTS_ITEMSELLLIST:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ITEMSELLLIST _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMSELLLIST > success");
				#endif
				
				//1. 지급된 것들.
//				ServerData.parser_gamecostA 	= parser.getInt("gamecost");//게임머니.
//				ServerData.parser_cashcost 		= parser.getInt("cashcost");//캐쉬.
//				ServerData.parser_heart 		= parser.getInt("heart");	//하트.
//				ServerData.parser_feed 			= parser.getInt("feed");	//건초.
//				ServerData.parser_goldticket = parser.getInt("goldticket");	//골드티켓.;
//				ServerData.parser_battleticket = parser.getInt("battleticket");	//배틀티켓

				//parser.getInt("fpoint");		//우정포인트.

				//1. 지급된 것들.
				ServerData.InitGoldCashHeartFeedGoldTicketBattleTicketFpoint(parser.getInt("gamecost"), 
				                                                             parser.getInt("cashcost"), 
				                                                             parser.getInt("heart"), 
				                                                             parser.getInt("feed"), 
				                                                             parser.getInt("goldticket"), 
				                                                             parser.getInt("battleticket"),
				                                                             parser.getInt("fpoint")
				                                                             );

				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMSELLLIST > error > 아이디를 확인해라.");
				#endif
				break;
			case Protocol.RESULT_ERROR_PARAMETER:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMSELLLIST > error > 리스트 파라미터 오류발생했습니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMSELLLIST > error > not found error");
				#endif
				break;
			}
		}
			break;

		case Protocol.PTS_ITEMBUY:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ITEMBUY _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMBUY > success");
				#endif	
				
				//1. 지급된 것들.
				ServerData.parser_gamecostA = parser.getInt("gamecost");//게임머니.
				ServerData.parser_cashcost = parser.getInt("cashcost");	//캐쉬.
				ServerData.parser_heart = parser.getInt("heart");		//하트.
				ServerData.parser_feed = parser.getInt("feed");			//건초.															
				ServerData.parser_goldticket 	= parser.getInt("goldticket");		//골드티켓.	
				ServerData.parser_battleticket 	= parser.getInt("battleticket");	//싸움티켓.

				//2. 보유아이템들.			
				ServerData.parser_userItemData = null;
				parser.parsing(_xml, "itemowner");
				if ( parser.next() )
				{
					ReadServerItemData ( out ServerData.parser_userItemData , parser );
				}
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMBUY > error > 아이디를 확인해라.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMBUY > error > 아이템을 찾을 수 없습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_CASHCOST_LACK:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMBUY > error > 캐쉬가 부족합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_GAMECOST_LACK:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMBUY > error > 코인이 부족합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_ITEMCOST_WRONG:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMBUY > error > 코인과 캐쉬 가격이 모두 (0)으로 이상합니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_DOUBLE_RANDSERIAL:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMBUY > error > 중복구매입니다. (씨리얼중복).");
				#endif
				break;
			case Protocol.RESULT_ERROR_INVEN_FULL:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMBUY > error > 인벤이 풀입니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_MAXCOUNT:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMBUY > error > 구매수량을 초과했습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_MATCH:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMBUY > error > 링크 번호가 잘못 연결되었습니다.");
				#endif
				break;				
			case Protocol.RESULT_ERROR_ANIMAL_DAILY_FULL:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMBUY > error >1일 동물 구매 수량을 초과했습니다.");
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ITEMBUY > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_CHANGEPW:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_CHANGEPW _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:				
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CHANGEPW > success > 패스워드를 새로 발급했습니다. 표시해주세요.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CHANGEPW > error > 아이디를 찾을수 없습니다. > 단순팝업처리");
				#endif
				break; 
			case Protocol.RESULT_ERROR_NOT_FOUND_PHONE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CHANGEPW > error > 폰번호가 매칭이 안됩니다. > 단순팝업처리 ");
				#endif
				break; 
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CHANGEPW > error > not found error");
				#endif
				break;
			}
			
		}
			break;	
		case Protocol.PTS_GIFTGAIN:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_GIFTGAIN _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_GIFTGAIN > success");
				#endif	
				
				ServerData.parser_gamecostA 	= parser.getInt("gamecost");		//게임머니.
				ServerData.parser_cashcost 		= parser.getInt("cashcost");		//캐쉬.
				ServerData.parser_heart 		= parser.getInt("heart");			//하트.
				ServerData.parser_feed 			= parser.getInt("feed");			//건초.									
				ServerData.parser_FPoint 		= parser.getInt("fpoint");			//건초.

				ServerData.cashpoint 			= 	parser.getInt("cashpoint");		//내가 구매한 캐쉬포인트.
				ServerData.UpdateVipGrade();	//vip등급 업데이트.

				ServerData.parser_goldticket 	= parser.getInt("goldticket");		//골드티켓.	
				ServerData.parser_battleticket 	= parser.getInt("battleticket");	//싸움티켓.	

				//배틀박스정보.
				ServerData.parse_boxslotidx = parser.getInt("boxslotidx");
				ServerData.parse_boxslottime = parser.getString("boxslottime");
				ServerData.parser_boxslot1 = parser.getInt("boxslot1");
				ServerData.parser_boxslot2 = parser.getInt("boxslot2");
				ServerData.parser_boxslot3 = parser.getInt("boxslot3");
				ServerData.parser_boxslot4 = parser.getInt("boxslot4");
				ServerData.UpdateBattleBox();

				//2. 보유아이템들.	
				ServerData.parser_userItemData = null;
				ServerData.parser_userItemData2 = null;
				parser.parsing(_xml, "itemowner");
				if ( parser.next() )
				{
					ReadServerItemData ( out ServerData.parser_userItemData , parser );
				}

				if ( parser.next() )
				{
					ReadServerItemData ( out ServerData.parser_userItemData2 , parser );
				}	
				
				
				ReadGiftData ( _xml, "giftitem" , parser );		
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_GIFTGAIN > error > 아이디를 확인해라.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_GIFTITEM_NOT_FOUND:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_GIFTGAIN > error > 선물아이템 존재자체를 안함.");
				#endif
				break;
			case Protocol.RESULT_ERROR_GIFTITEM_ALREADY_GAIN:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_GIFTGAIN > error > 지급 및 삭제되었습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_GIFTGAIN > error > 지원하지 않는 모드값입니다.");
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_GIFTGAIN > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_DAILYREWARD:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_DAILYREWARD _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				
				#if NET_DEBUG_MODE
				Debug.Log("PTS_DAILYREWARD > success");
				#endif
				
				
				ReadGiftData ( _xml, "giftitem" , parser );	
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_DAILYREWARD > error > 아이디를 확인해라");	
				#endif
				break;
			case Protocol.RESULT_ERROR_DAILY_REWARD_ALREADY:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_DAILYREWARD > error > 데일리 보상 이미 지급했다.");
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_DAILYREWARD > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_LOGIN:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_LOGIN _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_LOGIN > success");
				#endif
				
				ServerData serverData = GameManager.serverData = new ServerData ();

				//유저 정보.
				parser.parsing(_xml, "userinfo");
				if(parser.next())
				{
					//유저배틀박스 정보.
					ServerData.userbattle_trophy = parser.getInt("trophy");
					ServerData.userbattle_tier = parser.getInt("tier");

					ServerData.psrser_userbattleanilist.Clear();
					ServerData.AddUserBattleAniList(parser.getInt("userbattleanilistidx1"));	//동물 listidx번호.
					ServerData.AddUserBattleAniList(parser.getInt("userbattleanilistidx2"));	// >=0 이면 동물listidx-1 동물없음.
					ServerData.AddUserBattleAniList(parser.getInt("userbattleanilistidx3"));	// -1  이면 동물없음.
					ServerData.parse_boxslotidx = parser.getInt("boxslotidx");
					ServerData.parse_boxslottime = parser.getString("boxslottime");
					ServerData.parser_boxslot1 = parser.getInt("boxslot1");
					ServerData.parser_boxslot2 = parser.getInt("boxslot2");
					ServerData.parser_boxslot3 = parser.getInt("boxslot3");
					ServerData.parser_boxslot4 = parser.getInt("boxslot4");
					ServerData.UpdateBattleBox();

					//출석정보.
					Ui_DailyBonus.attenDdate = System.DateTime.Parse ( parser.getString("attenddate") );
					Ui_DailyBonus.attendCnt = parser.getInt("attendcnt");
					Ui_DailyBonus.attendNewDay = parser.getInt("attendnewday");		//출석팝업 1(출력), 0(비출력).
					
					//유저기본정보.
					serverData.cash = parser.getInt("cashcost");			//캐쉬.						
					serverData.gold = parser.getInt("gamecost");			//게임머니.
					serverData.feed = parser.getInt("feed");				//건초.
					serverData.heart = parser.getInt("heart");				//하트(작물 > 수확, 친구추천 > ).

					serverData.farmbattleopenlv = parser.getInt("farmbattleopenlv");
					ServerData.parser_goldticket 	= parser.getInt("goldticket");		//골드티켓.	
					ServerData.parser_battleticket 	= parser.getInt("battleticket");	//싸움티켓.	
					ServerData.parser_goldtickettime = DateTime.Parse ( parser.getString("goldtickettime") );	//골드티켓 time (10분에 1개씩 차오름, max 이상 안오름).	
					//Debug.Log ("GoldTicket : " + ServerData.parser_goldticket);
					//Debug.Log ("GoldTicketTime : " + ServerData.parser_goldtickettime);
					ServerData.parser_battletickettime = DateTime.Parse ( parser.getString("battletickettime") );//싸움티켓 time (10분에 1개씩 차오름, max 이상 안오름).//Debug.Log(parser.getString("goldtickettime") + " / " + parser.getString("battletickettime"));
					GameData.Max_GoldTicket		= parser.getInt("goldticketmax");//골드티켓 max.	
					GameData.Max_BattleTicket	= parser.getInt("battleticketmax");	//싸움티켓 max.	

					//@@@@ start 0032
					ServerData.parser_tradesuccesscnt = parser.getInt("tradesuccesscnt");	//거래성공횟수.
					ServerData.parser_tradeclosedealer = parser.getInt("tradeclosedealer");	//잠김상인번호.
					//@@@@ end

					//@@@@ start 0021
					//마지막 참여한 목장번호와 참가했던 동물listidx(이것으로 재세팅해주면 됩니다.)
					ServerData.parser_battlefarmidx = parser.getInt("battlefarmidx");		//마지막 클리어한 목장번호 6900 목장번호.

					ServerData.psrser_battleanilist.Clear();
					ServerData.AddBattleAniList(parser.getInt("battleanilistidx1"));	//동물 listidx번호.
					ServerData.AddBattleAniList(parser.getInt("battleanilistidx2"));	// >=0 이면 동물listidx-1 동물없음.
					ServerData.AddBattleAniList(parser.getInt("battleanilistidx3"));	// -1  이면 동물없음.
					//parser.getInt("battleanilistidx4");
					//parser.getInt("battleanilistidx5");
					//@@@@ end

					ServerData.InitSlotItem(parser.getInt("tslistidx1"),
					                        parser.getInt("tslistidx2"),
											parser.getInt("tslistidx3"),
					                        parser.getInt("tslistidx4"),
					                        parser.getInt("tslistidx5"));


					ServerData.parser_FPoint = parser.getInt("fpoint");		//우정포인트(110 > 1개, 10포인트)로 표현함.
					ServerData.parser_FPointMax = parser.getInt("fpointmax");
					
					ServerData.parser_RivalQuestCode = parser.getInt("comreward");		//경쟁모드 번호.(초기 -1, 보상후부터는 기록된것).
					ServerData.parser_mboardstate = parser.getInt("mboardstate");		//보상상태.
					ServerData.parser_mboardreward = parser.getInt("mboardreward");		//보상금액.
					
					//게임정보(일반).						
					Calendar.yearStart = parser.getInt("startyear") ;		// 게임 시작. 연도.
					Calendar.monthStart = parser.getInt("startmonth");
					Calendar.yearNow = parser.getInt("gameyear") ;			//게임진행 2013년 3월부터 시작(봄).
					Calendar.monthNow = parser.getInt("gamemonth");			//
					
					ServerData.parser_feverGauge = parser.getInt("fevergauge");
					
					serverData.lastPlayedGameTime = parser.getInt("frametime");			//한달타임.
					serverData.goodDealCount = parser.getInt("tradecnt");				//연속거래 성공횟수.		serverData.goodDealCount = 5;				//연속거래 성공횟수.
					serverData.goodDealGainCount = parser.getInt("prizecnt");			//상장받은 횟수.					
					ServerData.parser_tradeFailCntA = parser.getInt("tradefailcnt");	//연속거래 실패.
					serverData.fame = parser.getInt("fame");							//명성도.
					//Debug.Log ("serverData.fame : " + serverData.fame);
					//게임정보(소모).
					serverData.bulletListIdx = parser.getInt("bulletlistidx");			//총알(-1:빈곳, 아이템코드).
					serverData.vaccineListIdx = parser.getInt("vaccinelistidx");		//백신(-1:빈곳, 아이템코드).
					serverData.boosterListIdx = parser.getInt("boosterlistidx");		//촉진제(부스터)(-1:빈곳, 아이템코드).
					serverData.albaListIdx = parser.getInt("albalistidx");				//알바(-1:빈곳, 아이템코드).
					
					//게임정보(인벤).			
					serverData.invenAnimalBase = parser.getInt("invenanimalbase");		//동물인벤개수.
					serverData.invenCustomBase = parser.getInt("invencustombase");		//소비인벤개수.
					serverData.invenAccBase = parser.getInt("invenaccbase");			//악세인벤개수.
					serverData.invenStemCellBase = parser.getInt("invenstemcellbase");	//줄기세포.
					serverData.invenTreasureBase = parser.getInt("inventreasurebase");	//보물인벤.

					serverData.invenAnimalStep = parser.getInt("invenanimalstep");		//동물인벤개수.
					serverData.invenCustomStep = parser.getInt("invencustomstep");		//소비인벤개수.
					serverData.invenAccStep = parser.getInt("invenaccstep");			//악세인벤개수.
					serverData.invenStemCellStep = parser.getInt("invenstemcellstep");	//줄기세포.
					serverData.invenTreasureStep = parser.getInt("inventreasurestep");	//보물.

					//게임정보(시설업글).
					ServerData.parser_houseStep = parser.getInt("housestep");							//집.
					ServerData.parser_houseState = parser.getInt("housestate");							//다음단계진행여부(-1:미진행, 완료중, 1:다음단계진행중).
					ServerData.parser_houseTime = DateTime.Parse ( parser.getString("housetime") );		//다음단계시간.
					
					ServerData.parser_tankStep = parser.getInt("tankstep");								//우유탱크.
					ServerData.parser_tankState = parser.getInt("tankstate");							//
					ServerData.parser_tankTime = DateTime.Parse ( parser.getString("tanktime") );		//
					
					ServerData.parser_bottleStep = parser.getInt("bottlestep");							//양동이.
					ServerData.parser_bottleState = parser.getInt("bottlestate");						//
					ServerData.parser_bottleTime = DateTime.Parse ( parser.getString("bottletime") );	//
					
					ServerData.parser_pumpStep = parser.getInt("pumpstep");								//착유기.
					ServerData.parser_pumpState = parser.getInt("pumpstate");							//
					ServerData.parser_pumpTime = DateTime.Parse ( parser.getString("pumptime") );		//
					
					ServerData.parser_transferStep = parser.getInt("transferstep");						//주입기.
					ServerData.parser_transferState = parser.getInt("transferstate");					//
					ServerData.parser_transferTime = DateTime.Parse ( parser.getString("transfertime") );//
					
					ServerData.parser_pureStep = parser.getInt("purestep");								//정화시설.
					ServerData.parser_pureState = parser.getInt("purestate");							//
					ServerData.parser_pureTime = DateTime.Parse ( parser.getString("puretime") );		//	
					
					ServerData.parser_freshCoolstep = parser.getInt("freshcoolstep");						//저온보관.
					ServerData.parser_freshCoolState = parser.getInt("freshcoolstate");						//
					ServerData.parser_freshCoolTime = DateTime.Parse ( parser.getString("freshcooltime") );	//	
					
					serverData.bottleLittler = parser.getInt("bottlelittle");			//[양동이] 보유량 총리터.
					serverData.bottleFresh = parser.getInt("bottlefresh");				//         보유 총신선도.
					serverData.tankLittler = parser.getInt("tanklittle");				//[탱크] 보유량 총리터.
					serverData.tankFresh = parser.getInt("tankfresh");					//       보유 총신선도.
					
					
					//기타정보.
					ServerData.parser_tutoMode = parser.getInt("tutorial");				//0: 미진행 첫 로그인,
					//1: 완료,
					//2: 미진행 첫 로그인 아님.
					
					ServerData.parser_kkhelpalivecnt = parser.getInt("kkhelpalivecnt");	//>= 1 도움 받아서 부활한 동물의 수량 > 팝업 처리하면된다.
					
					ServerData.parser_aniRepListIdx = parser.getInt("anireplistidx");	// 대표동물 내부인덱스번호.
					parser.getString("anirepmsg");										// 대표설정 메세지 인듯.
					
					//GameData.roulAccPrice = ;		//10수정 악세뽑기 가격.
					//GameData.roulAccSale = ;		// 악세 뽑기 할인율.
					GameData.SetRoulPrice ( parser.getInt("roulaccprice") , parser.getInt("roulaccsale") ); 
					
					//GameData.freePrimeumCurCnt 	= parser.getInt("pmgauage");			//현재 획득한 수치.					
					
					ServerData.parser_boosteruse = parser.getInt("boosteruse");			//촉진제사용여부(-1:미사용,	아이템코드번호:사용중).
					ServerData.parser_albause01a = parser.getInt("albause");			//알바제사용여부(-1:미사용, 	아이템코드번호:사용중).
					ServerData.parser_albause02 = parser.getInt("albausesecond");		//알바제사용여부(-1:미사용, 	아이템코드번호:사용중).
					ServerData.parser_albause03 = parser.getInt("albausethird");		//알바제사용여부(-1:미사용, 	아이템코드번호:사용중).
					
					ServerData.parser_wolfappearA = parser.getInt("wolfappear");		//늑대존재여부(-1:미존재, 		1:존재).
					
					ServerData.parser_bestLevel = parser.getInt ( "famelvbest" );
					
					ReadRivalData ( parser );
					
					// 유져데이타 for 라이벌 데이타.
					ReadParamForRival (parser.getInt("param0"),  parser.getInt("param1"),  parser.getInt("param2"),
					                   parser.getInt("param3"), parser.getInt("param4"), parser.getInt("param5"),
					                   parser.getInt("param6"), parser.getInt("param7"), parser.getInt("param8"),
					                   parser.getInt("param9") );
					
					ServerData.parser_schoolIdx = parser.getInt("schoolidx");
					//-1 : 미가입자 	> 가입.
					//     월(O) 화(O) 수(O) 목(O) 금(O) 토(O) 일(X). 
					//     월 ~ 토요일 까지 가입 가능, 일요일은 불가능.
					// >= 1 > 가입자 > 재가입.
					//     월(O) 화(X) 수(X) 목(X) 금(X) 토(X) 일(X). 
					ServerData.parser_schoolResult = parser.getInt("schoolresult");		
					//전주 랭킹이 있는가?. -1:없음. 1:있음 > 1회만 보여주시면 됩다.
					
					DownLoadData.RankInitDayData.SetInitDay ( parser.getString("schoolinitdate") );
					
					//이번주 일요일 날짜. 
					//오늘 2013-12-27(금) > 초기화 2013-12-29 23:59:00
					//남은 시간을 표시해주면 된다.
					
					ServerData.parser_schoolName = parser.getString ( "schoolname" );
					
					//지난 친구랭킹.
					ReadLastFriendRankData ( parser );
					
					ServerData.parser_farmHarvestA = parser.getInt ( "farmharvest" );
					ServerData.parser_sendHeart = parser.getInt ( "sendheart" );
					ServerData.parser_friendInvite = parser.getInt ( "friendinvite" );
					
					//parser.getInt("kakaomsginvitecnt");			//전체 초대인원수. > 상품 표시.
					//parser.getString("kakaomsginvitetodaydate");	//1일 초대 인원수 초기화 날짜.(표시안해되됨)
					
					Ui_TopMenu_KaKao_Invite.kakaoInviteTotalCnt = parser.getInt("kakaomsginvitecnt");
					Ui_TopMenu_KaKao_Invite.kakaoInviteTodayCnt = parser.getInt("kakaomsginvitetodaycnt");	//1일 초대 인원수.
					
					//에피소드 진행돈.
					DownLoadData.EpisodeData.parser_etsalecoinA 		= parser.getInt("etsalecoin");
					DownLoadData.EpisodeData.parser_etremain 		= parser.getInt("etremain");		
					//진행중의 남은달.
					// -1 		: 표시안함.
					// 1이상 	: 남은달.
					
					ReadPetInfo ( parser );
					
					ReadFieldOpenInfo ( parser );
					
					//KakaoManager.Instance.stKakaoLocalUser.talkId = parser.getString("kakaotalkid");
					//KakaoManager.Instance.stKakaoLocalUser.userId = parser.getString("kakaouserid");
					
					ServerData.sendCode_kakaonickname = parser.getString("kakaonickname");
					ServerData.parser_nicknamechage = parser.getInt("nicknamechange");
					//Debug.Log ("ServerData.parser_nicknamechage : " + ServerData.parser_nicknamechage);
					//Debug.Log ("ServerData.sendCode_kakaonickname : " + ServerData.sendCode_kakaonickname);
					//KakaoManager.Instance.stKakaoLocalUser.profile = SSUtil.DecryptString(parser.getString("kakaoprofile"));

					GameData.myMessageBlocked = parser.getInt("kakaomsgblocked");
					
					ServerData.parser_bgcomposewt 	= System.DateTime.Parse ( parser.getString("bgcomposewt") );	//합성 가능 시간(이시간 이후부터 합성이 가능합니다.)
					ServerData.parser_bgcomposecc 	= parser.getInt("bgcomposecc");									//합성 가능 시간초기화 비용.

					GameData.bgcomposecnt	= parser.getInt ( "bgcomposecnt" );
					GameData.bgtradecnt		= parser.getInt ( "bgtradecnt" );
					//@@@@ start 0068
					//최고 연속 거래 정보.
					GameData.bgcttradecnt	= parser.getInt ( "bgcttradecnt" );
					//@@@@ end

					GameData.bgroulcnt			= parser.getInt ( "anigrade1cnt" );		//동물 일반뽑기 횟수.
					GameData.pmroulcnt			= parser.getInt ( "anigrade2cnt" );		//동물 루비뽑기 횟수.
					GameData.freePrimeumCurCnt 	= parser.getInt ( "anigrade2gauage" );	//동물 루비뽑기 획득 게이지.
					GameData.pmroulcnt2			= parser.getInt ( "anigrade4cnt" );		//동물 루비뽑기 10+1.					<= 신규추가.
					GameData.freePrimeumCurCnt2 = parser.getInt ( "anigrade4gauage" );	//동물 루비뽑기 10+1획득 게이지.		<= 신규추가.

					GameData.tsgrade1cnt = parser.getInt ( "tsgrade1cnt" );	//보물 일반뽑기 횟수.
					GameData.tsgrade2cnt = parser.getInt ( "tsgrade2cnt" );	//보물 루비뽑기 횟수.
					GameData.TsfreePrimeumCurCnt = parser.getInt ( "tsgrade2gauage" );	//보물 루비뽑기 획득 게이지.
					GameData.tsgrade4cnt = parser.getInt ( "tsgrade4cnt" );	//보물 루비뽑기 10+1.		
					GameData.TsfreePrimeumCurCnt2 = parser.getInt ( "tsgrade4gauage" );	//보물 루비뽑기 10+1획득

					//@@@@ start 0067
					GameData.tsupcnt		= parser.getInt("tsupcnt");			//누적보물강화횟수(109).
					GameData.bgbattlecnt	= parser.getInt("bgbattlecnt");		//누적배틀참여().
					GameData.bganiupcnt		= parser.getInt("bganiupcnt");		//누적동물강화(107).
					//@@@@ end

					GameData.SetDealerSelectedInGroup ( 0 , parser.getInt ( "trade0" ) );
					GameData.SetDealerSelectedInGroup ( 1 , parser.getInt ( "trade1" ) );
					GameData.SetDealerSelectedInGroup ( 2 , parser.getInt ( "trade2" ) );
					GameData.SetDealerSelectedInGroup ( 3 , parser.getInt ( "trade3" ) );
					GameData.SetDealerSelectedInGroup ( 4 , parser.getInt ( "trade4" ) );
					GameData.SetDealerSelectedInGroup ( 5 , parser.getInt ( "trade5" ) );
					GameData.SetDealerSelectedInGroup ( 6 , parser.getInt ( "trade6" ) );
					
					//행운의 주사위 정보.
					Ui_DiceGamble.yabauidx = parser.getInt("yabauidx");				//주사위 인덱스 번호.(리스트 갱신을 하면 이것 바뀐다. 상세 정보는 아래에 위치 => sysyabau)
					Ui_DiceGamble.yabaustep = parser.getInt("yabaustep");			//0 주사위 안굴림, 1 ~6 주사위 굴림.	
					Ui_DiceGamble.yabauchange = parser.getInt("yabauchange");		//리스트 갱신에 들어가는 코인 비용.					
					
					Constant.FPOINT_TO_CASH_DEALER 		= parser.getInt("needfpoint");		//황금 상인 호출할 때 드는 우정포인트값.
					Constant.EXCHANGE_BASE_ANIMAL_LEVEL	= parser.getInt("anicomposelevel");	//합성 메인 레벨.
					Constant.NEW_START_INIT_LV			= parser.getInt("newstartinitlv");	//새로시작하기 시간초기화모델.
					Constant.ANIMAL_LIMIT_TREASURE_VAL	= parser.getInt("treasureval");		//보물과 촉진제 동시 사용시 효과 적용값.
					
					GameData.combackUserStep  =		parser.getInt("rtnstep");		//>= 1 단계(아이콘 표시), -1: 아님.
					GameData.combackUserState = 	parser.getInt("rtnplaycnt");	//각단계별 거래횟수.					
					GameData.sid 			= 	parser.getInt("sid");			//세션SID.					

					//@@@@ start 0079
					//스킬 공격력.
					GameData.SetAtkAbility(parser.getInt("atk1"), parser.getInt("atk2"), parser.getInt("atk3"));
					GameData.SetDefAbility(parser.getInt("def1"), parser.getInt("def2"), parser.getInt("def3"));
					GameData.SetHpAbilityTime(parser.getInt("hp1"), parser.getInt("hptime1"),
					                          parser.getInt("hp2"), parser.getInt("hptime2"),
					                          parser.getInt("hp3"), parser.getInt("hptime3"));
					GameData.SetTurnTimeAbilityTime(parser.getInt("turn1"), parser.getInt("turntime1"),
					                                parser.getInt("turn2"), parser.getInt("turntime2"),
					                                parser.getInt("turn3"), parser.getInt("turntime3"));
					//@@@@ end

					//@@@@ start 0117
					Constant.DEALER_PLUS_STEP1 = parser.getInt("dpstep1");
					Constant.DEALER_PLUS_STEP2 = parser.getInt("dpstep2");
					Constant.DEALER_PLUS_STEP3 = parser.getInt("dpstep3");
					Constant.DEALER_PLUS_STEP4 = parser.getInt("dpstep4");
					Constant.DEALER_PLUS_STEP5 = parser.getInt("dpstep5");
					Constant.DEALER_PLUS_STEP6 = parser.getInt("dpstep6");
					Constant.DEALER_PLUS_STEP7 = parser.getInt("dpstep7");
					Constant.DEALER_PLUS_STEP8 = parser.getInt("dpstep8");
					Constant.DEALER_PLUS_STEP9 = parser.getInt("dpstep9");
					Constant.DEALER_PLUS_STEPM = parser.getInt("dpstepm");
					//@@@@ end
					
					ServerData.wheeltodaycnt =	parser.getInt("wheeltodaycnt");		//무료룰렛 		: 안돌림(0), 돌림(1) 즉 돌린 횟수를 서버에서 카운터 합니다. 다음날이 되면 무조건 초기화되고요.
					ServerData.wheelgauage =	parser.getInt("wheelgauage");		//황금룰렛 		: 게이지 이벤트를 진행중이면 현재의 게이지.
					ServerData.wheelfree =	parser.getInt("wheelfree");		//황금룰렛무료 	: 게이지가 풀이되면 1개가 들어옴. -> 없음(0), 있음(1)
					//*참고로 세팅 정보는 syssinfo -> wheelgauageflag, wheelgauagepoint, wheelgauagemax에 있음.

					//0122
					ServerData.cashpoint = parser.getInt("cashpoint");		//내가 구매한 캐쉬포인트.

					//@@@@ start 0125
					//1-1. 미참여(0)
					//     팝업알림 -> 룰렛.
					//1-2. 참여중(1)
					//     랭킹정보 -> 룰렛.
					ServerData.rkstartstate = parser.getInt("rkstartstate");	//참여중(1), 미참여(0)
					
					//2-1. 청백전의 팀과 기여도.
					ServerData.rkteam = parser.getInt("rkteam");		//팀정보 청(1), 백(0)
					
					//3-1. 내가 팀에 기여한 기여도.
					//     각요소의 이름과 설명은 서버에서 보내줌.
					ServerData.AddRkData("Player", 
					                     parser.getInt64("rksalemoney"),		//내가 기여한 기도 1요소.
					                     parser.getInt64("rksalebarrel"),	//
					                     parser.getInt64("rkbattlecnt"),		//
					                     parser.getInt64("rkbogicnt"),		//
					                     parser.getInt64("rkfriendpoint"),	//
					                     parser.getInt64("rkroulettecnt"),	//
					                     parser.getInt64("rkwolfcnt"));		//
					//@@@@ end
				}  // userInfo
				
				//유저 보유 아이템 정보.
				parser.parsing(_xml, "itemowner");
				ServerData.Clear_ListUserItemData ();
				while(parser.next()){						
					ServerData.PushUserITemData ( 	parser.getInt("listidx") ,
					                             parser.getInt("invenkind") , 
					                             parser.getInt("fieldidx"),
					                             parser.getInt("itemcode"),
					                             parser.getInt("cnt"),
					                             parser.getInt("anistep"),
					                             parser.getInt("manger"),
					                             parser.getInt("diseasestate"),
					                             parser.getInt("acc1"),
					                             parser.getInt("acc2"),
					                             parser.getInt("petupgrade"),
					                             parser.getInt("treasureupgrade"),
					                             parser.getInt("needhelpcnt"),
					                             parser.getString("randserial"),
					                             parser.getInt("upcnt"),			//세포 누적횟수.
					                             parser.getInt("upstepmax"),		//세포 누적Max.  iteminfo.xml의 upstepmax는 사용하지 마세요.
					                             parser.getInt("freshstem100"),		//세포로 늘어난 신선도.
					                             parser.getInt("attstem100"),		//공격력.
					                             parser.getInt("defstem100"),		//방어력.
					                             parser.getInt("hpstem100"),		//HP.
					                             parser.getInt("timestem100"),		//줄어든 시간
												 parser.getInt("expirekind"),		//만기템(1), 만기아님(-1).
												 parser.getString("expiredate")		
					                             );
					
				}
				
				
				//유저 경작지.
				parser.parsing(_xml, "seedfield");
				while(parser.next()){
					//공통 정보.
					serverData.PushUserFarmData (  	parser.getInt("seedidx"),
					                             parser.getInt("itemcode"),
					                             parser.getString("seedstartdate"),
					                             parser.getString("seedenddate") );
					/*
						parser.getInt("fieldidx");			//0 ~ 11(12개)
						parser.getInt("itemcode");			//씨앗 :>= 0 아이템 코드 번호.
															//		Protocol.USERSEED_NEED_EMPTY  	-1 : 구매, 빈곳.
															//		Protocol.USERSEED_NEED_BUY		-2 : 미구매.
						parser.getString("seedstartdate");	//시작일.
						parser.getString("seedenddate");	//만료일.
						*/
				}
				
				//유저 친구정보.
				ReadFriendList ( _xml ,  "userfriend"  , parser );
				
				ReadInviteInfo ( _xml , "kakaoinvite" , parser );
				
				//선물정보.
				ReadGiftData ( _xml, "giftitem" , parser );	
				
				//도감 : 획득한 동물.
				parser.parsing(_xml, "dogamlist");
				while(parser.next()){
					serverData.PushMyCollect ( parser.getInt("itemcode") );			//획득한 동물 아이템 코드(구매, 뽑기, 대회 등등에서 획득시 자동 수집됨).
				}
				
				//도감 : 보상받은 도감.
				parser.parsing(_xml, "dogamreward");
				while(parser.next()){
					serverData.PushWasGainDogamReward ( parser.getInt("dogamidx") );
					//보상을 받아간 도감번호. 번호가 없으면 안받아감.
					//1 : 1번을 받아갔다는 의미.
					//  : 2번이 전부 수집했는데 여기 리스트에 없으면 안받아갔다는 의미. 
				}
				
				// 펫 도감 읽기.
				ReadPetDogam ( _xml , "dogamlistpet" , parser );
				
				//시스템 정보.
				parser.parsing(_xml, "syssinfo");
				if(parser.next()){
					
					GameData.upgradeMax_house 		= parser.getInt ( "housestepmax" );
					GameData.upgradMax_pump			= parser.getInt ( "pumpstepmax" );
					GameData.upgradeMax_bottle		= parser.getInt ( "bottlestepmax" );
					GameData.upgradeMax_transfer	= parser.getInt ( "transferstepmax" );
					GameData.upgradeMax_tank		= parser.getInt ( "tankstepmax" );
					GameData.upgradeMax_pure		= parser.getInt ( "purestepmax" );
					GameData.upgradeMax_freshCool	= parser.getInt ( "freshcoolstepmax" );
					
					ServerData.parser_PlusCashCost = parser.getInt("pluscashcost");		//캐쉬 구매시 추가.
					ServerData.parser_PlusGameCost = parser.getInt("plusgamecost");		//코인 환전시 추가.
					ServerData.parser_PlusHeart = parser.getInt("plusheart");			//하트 구매시 추가.
					ServerData.parser_PlusGoldTicket = parser.getInt("plusgoldticket");	//골드티켓 구매시 추가.
					ServerData.parser_PlusBattleTicket = parser.getInt("plusbattleticket");	//싸움티켓 구매시 추가.

					serverData.attend1 = parser.getInt("attend1");			//1일 보상 아이템 코드. > 선물함으로 지급됨.
					serverData.attend2 = parser.getInt("attend2");			//2일 보상 아이템 코드. > 선물함으로 지급됨.
					serverData.attend3 = parser.getInt("attend3");			//3일 보상 아이템 코드. > 선물함으로 지급됨.
					serverData.attend4 = parser.getInt("attend4");			//4일 보상 아이템 코드. > 선물함으로 지급됨.
					serverData.attend5 = parser.getInt("attend5");			//5일 보상 아이템 코드. > 선물함으로 지급됨.
					
					KakaoManager.Instance.kakaoInviteId 	= parser.getInt("kakaoinviteid");	//게임 초대메세지 번호.
					KakaoManager.Instance.kakaoProudId 		= parser.getInt("kakaoproudid");	//자랑하기 번호.
					KakaoManager.Instance.kakaoHeartId 		= parser.getInt("kakaoheartid");	//하트 선물하기 번호.
					KakaoManager.Instance.kakaoHelpId 		= parser.getInt("kakaohelpid");		//도와줘친구야 번호.
					
					Ui_TopMenu_KaKao_Invite.kakaoinvite01 = parser.getInt("kakaoinvite01");		//초대보상 아이템코드(10명째).
					Ui_TopMenu_KaKao_Invite.kakaoinvite02 = parser.getInt("kakaoinvite02");		//초대보상 아이템코드(20명째).
					Ui_TopMenu_KaKao_Invite.kakaoinvite03 = parser.getInt("kakaoinvite03");		//초대보상 아이템코드(30명째).
					Ui_TopMenu_KaKao_Invite.kakaoinvite04 = parser.getInt("kakaoinvite04");		//초대보상 아이템코드(40명째).
					
					GameData.iphoneCoupon = parser.getInt("iphonecoupon");			//비활성화(0), 활성화(1).
					
					Ui_Recommend.strRecommendMsg = parser.getString("recommendmsg");//추천글 메세지가 온다.(android만 나온다.)
					
					GameData.hasub_sale = parser.getInt("composesale");				//합성 할인률 가격.

					ServerData.wheelgauageflag = parser.getInt("wheelgauageflag");		//진행(1), 미진행(-1)
					ServerData.wheelgauagepoint = parser.getInt("wheelgauagepoint");	//1회 할때마다 오르는 포인트값.
					ServerData.wheelgauagemax = parser.getInt("wheelgauagemax");		//최대값. 
				}
				
					//무료룰렛판 정보(항상 8개).

					ReadWheelFreeInfo(_xml, "wheelfreeinfo", parser);
					ReadWheelCashInfo(_xml, "wheelcashinfo", parser);
//					parser.parsing(_xml, "wheelfreeinfo");
//					while(parser.next()){
//						parser.getInt("idx");			//룰렛 고유 인덱스 번호. 나중에 룰렛을 돌리고 난다음에 이번호가 온다.
//						parser.getInt("itemcode");		//지급 아이템 코드번호.
//						parser.getInt("cnt");			//지급 아이템 수량.
//					}


					//무료룰렛판 정보(항상 8개).
//					parser.parsing(_xml, "wheelcashinfo");
//					while(parser.next()){
//						parser.getInt("idx");			//룰렛 고유 인덱스 번호. 나중에 룰렛을 돌리고 난다음에 이번호가 온다.
//						parser.getInt("itemcode");		//지급 아이템 코드번호.
//						parser.getInt("cnt");			//지급 아이템 수량.
//					}

					ReadWheelZzayoInfo(_xml, "zcpinfo", parser);

			
				
				parser.parsing(_xml, "syspack");
				while(parser.next()){
					ServerData.parser_sysPack_idx = 		parser.getInt("idx");				//패키지 구매번호(이번호로 상품을 구매함).
					ServerData.parser_packName =			parser.getString("packname");		//패키지 이름.
					ServerData.parser_pack1codeA =			parser.getInt("pack1");				//패키지 아이템코드.
					ServerData.parser_pack2code =			parser.getInt("pack2");				//
					ServerData.parser_pack3code =			parser.getInt("pack3");				//
					ServerData.parser_pack4code =			parser.getInt("pack4");				//
					ServerData.parser_pack5code =			parser.getInt("pack5");				//
					ServerData.parser_sysPack_costOri =		parser.getInt("cashcostcost");		//패키지원래가. 100캐쉬.
					ServerData.parser_sysPack_salePer =		parser.getInt("cashcostper");		//할인가.		10%할인.
					ServerData.parser_sysPack_cost =		parser.getInt("cashcostsale");		//실판매가.		90캐수.					
					
				}
				
				parser.parsing(_xml, "sysroul");
				if ( parser.next () )
				{
					ServerData.parser_roul_gameCost		= parser.getInt ( "roulgrade1gamecost" );	//동물 일반뽑기      코인.		=> 1번째 버턴의 가격.
					ServerData.parser_roul_gameHeart	= parser.getInt ( "roulgrade1heart" );		//동물 일반뽑기      하트.
					ServerData.parser_roul_cashCostOri  = parser.getInt ( "roulgrade2cashcost" );	//동물 루비뽑기      루비가격.		=> 2번쨰 버턴의 가격.
					ServerData.parser_roul_cashCostOri2 = parser.getInt ( "roulgrade4cashcost" );	//동물 루비뽑기 10+1 루비가격.		=> 3번째 버튼의 가격.
				}

				parser.parsing(_xml, "systreasure");
				if ( parser.next () )
				{			
					//레벨이 오르면 가격도 변화됩니다.
					ServerData.parser_Tsroul_gameCost		= parser.getInt ( "tsgrade1gamecost" );	//보물 일반뽑기      코인.		=> 1번째 버턴의 가격.
					ServerData.parser_Tsroul_gameHeart	= parser.getInt ( "tsgrade1heart" );		//보물 일반뽑기      하트.
					ServerData.parser_Tsroul_cashCostOri  = parser.getInt ( "tsgrade2cashcost" );	//보물 루비뽑기      루비가격.		=> 2번쨰 버턴의 가격.
					ServerData.parser_Tsroul_cashCostOri2 = parser.getInt ( "tsgrade4cashcost" );	//보물 루비뽑기 10+1 루비가격.		=> 3번째 버튼의 가격.
				}

				
				// 랭킹 읽기.
				ReadRank ( _xml , "frank" , parser );
				
				ReadContryFarm ( _xml , "myfarm" , parser );
				
				//에피소드 달력 정보.
				Read_Calendar_Datas ( _xml , "myepilist" , parser );
				
				/////////////////////////////
				//학교대항전 랭킹.
				//	schoolresult =  1 읽어라   	> 보여주삼.
				//	schoolresult = -1 읽어감		> 이젠 안보여줘도됨.
				/////////////////////////////
				// 학교 랭킹.
				ReadLastSchoolRank ( _xml , "srankmaster" , parser );
				
				// 학교내 나의 랭킹.
				ReadLastRankInMySchool ( _xml , "srankuser" , parser );
				
				//행운의 주사위 상세 정보.
				ReadSysYabau ( _xml , "sysyabau" , parser );	
				
				//내게 도움을 요청한 친구들.
				ReadListIHelpedFriend ( _xml , "helpfriend" , parser );		
				
				//뽑기 이벤트 정보.
				ReadPmInfo ( _xml , "pminfo" , parser );

				//보물뽑기 이벤트 정보.
				ReadTsInfo ( _xml , "tsinfo" , parser );

				//보유보유 효과로 보상정보.
				parser.parsing(_xml, "tsreffect");
				while ( parser.next () )
				{								//보상아이템코드 -> 이름 or 아이콘 읽으면됨.		//-> 수량.
					ServerData.AddTreasureAttendance(parser.getInt ( "itemcode" ), parser.getInt ( "cnt" ));
				}

				//전체 유저 랭킹.
				ReadAllUserRank(_xml, "ranksale", parser);

				//유저 배틀 랭킹.
				ReadBattleRank(_xml, "rankbattle", parser);

				//생에 첫 결제.
				ReadCashFirstTime(_xml, "cashfirsttime", parser);

				ReadVipInfo(_xml, "vipinfo", parser);
				ServerData.UpdateVipGrade();//VIP 등급을 갱신해준다.

				//@@@@ start 0125
				//4. 컬럼이름.
				parser.parsing(_xml, "rkcolumname");
				if ( parser.next () )
				{
					ServerData.rkInfo.cntrkname1 =	parser.getString ( "rkname1" );	//1줄 컬럼이름		예) 판매수익.
					ServerData.rkInfo.cntrkname2 =	parser.getString ( "rkname2" );	//2줄 컬럼이름		예) 생산배럴.
					ServerData.rkInfo.cntrkname3 =	parser.getString ( "rkname3" );	//3줄 컬럼이름		예) 배틀 포인트.
					ServerData.rkInfo.cntrkname4 =	parser.getString ( "rkname4" );	//4줄 컬럼이름		예) 교배,보물포인트.
					ServerData.rkInfo.cntrkname5 =	parser.getString ( "rkname5" );	//5줄 컬럼이름		예) 친구포인트.
					ServerData.rkInfo.cntrkname6 =	parser.getString ( "rkname6" );	//6줄 컬럼이름		예) 룰렛포인트.
					ServerData.rkInfo.cntrkname7 =	parser.getString ( "rkname7" );	//7줄 컬럼이름		예) 늑대포인트.
					ServerData.rkInfo.rking =	parser.getInt ( "rking" );	//7줄 컬럼이름		예) 늑대포인트.
				}
				
				//5. 랭킹 대전 설명.
				parser.parsing(_xml, "rkinfodata");
				if ( parser.next () )
				{
					ServerData.rkInfo.rkinfo =	parser.getString ( "rkinfo" );	//설명.
				}
				
				//6 현재 랭킹대전 정보..
				parser.parsing(_xml, "rkcurrank");
				if ( parser.next () )
				{
					ServerData.rkCurDate = parser.getString ( "rkdateid8" );	//날짜.
					
					//청팀.
					ServerData.AddRkData("CurBlue", 
										parser.getInt64 ( "rksalemoney" ),	//1번 점수.
										parser.getInt64 ( "rksalebarrel" ),	//2번 점수.
										parser.getInt64 ( "rkbattlecnt" ),	//3번 점수.
										parser.getInt64 ( "rkbogicnt" ),	//4번 점수.
										parser.getInt64 ( "rkfriendpoint" ),//5번 점수.
										parser.getInt64 ( "rkroulettecnt" ),//6번 점수.
										parser.getInt64 ( "rkwolfcnt" ));	//7번 점수.
					
					//백팀.
					ServerData.AddRkData("CurWhite", 
										parser.getInt64 ( "rksalemoney2" ),	//1번 점수.
										parser.getInt64 ( "rksalebarrel2" ),//2번 점수.
										parser.getInt64 ( "rkbattlecnt2" ),	//3번 점수.
										parser.getInt64 ( "rkbogicnt2" ),	//4번 점수.
										parser.getInt64 ( "rkfriendpoint2" ),//5번 점수.
										parser.getInt64 ( "rkroulettecnt2" ),//6번 점수.
										parser.getInt64 ( "rkwolfcnt2" ));	//7번 점수.
				}
				
				//7. 지난회차 랭킹대전 정보..
				parser.parsing(_xml, "rklaterank");
				if ( parser.next () )
				{
					ServerData.rkLateDate = parser.getString ( "rkdateid8" );	//날짜.				
					
					//청팀.
					ServerData.AddRkData("LateBlue", 
					                     parser.getInt64 ( "rksalemoney" ),	//1번 점수.
					                     parser.getInt64 ( "rksalebarrel" ),	//2번 점수.
					                     parser.getInt64 ( "rkbattlecnt" ),	//3번 점수.
					                     parser.getInt64 ( "rkbogicnt" ),	//4번 점수.
					                     parser.getInt64 ( "rkfriendpoint" ),//5번 점수.
					                     parser.getInt64 ( "rkroulettecnt" ),//6번 점수.
					                     parser.getInt64 ( "rkwolfcnt" ));	//7번 점수.
					
					//백팀.
					ServerData.AddRkData("LateWhite", 
					                     parser.getInt64 ( "rksalemoney2" ),	//1번 점수.
					                     parser.getInt64 ( "rksalebarrel2" ),//2번 점수.
					                     parser.getInt64 ( "rkbattlecnt2" ),	//3번 점수.
					                     parser.getInt64 ( "rkbogicnt2" ),	//4번 점수.
					                     parser.getInt64 ( "rkfriendpoint2" ),//5번 점수.
					                     parser.getInt64 ( "rkroulettecnt2" ),//6번 점수.
					                     parser.getInt64 ( "rkwolfcnt2" ));	//7번 점수.
				}
				
				//@@@@ end

				//짜요마켓아이템등록.
				ReadZzayoMarketItems(_xml, "zcpmarket", parser);


				break;
			case Protocol.RESULT_NEWVERION_CLIENT_DOWNLOAD:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_LOGIN > error > 마켓별 버젼이 틀리다. > 다시받아라.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_SERVER_CHECKING:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_LOGIN > error > 시스템 점검중입니다. > 게임 종료.");
				#endif
				break;
			case Protocol.RESULT_ERROR_BLOCK_USER:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_LOGIN > error > 블럭처리된 아이디입니다. > 게임 종료.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_LOGIN > error > 아이디를 확인해라 > 다시 로그인.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_PASSWORD:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_LOGIN > error > 패스워드 틀렸다. > 다시 로그인.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_DELETED_USER:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_LOGIN > error > 삭제된 아이디입니다. > 다시 로그인.");	
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_LOGIN > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_XXXXX:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_XXXXX _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_XXXXX > success:" + parser.getString("serial"));
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_XXXXX > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_NOTICE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_NOTICE _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_NOTICE > success:" + parser.getString("serial"));
				#endif
				
				parser.parsing(_xml, "notice");
				if(parser.next()){
					
					ServerData.server_Version = parser.getInt("version");
					ServerData.server_syscheck = parser.getInt("syscheck");
					
					Ui_ImageNotice.listImageNoticeData.Clear ();
					//Ui_ImageNotice.AddImageNoticeData ( Ui_ImageNotice.KEY_TODAY_NOTICE_01 , parser.getString("comfile") , parser.getString("comurl") );
					//Ui_ImageNotice.AddImageNoticeData ( Ui_ImageNotice.KEY_TODAY_NOTICE_02 , parser.getString("comfile2") , parser.getString("comurl2") );
					//Ui_ImageNotice.AddImageNoticeData ( Ui_ImageNotice.KEY_TODAY_NOTICE_03 , parser.getString("comfile3") , parser.getString("comurl3") );
					
				
					Ui_ImageNotice.AddImageNoticeData ( parser.getString("comfile") , parser.getString("comurl") );
					Ui_ImageNotice.AddImageNoticeData ( parser.getString("comfile2") , parser.getString("comurl2") );
					Ui_ImageNotice.AddImageNoticeData ( parser.getString("comfile3") , parser.getString("comurl3") );
					Ui_ImageNotice.AddImageNoticeData ( parser.getString("comfile4") , parser.getString("comurl4") );
					Ui_ImageNotice.AddImageNoticeData ( parser.getString("comfile5") , parser.getString("comurl5") );
					
					
					ServerData.server_patchUrl = parser.getString("patchurl");			//http://m.naver.com
					ServerData.server_recurl = parser.getString("recurl");				//http://m.naver.com	> 2014년 1월 게시판 글쓰기 popup.
					ServerData.server_comment = parser.getString("comment") ;			//게시판 글공지.
					
					ServerData.server_serviceurl = parser.getString("serviceurl") ;		//고객센터 질문하는곳.
					
					// parser.getString("smsurl");										//http://m.naver.com
					// parser.getString("smscom");										//sms로 보내는 강추멘트.
					ServerData.parser_url_community = parser.getString("communityurl");	//http://m.naver.com
					
					//현재서버 타임 > 클라이언트 타임.
					Calendar.SetServerTime ( DateTime.Parse( parser.getString("currentDate") ) );	//2013-08-22 20:27:47
					//Debug.Log("CurrentData" + parser.getString("currentDate") );
					// 서버에서오는 아이템 인포 URL은 더이상 쓰지않고.
					// 해당 클라이언트에 주소가 고정으로 들어가있다.
					// 파일이름은 relxxx_iteminfo_ad.dat
					// 실서버 - 버젼 - 아이템인포 - 안드로이드 . 파일 확장자.
					// 파일은 한번다운로드되면 폰에 저장되어 쓰이고.
					// 새로 받아지길 원한다면. 서버에서 "iteminfover" 버젼을 올려주면된다.
					
					//GameData.itemInfoUrl 	 = parser.getString("iteminfourl");		//http://222.106.88.198:40009/Game4Farm/etc/_ad/iteminfo_100.dat
					GameData.iteminfover	 = parser.getInt("iteminfover");
				}
				
				//CashBuy _cy = gameObject.GetComponent<CashBuy>();
				//_cy.callCashslide();
				//_cy.callPartyTrackStart();	//PartyTrack

				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_NOTICE > error > not found error");
				#endif
				break;
			}
		}
			break;	
			
		case Protocol.PTS_ANISET:
		{
			
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ANISET _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANISET > success");
				#endif					
				//농장에 있는 동물 번호.
				parser.parsing(_xml, "aniset");
				while(parser.next()){
					//죽은 동물. 동물이 아닌것. 대표동물 등등은 자체 알아서 필터해서 보내줌.
					//다른 정보는 클라이언트 데이타가 우선 순위가 높아서 안보내줌.
					parser.getInt("fieldidx");//필드(0~8:필드, -1:창고, -2:죽음/병원).
					// 필드동물 		0 ~ 8.
					// 창고(-1)		Protocol.USERITEM_FIELDIDX_INVEN	
					// 병원(-2)		Protocol.USERITEM_FIELDIDX_HOSPITAL	
					parser.getInt("listidx");	//리스트번호.
				}
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANISET > error > 아이디가 존재하지 않는다.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANISET > error > 튜토리얼 번호가 없다.");	
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANISET > error > not found error");
				#endif
				break;
			}
		}
			
			break;
			
		case Protocol.PTS_CREATEID:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_CREATEID _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif				
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CREATEID > success");
				#endif
				break;
			case Protocol.RESULT_ERROR_ID_DUPLICATE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CREATEID > error > 아이디 중복");	
				#endif
				break;
			case Protocol.RESULT_ERROR_ID_CREATE_MAX:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CREATEID > error > phone당 생성 가능한 아이디개수초과.");
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CREATEID > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_CREATEGUEST:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_CREATEGUEST _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CREATEGUEST > success");
				#endif
				
				//1. 서버에서 생성된 게스트 아이디 받기.
				strCreateID = parser.getString("gameid");
				strCreatePW = parser.getString("password");				//패스워드를 보내준것으로 새팅해야한다.
				
				//					Debug.Log ( "test PTS_CREATEGUEST" );
				//				strCreateID = "farm645433296";
				//				strCreatePW = "2769645f1t9r9b616341";	//패스워드를 보내준것으로 새팅해야한다.
				
				break;
			case Protocol.RESULT_ERROR_ID_DUPLICATE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CREATEGUEST > error > 아이디 중복");	
				#endif
				break;
			case Protocol.RESULT_ERROR_ID_CREATE_MAX:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CREATEGUEST > error > phone당 생성 가능한 아이디개수초과.");
				#endif
				break;
			case Protocol.RESULT_ERROR_JOIN_WAIT:
				//@@@@ start 0091
				strWaitTime = parser.getString("waittime");	
				//@@@@ end
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CREATEGUEST > error > 일정시간동안 가입이 불가합니다.");
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_CREATEGUEST > error > not found error");
				#endif
				break;
			}
		}
			break;		
			
		case Protocol.PTS_PUSHMSG:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_PUSHMSG _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			string _strActionMsg;
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PUSHMSG > success > Push 정상처리하다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PUSHMSG > error > 아이디를 찾지 못했습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_OTHERID:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PUSHMSG > error > 상대가 존재하지 않습니다.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_SUPPORT_MODE:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PUSHMSG > error > 지원하지 않는 모드입니다.");
				#endif
				break;
			default:
				#if NET_DEBUG_MODE
				Debug.Log("PTS_PUSHMSG > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_ANIDIE:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_ANIDIE _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIDIE > success > 동물 병원으로 이동해주라.");
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIDIE > error > 아이디가 존재하지 않는다.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_ITEMCODE:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIDIE > error > 튜토리얼 번호가 없다.");	
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_ANIDIE > error > not found error");
				#endif
				break;
			}
		}
			break;
		case Protocol.PTS_DOGAMREWARD:
		{
			#if NET_DEBUG_MODE
			Debug.Log("[C <- S] PTS_DOGAMREWARD _resultcode:" + _resultcode + " _msg:" + _msg + "\n" + _xml);
			#endif
			
			switch(_resultcode){
			case Protocol.RESULT_SUCCESS:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_DOGAMREWARD > success");
				#endif
				
				//선물정보.
				ReadGiftData ( _xml, "giftitem" , parser );	
				
				
				//도감 : 보상받은 도감.
				parser.parsing(_xml, "dogamreward");
				while(parser.next()){
					parser.getInt("dogamidx");			
					//보상을 받아간 도감번호. 번호가 없으면 안받아감.
					//1 : 1번을 받아갔다는 의미.
					//  : 2번이 전부 수집했는데 여기 리스트에 없으면 안받아갔다는 의미. 
				}
				
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_GAMEID:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_DOGAMREWARD > error > 아이디가 존재하지 않는다.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_NOT_FOUND_DOGAMIDX:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_DOGAMREWARD > error > 도감 번호가 존재하지 않는다.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_DOGAM_ALREADY_REWARD:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_DOGAMREWARD > error > 도감을 이미 지급했다.");	
				#endif
				break;
			case Protocol.RESULT_ERROR_DOGAM_LACK:		
				#if NET_DEBUG_MODE
				Debug.Log("PTS_DOGAMREWARD > error > 도감 번호가 부족하다");	
				#endif
				break;
			default:	
				#if NET_DEBUG_MODE
				Debug.Log("PTS_DOGAMREWARD > error > not found error");
				#endif
				break;
			}
		}
			break;
		default:{
			Debug.LogError("[error]:[C -> S] not define code\n" + _xml);
			//Ui_Debug.SetText ( "[error]:[C -> S] not define code\n" + _xml);
		}
			break;
		}
		
		
		return _resultcode;
	}
	
	//---------------------------------------------------------------------
	//	1. 네트워크에서 데이타 요청.(Non Blocking)
	//	2. 받아온 데이타는 Queue에 쌓아둔다.
	//	3. Update()일정 주기를 돌면서 메세지를 처리한다.
	//---------------------------------------------------------------------
	//1. 네트워크 데이타 요청.
	public int debug = 0;
	public float debugDelay = 0f;
	public int debugErrCode = 0;
	
	public IEnumerator Handle(WWW _www, DELEGATE_INTINT _onResult, bool _dummy )
	{
		if ( debug > 0 )
		{
			Debug.Log("test fail net("+debug+")");
			
			debug--;
			
			yield return new WaitForSeconds(debugDelay);
			
			if ( _onResult != null ) {
				_onResult ( Protocol.CONNECT_STATE_SUCCESS , debugErrCode );
			}
			
			StartCoroutine ( DealyKill ( _www ) );
		}
		else 
		{
			float _timeOut = Time.realtimeSinceStartup + Protocol.LIMIT_CONNECT_TIME;
			
			while( !_www.isDone && Time.realtimeSinceStartup < _timeOut && string.IsNullOrEmpty( _www.error ) ){
				yield return 0;
			}
			
			if( string.IsNullOrEmpty( _www.error ) && _www.isDone)
			{
				int _detail = parseCode ( _www.data.Trim() );
				
				if ( _onResult != null ) {
					_onResult ( Protocol.CONNECT_STATE_SUCCESS , _detail );
				}
				
				_www.Dispose();
			}
			else if(Time.realtimeSinceStartup >= _timeOut)
			{
				if ( _onResult != null ) {
					_onResult ( Protocol.CONNECT_STATE_FAIL , Protocol.CONNECT_STATE_FAIL );
				}
				
				StartCoroutine ( DealyKill ( _www ) );
			}
			else 
			{
				//Debug.Log("err connect");
				
				if ( _onResult != null ) {
					_onResult ( Protocol.CONNECT_STATE_FAIL , Protocol.CONNECT_STATE_FAIL );
				}
				
				StartCoroutine ( DealyKill ( _www ) );
			}
		}
	}
	
	// 이렇게 하는 이유.
	// 수신 받지 못한 www를 죽일때 유니티에서 멈추는 버그가 있기때문에.
	// www가 완전히 작업이 끝날때까지 기다렸다가 죽인다. 
	private IEnumerator DealyKill ( WWW _www )
	{
		// 뭔가 에러가 있거나.
		// isDone 이 true이면 멈춘다.
		while ( _www.isDone == false  ) 
		{
			yield return null;
		}
		
		_www.Dispose ();
	}
	
}
